<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GiyaYon&#39;s Blog</title>
  
  
  <link href="http://giyayonlib.com/atom.xml" rel="self"/>
  
  <link href="http://giyayonlib.com/"/>
  <updated>2023-04-26T12:02:07.626Z</updated>
  <id>http://giyayonlib.com/</id>
  
  <author>
    <name>GiyaYon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>区块链技术实践-使用Java搭建简单的区块链系统</title>
    <link href="http://giyayonlib.com/2023/05/05/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89%E5%8C%BA%E5%9D%97%E9%93%BE%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97/"/>
    <id>http://giyayonlib.com/2023/05/05/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89%E5%8C%BA%E5%9D%97%E9%93%BE%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97/</id>
    <published>2023-05-05T15:33:50.293Z</published>
    <updated>2023-04-26T12:02:07.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文欲实现的需求：</p><ol><li><p><strong>设计区块和链结构</strong>：你可以创建一个<code>Block</code>类来表示区块，其中包含属性：如时间戳、交易数据、前一个区块的哈希值、当前区块的哈希值等。然后创建一个<code>Blockchain</code>类来表示整个区块链，其中包含一个<code>Block</code>对象的列表来存储所有的区块。</p></li><li><p><strong>挖矿</strong>：你可以在<code>Blockchain</code>类中添加一个挖矿方法，该方法接收一组交易数据作为参数，并创建一个新的区块。在这个过程中，你需要执行工作量证明算法来寻找满足特定条件的哈希值。</p><p>挖矿是区块链中的一个重要过程，它指的是通过解决复杂的计算问题来创建新区块并获得奖励的过程。在一个基于工作量证明算法（Proof of Work，PoW）的区块链系统中，挖矿通常包括以下几个步骤：</p><ol><li><del><strong>收集交易数据</strong>：首先，挖矿节点需要收集一组未经确认的交易数据，并将其打包到一个新区块中。</del></li><li><strong>计算区块哈希值</strong>：其次，挖矿节点需要对新区块进行哈希运算，以计算出它的哈希值。这一步通常需要使用特定的哈希算法（如SHA-256）。</li><li><strong>执行工作量证明算法</strong>：然后，挖矿节点需要执行工作量证明算法来寻找满足特定条件的哈希值。具体来说，它需要不断改变新区块中的某个字段（如随机数），并重新计算哈希值，直到找到一个以特定数量的零开头的哈希值。</li><li><strong>广播新区块</strong>：最后，当挖矿节点成功找到满足条件的哈希值时，它就可以将新区块广播到整个网络中，并获得相应的奖励。</li></ol><p>以上就是一个简单的挖矿过程。不同的区块链系统可能会有所不同，请根据实际情况进行调整。</p></li><li><p><strong>设计P2P网络</strong>：你可以使用Java中的网络编程技术（如Socket）来实现P2P网络。每个节点都可以监听特定端口，并与其他节点建立连接。</p></li><li><p><strong>新产生的区块同步到其它结点</strong>：当一个节点成功挖出一个新区块时，它应该将这个新区块广播到整个网络中，让其他节点都能接收到这个新区块。</p></li><li><p><strong>验证其它结点广播的区块</strong>：当一个节点接收到其他节点广播的新区块时，它应该对这个新区块进行验证（例如检查哈希值是否满足特定条件）。如果验证通过，则将这个新区块加入本地的区块链中。</p><p>当一个节点接收到其他节点广播的新区块时，它应该对这个新区块进行验证。验证过程通常包括以下几个步骤：</p><ol><li><strong>检查区块结构</strong>：首先，你需要检查新区块的结构是否符合预期，例如它是否包含所有必要的字段（如时间戳、交易数据、前一个区块的哈希值等）。</li><li><strong>检查前一个区块的哈希值</strong>：其次，你需要检查新区块中存储的前一个区块的哈希值是否与本地区块链中最后一个区块的哈希值相同。</li><li><strong>检查工作量证明</strong>：然后，你需要检查新区块是否满足工作量证明算法的要求。具体来说，你需要计算新区块的哈希值，并检查它是否满足特定条件（例如以特定数量的零开头）。</li><li><del><strong>验证交易数据</strong>：最后，你需要验证新区块中包含的所有交易数据。这一步通常涉及到对每笔交易进行签名验证、双花检测等操作。</del></li></ol><p>如果新区快通过了以上所有验证步骤，则说明它是有效的，并可以被加入到本地区块链中。否则，应该将其忽略并继续监听网络中其他节点广播的新区快。</p></li><li><p><strong>设计提供API服务</strong>：你可以使用Java Web技术（如Servlet）来实现API服务。例如，你可以创建一个Servlet来处理获取所有区块数据的请求，并返回JSON格式的数据。</p><img src="https://raw.githubusercontent.com/GiyaYon/mypicGo/master/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E2%80%94%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%E8%BF%87%E7%A8%8B.png" style="zoom: 80%;" /><center>本篇使用JAVA语言开发区块链系统</center><p>在基础层方面，构建基本区块结构，进行哈希处理，矿工挖矿的功能，后续将交易模块嵌入区块结构里面，而区块以区块组成的链作为账本记录。</p></li></ol><h1 id="1-定义区块结构"><a href="#1-定义区块结构" class="headerlink" title="1.定义区块结构"></a>1.定义区块结构</h1><h2 id="基础区块Block-java"><a href="#基础区块Block-java" class="headerlink" title="基础区块Block.java"></a>基础区块Block.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.giyaYon.arithmetic.StringUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GiyaYon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Block</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 区块的序号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> index;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 哈希值，作为唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String hash;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上一个区块哈希值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String previousHash;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;TransactionData&gt; data;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> timeStamp;</span><br><span class="line"><span class="comment">//工作量证明</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> nonce;</span><br><span class="line"><span class="comment">// 矿工挖矿控制</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">running</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Block Constructor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> previousHash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">(<span class="type">int</span> index, ArrayList&lt;TransactionData&gt; data, String previousHash )</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.index = index;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.previousHash = previousHash;</span><br><span class="line">        <span class="built_in">this</span>.timeStamp = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Making sure we do this after we set the other values.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">this</span>.hash = calculateHash();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">calculateHash</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">calculatedhash</span> <span class="operator">=</span> StringUtil.applySha256(</span><br><span class="line">                previousHash +</span><br><span class="line">                        Long.toString(timeStamp) +</span><br><span class="line">                        Integer.toString(nonce) +</span><br><span class="line">                        data</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> calculatedhash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">mineBlock</span> <span class="params">(<span class="type">int</span> difficulty)</span>&#123;</span><br><span class="line">        <span class="comment">// Create a string with difficulty * &quot;0&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">char</span>[difficulty]).replace(<span class="string">&#x27;\0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">while</span>(!hash.substring( <span class="number">0</span>, difficulty).equals(target)) &#123;</span><br><span class="line">            nonce ++;</span><br><span class="line">            hash = calculateHash();</span><br><span class="line">            <span class="keyword">if</span>(!running)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Block Mined despected!!! &quot;</span> );</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Block Mined!!! : &quot;</span> + hash);</span><br><span class="line">        <span class="keyword">return</span> hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stopMining</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        running = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Block&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;index=&quot;</span> + index +</span><br><span class="line">                <span class="string">&quot;, hash=&#x27;&quot;</span> + hash + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, previousHash=&#x27;&quot;</span> + previousHash + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&quot;, timeStamp=&quot;</span> + timeStamp +</span><br><span class="line">                <span class="string">&quot;, nonce=&quot;</span> + nonce +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构造函数里，先对基础属性赋值，通过SHA256算法对数据进行<code>数字摘要加密</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">calculateHash</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">calculatedhash</span> <span class="operator">=</span> StringUtil.applySha256(</span><br><span class="line">            previousHash +</span><br><span class="line">                    Long.toString(timeStamp) +</span><br><span class="line">                    Integer.toString(nonce) +</span><br><span class="line">                    data</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> calculatedhash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>矿工挖矿使用到的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">mineBlock</span> <span class="params">(<span class="type">int</span> difficulty)</span>&#123;</span><br><span class="line">    <span class="comment">// Create a string with difficulty * &quot;0&quot;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">char</span>[difficulty]).replace(<span class="string">&#x27;\0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">while</span>(!hash.substring( <span class="number">0</span>, difficulty).equals(target)) &#123;</span><br><span class="line">        nonce ++;</span><br><span class="line">        hash = calculateHash();</span><br><span class="line">        <span class="keyword">if</span>(!running)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Block Mined despected!!! &quot;</span> );</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;Block Mined!!! : &quot;</span> + hash);</span><br><span class="line">    <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stopMining</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    running = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工具类StringUtil-java"><a href="#工具类StringUtil-java" class="headerlink" title="工具类StringUtil.java"></a>工具类StringUtil.java</h2><p>这里给出SHA256算法使用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密摘要</span></span><br><span class="line"><span class="comment">     * Applies Sha256 to a string and returns the result.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">applySha256</span><span class="params">(String input)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">digest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line">            <span class="comment">//Applies sha256 to our input,</span></span><br><span class="line">            <span class="type">byte</span>[] hash = digest.digest(input.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * This will contain hash as hexidecimal</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">hexString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; hash.length; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(<span class="number">0xff</span> &amp; hash[i]);</span><br><span class="line">                <span class="keyword">if</span>(hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                    hexString.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                hexString.append(hex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hexString.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Block</span> <span class="variable">genesisBlock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), <span class="string">&quot;0&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hash for block 1 : &quot;</span> + genesisBlock.hash);</span><br><span class="line"></span><br><span class="line">        <span class="type">Block</span> <span class="variable">secondBlock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),genesisBlock.hash);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hash for block 2 : &quot;</span> + secondBlock.hash);</span><br><span class="line"></span><br><span class="line">        <span class="type">Block</span> <span class="variable">thirdBlock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),secondBlock.hash);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hash for block 3 : &quot;</span> + thirdBlock.hash);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hash for block 1 : 73e659c6ee17b83f0d3209097facb1fe32ba3f2f857a03329be5cac533c5b362</span><br><span class="line">Hash for block 2 : b608321771936423e99eeb93c74c524937131689f2a3d437891e2ecbd14ff404</span><br><span class="line">Hash for block 3 : 02dc6bd5f9e1e11058fd5622e8e1150cf7085ae32c7de879982bf3381a3ce8b7</span><br></pre></td></tr></table></figure><h2 id="使用Gson类输出json格式信息"><a href="#使用Gson类输出json格式信息" class="headerlink" title="使用Gson类输出json格式信息"></a>使用Gson类输出json格式信息</h2><p>引入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>我们用ArrayList 将区块串起来，组成区块链</p><p>测试代码2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">    ArrayList&lt;Block&gt; blockchain = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Block&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add our blocks to the blockchain ArrayList:</span></span><br><span class="line">    blockchain.add(<span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), <span class="string">&quot;0&quot;</span>));</span><br><span class="line">    blockchain.add(<span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),blockchain.get(blockchain.size()-<span class="number">1</span>).hash));</span><br><span class="line">    blockchain.add(<span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),blockchain.get(blockchain.size()-<span class="number">1</span>).hash));</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">blockchainJson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>().setPrettyPrinting().create().toJson(blockchain);</span><br><span class="line">    System.out.println(blockchainJson);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;index&quot;: 0,</span><br><span class="line">    &quot;hash&quot;: &quot;da5b9fb425a489c460488aeb4f7a0de0c8b81d4e87d0199af57932cc3cccb005&quot;,</span><br><span class="line">    &quot;previousHash&quot;: &quot;0&quot;,</span><br><span class="line">    &quot;data&quot;: [],</span><br><span class="line">    &quot;timeStamp&quot;: 1679820296791,</span><br><span class="line">    &quot;nonce&quot;: 0,</span><br><span class="line">    &quot;running&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;index&quot;: 1,</span><br><span class="line">    &quot;hash&quot;: &quot;1d4c0d0b25376d660e51d4a1cd3a5380a5e76bce0827fcf204bff9f4c0a53e10&quot;,</span><br><span class="line">    &quot;previousHash&quot;: &quot;da5b9fb425a489c460488aeb4f7a0de0c8b81d4e87d0199af57932cc3cccb005&quot;,</span><br><span class="line">    &quot;data&quot;: [],</span><br><span class="line">    &quot;timeStamp&quot;: 1679820296823,</span><br><span class="line">    &quot;nonce&quot;: 0,</span><br><span class="line">    &quot;running&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;index&quot;: 2,</span><br><span class="line">    &quot;hash&quot;: &quot;14dac1b905439bb19d639e094ea5858b26c7b186394194f542411314d877a0ad&quot;,</span><br><span class="line">    &quot;previousHash&quot;: &quot;1d4c0d0b25376d660e51d4a1cd3a5380a5e76bce0827fcf204bff9f4c0a53e10&quot;,</span><br><span class="line">    &quot;data&quot;: [],</span><br><span class="line">    &quot;timeStamp&quot;: 1679820296823,</span><br><span class="line">    &quot;nonce&quot;: 0,</span><br><span class="line">    &quot;running&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-挖矿与验证"><a href="#2-挖矿与验证" class="headerlink" title="2.挖矿与验证"></a>2.挖矿与验证</h1><p>首先遍历链条中每个区块与它上一个的区块，验证：</p><ol><li>验证当前区块是不是被修改过数据后上传，上传者可能只修改了当前的区块的数据而不会去重新生成哈希。</li><li>对比先前的区块哈希与当前区块里面链接的上一个区块的哈希是否一致</li><li>对比这个区块是不是达成工作量要求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证这个区块的合法性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span>  Boolean <span class="title function_">isChainValid</span><span class="params">()</span> &#123;</span><br><span class="line">    Block currentBlock;</span><br><span class="line">    Block previousBlock;</span><br><span class="line">    <span class="type">String</span> <span class="variable">hashTarget</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">char</span>[ difficulty]).replace(<span class="string">&#x27;\0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//loop through blockchain to check hashes:</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i &lt;  serviceClient.blockchain.size(); i++) &#123;</span><br><span class="line">        currentBlock = serviceClient.blockchain.get(i);</span><br><span class="line">        previousBlock = serviceClient.blockchain.get(i-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//compare registered hash and calculated hash:</span></span><br><span class="line">        <span class="keyword">if</span>(!currentBlock.hash.equals(currentBlock.calculateHash()) )&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Current Hashes not equal&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//compare previous hash and registered previous hash</span></span><br><span class="line">        <span class="keyword">if</span>(!previousBlock.hash.equals(currentBlock.previousHash) ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Previous Hashes not equal&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//check if hash is solved</span></span><br><span class="line">        <span class="keyword">if</span>(!currentBlock.hash.substring( <span class="number">0</span>, difficulty).equals(hashTarget)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;This block hasn&#x27;t been mined&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    </span><br><span class="line">    ArrayList&lt;Block&gt; blockchain = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Block&gt;();</span><br><span class="line">    <span class="comment">//难度系数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">difficulty</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        blockchain.add(<span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), <span class="string">&quot;0&quot;</span>));</span><br><span class="line">          System.out.println(<span class="string">&quot;Trying to Mine block 1... &quot;</span>);</span><br><span class="line">          blockchain.get(<span class="number">0</span>).mineBlock(difficulty);</span><br><span class="line"></span><br><span class="line">        blockchain.add(<span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),blockchain.get(blockchain.size()-<span class="number">1</span>).hash));</span><br><span class="line">          System.out.println(<span class="string">&quot;Trying to Mine block 2... &quot;</span>);</span><br><span class="line">          blockchain.get(<span class="number">1</span>).mineBlock(difficulty);</span><br><span class="line"></span><br><span class="line">        blockchain.add(<span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),blockchain.get(blockchain.size()-<span class="number">1</span>).hash));</span><br><span class="line">          System.out.println(<span class="string">&quot;Trying to Mine block 3... &quot;</span>);</span><br><span class="line">          blockchain.get(<span class="number">2</span>).mineBlock(difficulty);</span><br><span class="line"></span><br><span class="line">          System.out.println(<span class="string">&quot;\nBlockchain is Valid: &quot;</span> + isChainValid());</span><br><span class="line"></span><br><span class="line">          <span class="type">String</span> <span class="variable">blockchainJson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>().setPrettyPrinting().create().toJson(blockchain);</span><br><span class="line">          System.out.println(<span class="string">&quot;\nThe block chain: &quot;</span>);</span><br><span class="line">          System.out.println(blockchainJson);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证这个区块的合法性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  Boolean <span class="title function_">isChainValid</span><span class="params">()</span> &#123;</span><br><span class="line">        Block currentBlock;</span><br><span class="line">        Block previousBlock;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hashTarget</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">char</span>[ difficulty]).replace(<span class="string">&#x27;\0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//loop through blockchain to check hashes:</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i &lt;  blockchain.size(); i++) &#123;</span><br><span class="line">            currentBlock = blockchain.get(i);</span><br><span class="line">            previousBlock = blockchain.get(i-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//compare registered hash and calculated hash:</span></span><br><span class="line">            <span class="keyword">if</span>(!currentBlock.hash.equals(currentBlock.calculateHash()) )&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Current Hashes not equal&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//compare previous hash and registered previous hash</span></span><br><span class="line">            <span class="keyword">if</span>(!previousBlock.hash.equals(currentBlock.previousHash) ) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Previous Hashes not equal&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//check if hash is solved</span></span><br><span class="line">            <span class="keyword">if</span>(!currentBlock.hash.substring( <span class="number">0</span>, difficulty).equals(hashTarget)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;This block hasn&#x27;t been mined&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Trying to Mine block 1... </span><br><span class="line">Block Mined!!! : 000cebc823ab29477def440c42e40cc8f2d6c95e9a70acaa194118b805fd3af0</span><br><span class="line">Trying to Mine block 2... </span><br><span class="line">Block Mined!!! : 000078bd7a30e9062e47040a0c2e41132e8d7f0cfbc7aca8bbc7dd402d0a7490</span><br><span class="line">Trying to Mine block 3... </span><br><span class="line">Block Mined!!! : 000f8c109c985348c4ed51f78405e2ddba8d365c14caf399cdd9e62f99566830</span><br><span class="line"></span><br><span class="line">Blockchain is Valid: true</span><br><span class="line"></span><br><span class="line">The block chain: </span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;index&quot;: 0,</span><br><span class="line">    &quot;hash&quot;: &quot;000cebc823ab29477def440c42e40cc8f2d6c95e9a70acaa194118b805fd3af0&quot;,</span><br><span class="line">    &quot;previousHash&quot;: &quot;0&quot;,</span><br><span class="line">    &quot;data&quot;: [],</span><br><span class="line">    &quot;timeStamp&quot;: 1679821998773,</span><br><span class="line">    &quot;nonce&quot;: 2695,</span><br><span class="line">    &quot;running&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;index&quot;: 1,</span><br><span class="line">    &quot;hash&quot;: &quot;000078bd7a30e9062e47040a0c2e41132e8d7f0cfbc7aca8bbc7dd402d0a7490&quot;,</span><br><span class="line">    &quot;previousHash&quot;: &quot;000cebc823ab29477def440c42e40cc8f2d6c95e9a70acaa194118b805fd3af0&quot;,</span><br><span class="line">    &quot;data&quot;: [],</span><br><span class="line">    &quot;timeStamp&quot;: 1679821998850,</span><br><span class="line">    &quot;nonce&quot;: 1692,</span><br><span class="line">    &quot;running&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;index&quot;: 2,</span><br><span class="line">    &quot;hash&quot;: &quot;000f8c109c985348c4ed51f78405e2ddba8d365c14caf399cdd9e62f99566830&quot;,</span><br><span class="line">    &quot;previousHash&quot;: &quot;000078bd7a30e9062e47040a0c2e41132e8d7f0cfbc7aca8bbc7dd402d0a7490&quot;,</span><br><span class="line">    &quot;data&quot;: [],</span><br><span class="line">    &quot;timeStamp&quot;: 1679821998871,</span><br><span class="line">    &quot;nonce&quot;: 3385,</span><br><span class="line">    &quot;running&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-通信实现"><a href="#3-通信实现" class="headerlink" title="3.通信实现"></a>3.通信实现</h1><p>在网络的设计上，这里采用传统的CS模式来模拟两个点之间的网络行为，即特定客户端发送请求服务端，服务端回复。事实上P2P每个节点即是服务器也是客户端，而且后续改进可以从这里修改。</p><h2 id="1-使用WebSocket实现服务器和客户端的网络通信基础模块，引入依赖"><a href="#1-使用WebSocket实现服务器和客户端的网络通信基础模块，引入依赖" class="headerlink" title="1.使用WebSocket实现服务器和客户端的网络通信基础模块，引入依赖"></a>1.使用WebSocket实现服务器和客户端的网络通信基础模块，引入依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.java-websocket&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;Java-WebSocket&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-SocketServer-java"><a href="#2-SocketServer-java" class="headerlink" title="2.SocketServer.java"></a>2.SocketServer.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.java_websocket.WebSocket;</span><br><span class="line"><span class="keyword">import</span> org.java_websocket.handshake.ClientHandshake;</span><br><span class="line"><span class="keyword">import</span> org.java_websocket.server.WebSocketServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GiyaYon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@code</span> 网络模块 服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketServer</span> <span class="keyword">extends</span> <span class="title class_">WebSocketServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;WebSocket&gt; list;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SocketServer</span><span class="params">(<span class="type">int</span> port)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(port));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SocketServer</span><span class="params">(InetSocketAddress address)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(WebSocket conn, ClientHandshake handshake)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This method sends a message to the new client</span></span><br><span class="line">        conn.send(<span class="string">&quot;Welcome to the server!&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// This method sends a message to all clients connected</span></span><br><span class="line">        broadcast(conn.getRemoteSocketAddress().getAddress().getHostAddress() + <span class="string">&quot; entered the room!&quot;</span>);</span><br><span class="line">        System.out.println(conn.getRemoteSocketAddress().getAddress().getHostAddress() + <span class="string">&quot; entered the room!&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        list.add(conn);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">(WebSocket conn, <span class="type">int</span> code, String reason, <span class="type">boolean</span> remote)</span> &#123;</span><br><span class="line">        broadcast(conn + <span class="string">&quot; has left the room!&quot;</span>);</span><br><span class="line">        System.out.println(conn + <span class="string">&quot; has left the room!&quot;</span>);</span><br><span class="line">        list.remove(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(WebSocket conn, String message)</span> &#123;</span><br><span class="line"></span><br><span class="line">        broadcast(conn + <span class="string">&quot;:&quot;</span> + message);</span><br><span class="line">        System.out.println(conn + <span class="string">&quot;: &quot;</span> + message + <span class="string">&quot;，修改前。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(WebSocket conn, Exception ex)</span> &#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// some errors like port binding failed may not be assignable to a specific</span></span><br><span class="line">            <span class="comment">// websocket</span></span><br><span class="line">            broadcast(conn + <span class="string">&quot;has a error! it will be quit!&quot;</span>);</span><br><span class="line">            list.remove(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Server started!&quot;</span>);</span><br><span class="line">        setConnectionLostTimeout(<span class="number">0</span>);</span><br><span class="line">        setConnectionLostTimeout(<span class="number">100</span>);</span><br><span class="line">        list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MsgBroadcast</span><span class="params">(String msg)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(msg != <span class="literal">null</span> &amp;&amp; list.size() &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            broadcast(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-socketClient-java"><a href="#3-socketClient-java" class="headerlink" title="3.socketClient.java"></a>3.socketClient.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.java_websocket.WebSocket;</span><br><span class="line"><span class="keyword">import</span> org.java_websocket.client.WebSocketClient;</span><br><span class="line"><span class="keyword">import</span> org.java_websocket.drafts.Draft;</span><br><span class="line"><span class="keyword">import</span> org.java_websocket.handshake.ServerHandshake;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GiyaYon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@code</span> 网络模块，客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketClient</span> <span class="keyword">extends</span> <span class="title class_">WebSocketClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;WebSocket&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;WebSocket&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;WebSocket&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SocketClient</span><span class="params">(URI serverUri)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(serverUri);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SocketClient</span><span class="params">(URI serverUri, Draft protocolDraft)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(serverUri, protocolDraft);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(ServerHandshake serverHandshake)</span> &#123;</span><br><span class="line">        list.add(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">(<span class="type">int</span> i, String s, <span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">        list.remove(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        list.remove(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String msg)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(msg != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.send(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">server</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8888</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">SocketServer</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SocketServer</span>(port);</span><br><span class="line">        server.start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">String</span> <span class="variable">wait</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ws://localhost:8888</span></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">client</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">SocketClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client = <span class="keyword">new</span> <span class="title class_">SocketClient</span>(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;ws://localhost:8888&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        client.connect();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用<a href="http://coolaf.com/tool/chattest">http://coolaf.com/tool/chattest</a> 测试服务端是否开启成功 <code>ws://localhost:8888</code></p><p>打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Server started!</span><br><span class="line">0:0:0:0:0:0:0:1 entered the room!</span><br><span class="line">127.0.0.1 entered the room!</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Welcome to the server!</span><br><span class="line">127.0.0.1 entered the room!</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">连接成功，现在你可以发送信息啦！！！</span><br><span class="line">服务端回应 2023-03-26 17:30:31</span><br><span class="line">Welcome to the server!</span><br><span class="line">服务端回应 2023-03-26 17:30:31</span><br><span class="line">0:0:0:0:0:0:0:1 entered the room!</span><br><span class="line">服务端回应 2023-03-26 17:33:25</span><br><span class="line">127.0.0.1 entered the room!</span><br><span class="line">websocket连接已断开!!!</span><br></pre></td></tr></table></figure><h1 id="4-网络服务实现"><a href="#4-网络服务实现" class="headerlink" title="4.网络服务实现"></a>4.网络服务实现</h1><h2 id="1-消息实现"><a href="#1-消息实现" class="headerlink" title="1.消息实现"></a>1.消息实现</h2><p>首先需要对消息进行定义处理，例如A节点对B节点发送区块链更新请求消息，或者是C节点挖到一个矿，想要对其进行广播，其他节点收到消息会对其进行处理。</p><p>定义消息模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GiyaYon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> type;</span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Message</span><span class="params">(<span class="type">int</span> type, String data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义消息类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Network: BLOCK_PROTOCOL</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GiyaYon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlockConstant</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">QUERY_LATEST_BLOCK</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">QUERY_BLOCKCHAIN</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">QUERY_LATEST_TRANSACTION</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">UPLOAD_MINED_BLOCK</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">RETURN_LATEST_BLOCK</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">RETURN_BLOCKCHAIN</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  &lt;T&gt; T <span class="title function_">simpleJsonToObj</span><span class="params">(String json, Class&lt;T&gt; cls)</span> &#123;</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(json)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">T</span> <span class="variable">obj</span> <span class="operator">=</span> gson.fromJson(json, cls);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(obj)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">simpleObjToJson</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(obj)) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">            <span class="keyword">return</span> gson.toJson(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-定义接口"><a href="#2-定义接口" class="headerlink" title="2.定义接口"></a>2.定义接口</h2><p>节点通用的方法</p><p>定义节点接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传增加一个或一条链</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GiyaYon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBroadcastBlock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加一个区块</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> added result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">broadcastBlock</span><span class="params">(String msg)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GiyaYon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IQueryBlock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询区块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">queryBlockFromOthers</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Block <span class="title function_">queryBlockFromLocal</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询链</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">queryChainFromLocal</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">queryChainFromOthers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证一个或一条链</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GiyaYon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IVerifyBlock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证该区块是否有问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> block 需要验证的区块</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 0:该块通过，</span></span><br><span class="line"><span class="comment">     *          1:该链有结构问题</span></span><br><span class="line"><span class="comment">     *          2:该链数字摘要修改过</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">verifyBlock</span><span class="params">(String block)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证该区块链是否有问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain 需要验证的链</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 0，通过 ，1不通过</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">verifyChain</span><span class="params">(String chain)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-实现简易消息处理的服务端"><a href="#3-实现简易消息处理的服务端" class="headerlink" title="3.实现简易消息处理的服务端"></a>3.实现简易消息处理的服务端</h2><p>首先，对SocketServer的onMessage进行重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">                server = <span class="keyword">new</span> <span class="title class_">SocketServer</span>(port)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(WebSocket conn, String message)</span></span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    handleMessage(conn,message);</span><br><span class="line"></span><br><span class="line"><span class="comment">//                    broadcast(conn + &quot;:&quot; + message);</span></span><br><span class="line"><span class="comment">//                    System.out.println(conn + &quot;: &quot; + message + &quot;，修改后。&quot;);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br></pre></td></tr></table></figure><p>其次，定义消息接收后的处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(WebSocket conn, String message)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> simpleJsonToObj(message,Message.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (msg.getType())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> QUERY_LATEST_BLOCK:</span><br><span class="line">            <span class="type">Message</span> <span class="variable">queryBlockMsg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(RETURN_LATEST_BLOCK, simpleObjToJson(queryBlockFromLocal()));</span><br><span class="line">            <span class="type">String</span> <span class="variable">sendBlockMsg</span>  <span class="operator">=</span> simpleObjToJson(queryBlockMsg);</span><br><span class="line">            conn.send(sendBlockMsg);</span><br><span class="line"></span><br><span class="line">            System.out.println(conn.getRemoteSocketAddress() + <span class="string">&quot;,queryBLOCK:&quot;</span>+ queryBlockMsg.getData());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> QUERY_BLOCKCHAIN:</span><br><span class="line">            <span class="type">Message</span> <span class="variable">queryChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(RETURN_BLOCKCHAIN, queryChainFromLocal());</span><br><span class="line">            <span class="type">String</span> <span class="variable">sendChain</span>  <span class="operator">=</span> simpleObjToJson(queryChain);</span><br><span class="line">            conn.send(sendChain);</span><br><span class="line"></span><br><span class="line">            System.out.println(conn.getRemoteSocketAddress() +<span class="string">&quot;: QUERY_BLOCK_CHAIN:&quot;</span>+ queryChain.getData());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> QUERY_LATEST_TRANSACTION:</span><br><span class="line">            server.broadcast(<span class="string">&quot;TRANSACTION:&quot;</span> + msg.getData());</span><br><span class="line">            System.out.println(<span class="string">&quot;TRANSACTION:&quot;</span> + msg.getData());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> UPLOAD_MINED_BLOCK:</span><br><span class="line"></span><br><span class="line">            <span class="type">Block</span> <span class="variable">mineBlock</span> <span class="operator">=</span> simpleJsonToObj(msg.getData(),Block.class);</span><br><span class="line">            blockchain.add(mineBlock);</span><br><span class="line">            <span class="keyword">if</span>(!isChainValid())</span><br><span class="line">            &#123;</span><br><span class="line">                blockchain.removeLast();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                server.broadcast(message);</span><br><span class="line">                System.out.println(message);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> RETURN_LATEST_BLOCK:</span><br><span class="line">            <span class="type">Block</span> <span class="variable">b</span> <span class="operator">=</span> simpleJsonToObj(msg.getData(),Block.class);</span><br><span class="line">            blockchain.add(b);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;got the latest block! &quot;</span> + queryBlockFromLocal().hash);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RETURN_BLOCKCHAIN:</span><br><span class="line">            <span class="comment">//server.broadcast(&quot;DOWNLOAD_BLOCKCHAIN:&quot;+ msg.getData());</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//System.out.println(&quot;DOWNLOAD_BLOCKCHAIN:&quot;+ msg.getData());</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//System.out.println(msg);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码ServiceServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.giyaYon.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.giyaYon.Blocks.Block;</span><br><span class="line"><span class="keyword">import</span> com.giyaYon.Network.Message;</span><br><span class="line"><span class="keyword">import</span> com.giyaYon.Network.SocketServer;</span><br><span class="line"><span class="keyword">import</span> org.java_websocket.WebSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.giyaYon.Network.BlockConstant.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.giyaYon.Service.ServiceClient.difficulty;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GiyaYon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceServer</span> <span class="keyword">implements</span> <span class="title class_">IQueryBlock</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通信服务器</span></span><br><span class="line">    SocketServer server;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启端口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//账本</span></span><br><span class="line">    LinkedList&lt;Block&gt; blockchain = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Block&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceServer</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runServer</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                server = <span class="keyword">new</span> <span class="title class_">SocketServer</span>(port)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(WebSocket conn, String message)</span></span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    handleMessage(conn,message);</span><br><span class="line"></span><br><span class="line"><span class="comment">//                    broadcast(conn + &quot;:&quot; + message);</span></span><br><span class="line"><span class="comment">//                    System.out.println(conn + &quot;: &quot; + message + &quot;，修改后。&quot;);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            server.start();</span><br><span class="line">            System.out.println(<span class="string">&quot;ChatServer started on port: &quot;</span> + server.getPort());</span><br><span class="line"></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">sysin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">in</span> <span class="operator">=</span> sysin.readLine();</span><br><span class="line">                <span class="comment">//s.broadcast(in);</span></span><br><span class="line">                <span class="keyword">if</span> (in.equals(<span class="string">&quot;exit&quot;</span>)) &#123;</span><br><span class="line">                    server.stop(<span class="number">1000</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(WebSocket conn, String message)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> simpleJsonToObj(message,Message.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (msg.getType())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> QUERY_LATEST_BLOCK:</span><br><span class="line">                <span class="type">Message</span> <span class="variable">queryBlockMsg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(RETURN_LATEST_BLOCK, simpleObjToJson(queryBlockFromLocal()));</span><br><span class="line">                <span class="type">String</span> <span class="variable">sendBlockMsg</span>  <span class="operator">=</span> simpleObjToJson(queryBlockMsg);</span><br><span class="line">                conn.send(sendBlockMsg);</span><br><span class="line"></span><br><span class="line">                System.out.println(conn.getRemoteSocketAddress() + <span class="string">&quot;,queryBLOCK:&quot;</span>+ queryBlockMsg.getData());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> QUERY_BLOCKCHAIN:</span><br><span class="line">                <span class="type">Message</span> <span class="variable">queryChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(RETURN_BLOCKCHAIN, queryChainFromLocal());</span><br><span class="line">                <span class="type">String</span> <span class="variable">sendChain</span>  <span class="operator">=</span> simpleObjToJson(queryChain);</span><br><span class="line">                conn.send(sendChain);</span><br><span class="line"></span><br><span class="line">                System.out.println(conn.getRemoteSocketAddress() +<span class="string">&quot;: QUERY_BLOCK_CHAIN:&quot;</span>+ queryChain.getData());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> QUERY_LATEST_TRANSACTION:</span><br><span class="line">                server.broadcast(<span class="string">&quot;TRANSACTION:&quot;</span> + msg.getData());</span><br><span class="line">                System.out.println(<span class="string">&quot;TRANSACTION:&quot;</span> + msg.getData());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> UPLOAD_MINED_BLOCK:</span><br><span class="line"></span><br><span class="line">                <span class="type">Block</span> <span class="variable">mineBlock</span> <span class="operator">=</span> simpleJsonToObj(msg.getData(),Block.class);</span><br><span class="line">                blockchain.add(mineBlock);</span><br><span class="line">                <span class="keyword">if</span>(!isChainValid())</span><br><span class="line">                &#123;</span><br><span class="line">                    blockchain.removeLast();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    server.broadcast(message);</span><br><span class="line">                    System.out.println(message);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> RETURN_LATEST_BLOCK:</span><br><span class="line">                <span class="type">Block</span> <span class="variable">b</span> <span class="operator">=</span> simpleJsonToObj(msg.getData(),Block.class);</span><br><span class="line">                blockchain.add(b);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;got the latest block! &quot;</span> + queryBlockFromLocal().hash);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RETURN_BLOCKCHAIN:</span><br><span class="line">                <span class="comment">//server.broadcast(&quot;DOWNLOAD_BLOCKCHAIN:&quot;+ msg.getData());</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//System.out.println(&quot;DOWNLOAD_BLOCKCHAIN:&quot;+ msg.getData());</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(msg);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryBlockFromOthers</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        Message queryBlock = new Message(QUERY_LATEST_BLOCK,&quot;&quot;);</span></span><br><span class="line"><span class="comment">//        String msg = simpleObjToJson(queryBlock);</span></span><br><span class="line"><span class="comment">//        server.sendMessage(msg);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Block <span class="title function_">queryBlockFromLocal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> blockchain.getLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryChainFromLocal</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Block&gt; iterator = blockchain.iterator();</span><br><span class="line">        Block block;</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            block = iterator.next();</span><br><span class="line">            list.append(simpleObjToJson(block));</span><br><span class="line">            list.append(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            list.deleteCharAt(list.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryChainFromOthers</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  Boolean <span class="title function_">isChainValid</span><span class="params">()</span> &#123;</span><br><span class="line">        Block currentBlock;</span><br><span class="line">        Block previousBlock;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hashTarget</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">char</span>[ difficulty]).replace(<span class="string">&#x27;\0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//loop through blockchain to check hashes:</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i &lt;  blockchain.size(); i++) &#123;</span><br><span class="line">            currentBlock = blockchain.get(i);</span><br><span class="line">            previousBlock = blockchain.get(i-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//compare registered hash and calculated hash:</span></span><br><span class="line">            <span class="keyword">if</span>(!currentBlock.hash.equals(currentBlock.calculateHash()) )&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Current Hashes not equal&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//compare previous hash and registered previous hash</span></span><br><span class="line">            <span class="keyword">if</span>(!previousBlock.hash.equals(currentBlock.previousHash) ) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Previous Hashes not equal&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//check if hash is solved</span></span><br><span class="line">            <span class="keyword">if</span>(!currentBlock.hash.substring( <span class="number">0</span>, difficulty).equals(hashTarget)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;This block hasn&#x27;t been mined&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-实现客户端"><a href="#4-实现客户端" class="headerlink" title="4.实现客户端"></a>4.实现客户端</h2><p>客户端实现包括两个，第一是被动的网络服务，第二是用户行为主动服务</p><p>1.网络服务ConnectService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.giyaYon.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.giyaYon.Blocks.Block;</span><br><span class="line"><span class="keyword">import</span> com.giyaYon.Network.Message;</span><br><span class="line"><span class="keyword">import</span> com.giyaYon.Network.SocketClient;</span><br><span class="line"><span class="keyword">import</span> org.java_websocket.WebSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.giyaYon.Network.BlockConstant.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.giyaYon.Service.ServiceClient.difficulty;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.giyaYon.Service.StateConstant.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统被动型服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GiyaYon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnectService</span> <span class="keyword">implements</span> <span class="title class_">IBroadcastBlock</span>,IVerifyBlock,IQueryBlock &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ServiceClient serviceClient;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * for communication</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> SocketClient client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConnectService</span><span class="params">(String url,ServiceClient serviceClient)</span> <span class="keyword">throws</span> URISyntaxException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.serviceClient = serviceClient;</span><br><span class="line">        client = <span class="keyword">new</span> <span class="title class_">SocketClient</span>(<span class="keyword">new</span> <span class="title class_">URI</span>(url))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String s)</span></span><br><span class="line">            &#123;</span><br><span class="line">                handleMessage(client,s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SocketClient <span class="title function_">getClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启联网</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startService</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        client.connect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stopService</span><span class="params">()</span>&#123;client.close();&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(WebSocket conn, String message)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> simpleJsonToObj(message,Message.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (msg.getType())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//请求查询当前最新区块</span></span><br><span class="line">            <span class="keyword">case</span> QUERY_LATEST_BLOCK:</span><br><span class="line">                <span class="type">Message</span> <span class="variable">queryBlockMsg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(RETURN_LATEST_BLOCK, simpleObjToJson(queryBlockFromLocal()));</span><br><span class="line">                <span class="type">String</span> <span class="variable">sendBlockMsg</span>  <span class="operator">=</span> simpleObjToJson(queryBlockMsg);</span><br><span class="line">                conn.send(sendBlockMsg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//请求查询最新区块链</span></span><br><span class="line">            <span class="keyword">case</span> QUERY_BLOCKCHAIN:</span><br><span class="line">                <span class="type">Message</span> <span class="variable">queryChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(RETURN_BLOCKCHAIN, queryChainFromLocal());</span><br><span class="line">                <span class="type">String</span> <span class="variable">sendChain</span>  <span class="operator">=</span> simpleObjToJson(queryChain);</span><br><span class="line">                conn.send(sendChain);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//TODO 请求查询最新交易池</span></span><br><span class="line">            <span class="keyword">case</span> QUERY_LATEST_TRANSACTION:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 上传挖矿块</span></span><br><span class="line">            <span class="keyword">case</span> UPLOAD_MINED_BLOCK:</span><br><span class="line"></span><br><span class="line">                <span class="comment">//解析消息</span></span><br><span class="line">                <span class="type">Block</span> <span class="variable">mineBlock</span> <span class="operator">=</span> simpleJsonToObj(msg.getData(),Block.class);</span><br><span class="line">                <span class="comment">//加入本账本</span></span><br><span class="line">                ServiceClient.blockchain.add(mineBlock);</span><br><span class="line">                <span class="comment">//验证合法性，若不正确就删除这个最新的区块</span></span><br><span class="line">                <span class="keyword">if</span>(!isChainValid())</span><br><span class="line">                &#123;</span><br><span class="line">                    ServiceClient.blockchain.removeLast();</span><br><span class="line">                    System.out.println(<span class="string">&quot;had removed the block&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="type">Block</span> <span class="variable">latestBlock</span> <span class="operator">=</span> queryBlockFromLocal();</span><br><span class="line">                    System.out.println(<span class="string">&quot;i received the new block:&quot;</span> + latestBlock.toString());</span><br><span class="line">                    <span class="comment">//收到新的区块，如果用户仍在挖矿，则看看它挖的是不是重复的区块，是的话就提示他停下来了</span></span><br><span class="line">                    <span class="keyword">if</span>(serviceClient.userService.state.getType() == MINEING)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(Integer.parseInt(serviceClient.userService.state.getData()) == latestBlock.index)</span><br><span class="line">                        &#123;</span><br><span class="line">                            serviceClient.userService.stopToMineBlock();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 返回最新区块</span></span><br><span class="line">            <span class="keyword">case</span> RETURN_LATEST_BLOCK:</span><br><span class="line">                <span class="type">Block</span> <span class="variable">b</span> <span class="operator">=</span> simpleJsonToObj(msg.getData(), Block.class);</span><br><span class="line">                serviceClient.blockchain.add(b);</span><br><span class="line">                <span class="keyword">if</span>(!isChainValid())</span><br><span class="line">                &#123;</span><br><span class="line">                    ServiceClient.blockchain.removeLast();</span><br><span class="line">                    System.out.println(<span class="string">&quot;had removed the block&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">Block</span> <span class="variable">latestBlock</span> <span class="operator">=</span> queryBlockFromLocal();</span><br><span class="line">                    System.out.println(<span class="string">&quot;your local latest block is:&quot;</span> + latestBlock.hash);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//TODO 返回最新的区块链</span></span><br><span class="line">            <span class="keyword">case</span> RETURN_BLOCKCHAIN:</span><br><span class="line">                serviceClient.blockchain.clear();</span><br><span class="line">                String[] chain = msg.getData().split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (String s : chain) &#123;</span><br><span class="line">                    <span class="type">Block</span> <span class="variable">block</span> <span class="operator">=</span> simpleJsonToObj(s,Block.class);</span><br><span class="line">                    serviceClient.blockchain.add(block);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Block block :ServiceClient.blockchain)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(block.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(msg);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">verifyBlock</span><span class="params">(String block)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">verifyChain</span><span class="params">(String chain)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">broadcastBlock</span><span class="params">(String msg)</span> &#123;</span><br><span class="line"></span><br><span class="line">        client.sendMessage(msg);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryBlockFromOthers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">queryBlock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(QUERY_LATEST_BLOCK,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> simpleObjToJson(queryBlock);</span><br><span class="line">        client.sendMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Block <span class="title function_">queryBlockFromLocal</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> serviceClient.blockchain.getLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryChainFromLocal</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Block&gt; iterator = serviceClient. blockchain.iterator();</span><br><span class="line">        Block block;</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            block = iterator.next();</span><br><span class="line">            list.append(simpleObjToJson(block));</span><br><span class="line">            list.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            list.deleteCharAt(list.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryChainFromOthers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">queryBlock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(QUERY_BLOCKCHAIN,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> simpleObjToJson(queryBlock);</span><br><span class="line">        client.sendMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证这个区块的合法性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  Boolean <span class="title function_">isChainValid</span><span class="params">()</span> &#123;</span><br><span class="line">        Block currentBlock;</span><br><span class="line">        Block previousBlock;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hashTarget</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">char</span>[ difficulty]).replace(<span class="string">&#x27;\0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//loop through blockchain to check hashes:</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i &lt;  serviceClient.blockchain.size(); i++) &#123;</span><br><span class="line">            currentBlock = serviceClient.blockchain.get(i);</span><br><span class="line">            previousBlock = serviceClient.blockchain.get(i-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//compare registered hash and calculated hash:</span></span><br><span class="line">            <span class="keyword">if</span>(!currentBlock.hash.equals(currentBlock.calculateHash()) )&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Current Hashes not equal&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//compare previous hash and registered previous hash</span></span><br><span class="line">            <span class="keyword">if</span>(!previousBlock.hash.equals(currentBlock.previousHash) ) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Previous Hashes not equal&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//check if hash is solved</span></span><br><span class="line">            <span class="keyword">if</span>(!currentBlock.hash.substring( <span class="number">0</span>, difficulty).equals(hashTarget)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;This block hasn&#x27;t been mined&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.用户服务UserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.giyaYon.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.giyaYon.Blocks.Block;</span><br><span class="line"><span class="keyword">import</span> com.giyaYon.Network.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.giyaYon.Network.BlockConstant.UPLOAD_MINED_BLOCK;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.giyaYon.Network.BlockConstant.simpleObjToJson;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.giyaYon.Service.StateConstant.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户主动型服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GiyaYon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    ServiceClient serviceClient;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该客户端正在干什么</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Message state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Block currentMineBlock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(ServiceClient serviceClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.serviceClient = serviceClient;</span><br><span class="line">        state = <span class="keyword">new</span> <span class="title class_">Message</span>(IDLE,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 挖矿</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tryToMineBlock</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保持联网状态挖矿</span></span><br><span class="line">        <span class="keyword">if</span>(serviceClient.connection.client.isClosed()) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(serviceClient.connection.client.isClosing()) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(state.getType() != IDLE)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始挖矿</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> ServiceClient.blockchain.size();</span><br><span class="line">        <span class="keyword">if</span> (ServiceClient.blockchain.size() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//定义正在挖矿的状态</span></span><br><span class="line">            state = <span class="keyword">new</span> <span class="title class_">Message</span>(MINEING, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">            <span class="comment">//开挖</span></span><br><span class="line">            currentMineBlock = <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), <span class="string">&quot;0&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">broadcastNewBlockHash</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//模拟矿工挖矿过程</span></span><br><span class="line">            broadcastNewBlockHash = currentMineBlock.mineBlock(ServiceClient.difficulty);</span><br><span class="line">            <span class="comment">//如果为空则会自动抛弃这个矿不会广播</span></span><br><span class="line">            <span class="keyword">if</span>(broadcastNewBlockHash != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;第0个！&quot;</span> + broadcastNewBlockHash);</span><br><span class="line">                <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(UPLOAD_MINED_BLOCK, simpleObjToJson(currentMineBlock));</span><br><span class="line">                <span class="type">String</span> <span class="variable">broadcastBlock</span> <span class="operator">=</span> simpleObjToJson(msg);</span><br><span class="line">                <span class="comment">//将挖到的区块广播出去</span></span><br><span class="line">                serviceClient.connection.broadcastBlock(broadcastBlock);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//非创世矿挖矿</span></span><br><span class="line">            state = <span class="keyword">new</span> <span class="title class_">Message</span>(MINEING, String.valueOf(index));</span><br><span class="line">            <span class="comment">//开挖</span></span><br><span class="line">            currentMineBlock = <span class="keyword">new</span> <span class="title class_">Block</span>(index, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), ServiceClient.blockchain.get(ServiceClient.blockchain.size() - <span class="number">1</span>).hash);</span><br><span class="line">            <span class="type">String</span> <span class="variable">broadcastNewBlockHash</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            broadcastNewBlockHash = currentMineBlock.mineBlock(ServiceClient.difficulty);</span><br><span class="line">            <span class="keyword">if</span>(broadcastNewBlockHash != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span> + index + <span class="string">&quot;个！&quot;</span> + broadcastNewBlockHash);</span><br><span class="line">                <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(UPLOAD_MINED_BLOCK, simpleObjToJson(currentMineBlock));</span><br><span class="line">                <span class="type">String</span> <span class="variable">broadcastBlock</span> <span class="operator">=</span> simpleObjToJson(msg);</span><br><span class="line">                <span class="comment">//将挖到的区块广播出去</span></span><br><span class="line">                serviceClient.connection.broadcastBlock(broadcastBlock);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        state = <span class="keyword">new</span> <span class="title class_">Message</span>(IDLE, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stopToMineBlock</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        currentMineBlock.stopMining();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对两个服务进行整合 ServiceClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.giyaYon.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.giyaYon.Blocks.Block;</span><br><span class="line"><span class="keyword">import</span> com.giyaYon.Blocks.TransactionData;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GiyaYon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@code</span> 服务层 网络同步区块服务模块</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 开启服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * //接口</span></span><br><span class="line"><span class="comment"> * 发送一个区块</span></span><br><span class="line"><span class="comment"> * 发送一个链</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 验证一个区块</span></span><br><span class="line"><span class="comment"> * 验证一个链</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 查看当前最新链</span></span><br><span class="line"><span class="comment"> * 查看整个链</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceClient</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  receive blockchain from others 区块链数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LinkedList&lt;Block&gt; blockchain = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Block&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  receive difficulty form others 定义工作量难度由区块链协议定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">difficulty</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  交易池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> LinkedList&lt;TransactionData&gt; transactions;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要先开启联网服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ConnectService connection;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后续的挖矿等服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceClient</span><span class="params">(String url)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            connection = <span class="keyword">new</span> <span class="title class_">ConnectService</span>(url,<span class="built_in">this</span>);</span><br><span class="line">            userService = <span class="keyword">new</span> <span class="title class_">UserService</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runClientServer</span><span class="params">()</span>&#123;</span><br><span class="line">        connection.startService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exitClientServer</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        connection.stopService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ServiceServer</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceServer</span>(<span class="number">8888</span>);</span><br><span class="line">    server.runServer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.giyaYon.Appliaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.giyaYon.Service.ServiceClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientProgarm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">peer</span> <span class="operator">=</span> <span class="string">&quot;ws://localhost:8888&quot;</span>;</span><br><span class="line">        <span class="type">ServiceClient</span> <span class="variable">serviceClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceClient</span>(peer);</span><br><span class="line">        serviceClient.runClientServer();</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">                    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                            ===================================</span></span><br><span class="line"><span class="string">                            please typing code what you want to do:</span></span><br><span class="line"><span class="string">                            1.exit system</span></span><br><span class="line"><span class="string">                            2.mine block</span></span><br><span class="line"><span class="string">                            3.update_block</span></span><br><span class="line"><span class="string">                            ===================================</span></span><br><span class="line"><span class="string">                            &quot;&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (scan.hasNext()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> scan.next();</span><br><span class="line">                <span class="keyword">if</span>(str1.equals(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;exiting...&quot;</span>);</span><br><span class="line">                    scan.close();</span><br><span class="line">                    serviceClient.exitClientServer();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(str1.equals(<span class="string">&quot;2&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;try to mine block...&quot;</span>);</span><br><span class="line">                    serviceClient.userService.tryToMineBlock();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(str1.equals(<span class="string">&quot;3&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    serviceClient.connection.queryChainFromOthers();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//serviceClient.userService.tryToMineBlock();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Thread.sleep(100);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        serviceClient.userService.tryToMineBlock();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印：</p><p>打开服务端：</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ChatServer started on port: 8888</span><br><span class="line">Server started!</span><br><span class="line">127.0.0.1 entered the room!</span><br><span class="line">&#123;&quot;type&quot;:4,&quot;data&quot;:&quot;&#123;\&quot;index\&quot;:0,\&quot;hash\&quot;:\&quot;000000c257847251e823c5148046dec1bd0fbdf5aa6d1ecb8d5eba22fd217d39\&quot;,\&quot;previousHash\&quot;:\&quot;0\&quot;,\&quot;data\&quot;:[],\&quot;timeStamp\&quot;:1679825452774,\&quot;nonce\&quot;:1769903,\&quot;running\&quot;:true&#125;&quot;&#125;</span><br><span class="line">&#123;&quot;type&quot;:4,&quot;data&quot;:&quot;&#123;\&quot;index\&quot;:1,\&quot;hash\&quot;:\&quot;0000004fd1849958d1cc5045b41f6bda486e2ab6b0fc69211a2e6de1254027c8\&quot;,\&quot;previousHash\&quot;:\&quot;000000c257847251e823c5148046dec1bd0fbdf5aa6d1ecb8d5eba22fd217d39\&quot;,\&quot;data\&quot;:[],\&quot;timeStamp\&quot;:1679825465536,\&quot;nonce\&quot;:8809650,\&quot;running\&quot;:true&#125;&quot;&#125;</span><br><span class="line">/127.0.0.1:8738: QUERY_BLOCK_CHAIN:&#123;&quot;index&quot;:0,&quot;hash&quot;:&quot;000000c257847251e823c5148046dec1bd0fbdf5aa6d1ecb8d5eba22fd217d39&quot;,&quot;previousHash&quot;:&quot;0&quot;,&quot;data&quot;:[],&quot;timeStamp&quot;:1679825452774,&quot;nonce&quot;:1769903,&quot;running&quot;:true&#125;|&#123;&quot;index&quot;:1,&quot;hash&quot;:&quot;0000004fd1849958d1cc5045b41f6bda486e2ab6b0fc69211a2e6de1254027c8&quot;,&quot;previousHash&quot;:&quot;000000c257847251e823c5148046dec1bd0fbdf5aa6d1ecb8d5eba22fd217d39&quot;,&quot;data&quot;:[],&quot;timeStamp&quot;:1679825465536,&quot;nonce&quot;:8809650,&quot;running&quot;:true&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开客户端A：</p><hr><p>我们打开客户端A后，默认已经进入服务器内部，我们开始输入2开始挖矿，我们挖两次矿后，输入3查询当前区块链：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">===================================</span><br><span class="line">please typing code what you want to do:</span><br><span class="line">1.exit system</span><br><span class="line">2.mine block</span><br><span class="line">3.update_block</span><br><span class="line">===================================</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">try to mine block...</span><br><span class="line">Block Mined!!! : 000000c257847251e823c5148046dec1bd0fbdf5aa6d1ecb8d5eba22fd217d39</span><br><span class="line">��0����000000c257847251e823c5148046dec1bd0fbdf5aa6d1ecb8d5eba22fd217d39</span><br><span class="line">===================================</span><br><span class="line">please typing code what you want to do:</span><br><span class="line">1.exit system</span><br><span class="line">2.mine block</span><br><span class="line">3.update_block</span><br><span class="line">===================================</span><br><span class="line"></span><br><span class="line">i received the new block:Block&#123;index=0, hash=&#x27;000000c257847251e823c5148046dec1bd0fbdf5aa6d1ecb8d5eba22fd217d39&#x27;, previousHash=&#x27;0&#x27;, data=[], timeStamp=1679825452774, nonce=1769903&#125;</span><br><span class="line">2</span><br><span class="line">try to mine block...</span><br><span class="line">Block Mined!!! : 0000004fd1849958d1cc5045b41f6bda486e2ab6b0fc69211a2e6de1254027c8</span><br><span class="line">��1����0000004fd1849958d1cc5045b41f6bda486e2ab6b0fc69211a2e6de1254027c8</span><br><span class="line">===================================</span><br><span class="line">please typing code what you want to do:</span><br><span class="line">1.exit system</span><br><span class="line">2.mine block</span><br><span class="line">3.update_block</span><br><span class="line">===================================</span><br><span class="line"></span><br><span class="line">i received the new block:Block&#123;index=1, hash=&#x27;0000004fd1849958d1cc5045b41f6bda486e2ab6b0fc69211a2e6de1254027c8&#x27;, previousHash=&#x27;000000c257847251e823c5148046dec1bd0fbdf5aa6d1ecb8d5eba22fd217d39&#x27;, data=[], timeStamp=1679825465536, nonce=8809650&#125;</span><br><span class="line">3</span><br><span class="line">===================================</span><br><span class="line">please typing code what you want to do:</span><br><span class="line">1.exit system</span><br><span class="line">2.mine block</span><br><span class="line">3.update_block</span><br><span class="line">===================================</span><br><span class="line"></span><br><span class="line">Block&#123;index=0, hash=&#x27;000000c257847251e823c5148046dec1bd0fbdf5aa6d1ecb8d5eba22fd217d39&#x27;, previousHash=&#x27;0&#x27;, data=[], timeStamp=1679825452774, nonce=1769903&#125;</span><br><span class="line">Block&#123;index=1, hash=&#x27;0000004fd1849958d1cc5045b41f6bda486e2ab6b0fc69211a2e6de1254027c8&#x27;, previousHash=&#x27;000000c257847251e823c5148046dec1bd0fbdf5aa6d1ecb8d5eba22fd217d39&#x27;, data=[], timeStamp=1679825465536, nonce=8809650&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端B：</p><hr><p>这里我们等待客户端A挖完矿之后，连接进入服务器，直接输入3获取当前区块链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">===================================</span><br><span class="line">please typing code what you want to do:</span><br><span class="line">1.exit system</span><br><span class="line">2.mine block</span><br><span class="line">3.update_block</span><br><span class="line">===================================</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">===================================</span><br><span class="line">please typing code what you want to do:</span><br><span class="line">1.exit system</span><br><span class="line">2.mine block</span><br><span class="line">3.update_block</span><br><span class="line">===================================</span><br><span class="line"></span><br><span class="line">Block&#123;index=0, hash=&#x27;000000c257847251e823c5148046dec1bd0fbdf5aa6d1ecb8d5eba22fd217d39&#x27;, previousHash=&#x27;0&#x27;, data=[], timeStamp=1679825452774, nonce=1769903&#125;</span><br><span class="line">Block&#123;index=1, hash=&#x27;0000004fd1849958d1cc5045b41f6bda486e2ab6b0fc69211a2e6de1254027c8&#x27;, previousHash=&#x27;000000c257847251e823c5148046dec1bd0fbdf5aa6d1ecb8d5eba22fd217d39&#x27;, data=[], timeStamp=1679825465536, nonce=8809650&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-实现Web-API查询服务"><a href="#5-实现Web-API查询服务" class="headerlink" title="5.实现Web API查询服务"></a>5.实现Web API查询服务</h1><p>1.需要引入JAVA EE Web框架</p><p>2.需要部署Tomcat服务器</p><p>3.需要检查是否引入jar包到Web-INF 的lib</p><p>4.使用运行之前需要打开ServiceServer 、ServiceClient，并且让ServiceClient挖好矿之后再进行查询测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.giyaYon.Network;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.giyaYon.Service.ServiceClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.text.StringEscapeUtils;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@javax</span>.servlet.annotation.WebServlet(<span class="string">&quot;/hello&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">peer</span> <span class="operator">=</span> <span class="string">&quot;ws://localhost:8888&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ServiceClient</span> <span class="variable">serviceClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceClient</span>(peer);</span><br><span class="line">        serviceClient.runClientServer();</span><br><span class="line">        serviceClient.connection.queryChainFromOthers();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">blocks</span> <span class="operator">=</span> serviceClient.connection.queryChainFromLocal();</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line"></span><br><span class="line">        out.println(<span class="string">&quot;&lt;p&gt;&quot;</span>+ blocks +<span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        serviceClient.exitClientServer();</span><br><span class="line"></span><br><span class="line">        System.out.println(blocks);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p>在localhost:8080&#x2F;CoinBlock_war_exploded&#x2F; 后面输入hello</p><img src="https://raw.githubusercontent.com/GiyaYon/mypicGo/master/api.png" style="zoom:80%;" /><h1 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h1><p><strong>Author:</strong> <a href="mailto:undefined">GiyaYon</a></p><p><strong>Copyright Notice:</strong> All articles in this blog are licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> unless stating additionally.</p><p>后续将扩充交易信息内容模块，针对交易过程，设计Web电子商务系统，完善整个区块链系统。</p><p>参考文章：</p><p><a href="https://www.cnblogs.com/helloworld2018/p/9011369.html">https://www.cnblogs.com/helloworld2018/p/9011369.html</a> java开发区块链只需150行代码 &#x2F;<a href="https://home.cnblogs.com/u/helloworld2018/">以太坊开发</a>&#x2F;2018-07-19</p><p><a href="https://cloud.tencent.com/developer/article/1776246">https://cloud.tencent.com/developer/article/1776246</a> 基于Java开发一套完整的区块链系统（附源码）&#x2F; <a href="https://gitee.com/luckytuan?utm_source=poper_profile">luckytuan</a>&#x2F;2021-01-20</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文欲实现的需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;设计区块和链结构&lt;/strong&gt;：你可以创建一个&lt;code&gt;Block</summary>
      
    
    
    
    <category term="软件工程" scheme="http://giyayonlib.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="软件开发，桌面应用" scheme="http://giyayonlib.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%8C%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="软件开发" scheme="http://giyayonlib.com/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="Java" scheme="http://giyayonlib.com/tags/Java/"/>
    
    <category term="区块链" scheme="http://giyayonlib.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Android企业级开发概述</title>
    <link href="http://giyayonlib.com/2023/03/28/%E5%AE%89%E5%8D%93%E7%A7%BB%E5%8A%A8%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <id>http://giyayonlib.com/2023/03/28/%E5%AE%89%E5%8D%93%E7%A7%BB%E5%8A%A8%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/</id>
    <published>2023-03-28T09:25:55.649Z</published>
    <updated>2023-03-28T11:25:37.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安卓系统架构简述"><a href="#安卓系统架构简述" class="headerlink" title="安卓系统架构简述"></a>安卓系统架构简述</h1><p>Android系统的架构分为四层，从高层到底层依次为：<br>1、应用程序层（app+System apps）<br>2、应用程序框架层（Java API Framework）<br>3、系统运行库和运行环境层(Libraries + android Runtime)<br>4、Linux核心层(HAL+ Linux Kernel)</p><h1 id="一、数据"><a href="#一、数据" class="headerlink" title="一、数据"></a>一、数据</h1><h2 id="1-安卓数据结构"><a href="#1-安卓数据结构" class="headerlink" title="(1)安卓数据结构"></a>(1)安卓数据结构</h2><p>1、List(LinkedList、Vector、ArrayList)</p><p>2、Set(TreeSet、HashSet)</p><p>3、Map(TreeMap、HashMap、ArrayMap、LinkedHashMap)</p><h2 id="2-数据持久化"><a href="#2-数据持久化" class="headerlink" title="(2)数据持久化"></a>(2)数据持久化</h2><p>1、本地数据库之SQLite数据库</p><p>2、本地键值对储存库之SharedPreferences</p><h1 id="二、界面"><a href="#二、界面" class="headerlink" title="二、界面"></a>二、界面</h1><h2 id="1-官方UI控件"><a href="#1-官方UI控件" class="headerlink" title="(1)官方UI控件"></a>(1)官方UI控件</h2><p>1、布局<br>2、容器<br>3、常用组件</p><h2 id="2-自定义组件"><a href="#2-自定义组件" class="headerlink" title="(2)自定义组件"></a>(2)自定义组件</h2><p>1、组装组件<br>2、组件扩展<br>3、全自定义组件</p><h2 id="3-UI操作"><a href="#3-UI操作" class="headerlink" title="(3)UI操作"></a>(3)UI操作</h2><p>1、事件分发<br>2、事件处理</p><h2 id="4-高级交互式界面组件"><a href="#4-高级交互式界面组件" class="headerlink" title="(4)高级交互式界面组件"></a>(4)高级交互式界面组件</h2><p>1、fragment</p><p>2、DrawLayout</p><p>3、Dialog</p><h1 id="三、Android项目-amp-Android系统环境"><a href="#三、Android项目-amp-Android系统环境" class="headerlink" title="三、Android项目&amp;Android系统环境"></a>三、Android项目&amp;Android系统环境</h1><h2 id="1-四大组件"><a href="#1-四大组件" class="headerlink" title="(1)四大组件"></a>(1)四大组件</h2><p>1、Activity</p><p>2、service</p><p>3、broadcast receiver</p><p>4、content provider</p><h2 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="(2)生命周期"></a>(2)生命周期</h2><p>1、生命周期详解</p><h2 id="3-Intent系统级消息传递"><a href="#3-Intent系统级消息传递" class="headerlink" title="(3)Intent系统级消息传递"></a>(3)Intent系统级消息传递</h2><p>1、Intent详解</p><h2 id="4-权限"><a href="#4-权限" class="headerlink" title="(4)权限"></a>(4)权限</h2><p>1、动态权限申请</p><p>2、权限详解</p><h2 id="5-通知"><a href="#5-通知" class="headerlink" title="(5)通知"></a>(5)通知</h2><p>1、Notification通知使用</p><h2 id="6-音、视频管理"><a href="#6-音、视频管理" class="headerlink" title="(6)音、视频管理"></a>(6)音、视频管理</h2><p>1、音频的播报</p><p>2、视频的播放</p><h2 id="7-项目架构设计模式"><a href="#7-项目架构设计模式" class="headerlink" title="(7)项目架构设计模式"></a>(7)项目架构设计模式</h2><p>1、MVC</p><p>2、MVP</p><p>3、模块化设计理念</p><h2 id="8-观察者模式"><a href="#8-观察者模式" class="headerlink" title="(8)观察者模式"></a>(8)观察者模式</h2><p>1、观察者模式的基本实践</p><h1 id="四、设备硬件、传感器"><a href="#四、设备硬件、传感器" class="headerlink" title="四、设备硬件、传感器"></a>四、设备硬件、传感器</h1><h2 id="1-动作传感器"><a href="#1-动作传感器" class="headerlink" title="(1)动作传感器"></a>(1)动作传感器</h2><p>1、动作传感器的基本使用</p><h2 id="2-环境传感器"><a href="#2-环境传感器" class="headerlink" title="(2)环境传感器"></a>(2)环境传感器</h2><p>1、环境传感器的基本使用</p><h2 id="3-位置传感器"><a href="#3-位置传感器" class="headerlink" title="(3)位置传感器"></a>(3)位置传感器</h2><p>1、位置传感器的基本使用</p><h2 id="4-多媒体硬件"><a href="#4-多媒体硬件" class="headerlink" title="(4)多媒体硬件"></a>(4)多媒体硬件</h2><p>1、相机<br>2、录音机<br>3、扬声器<br>4、蓝牙<br>5、WiFi<br>6、NFC<br>7、USB</p><h1 id="五、java基础"><a href="#五、java基础" class="headerlink" title="五、java基础"></a>五、java基础</h1><h2 id="1-关键字"><a href="#1-关键字" class="headerlink" title="(1)关键字"></a>(1)关键字</h2><p>1、java关键字的基本讲解</p><h2 id="2-网络通信"><a href="#2-网络通信" class="headerlink" title="(2)网络通信"></a>(2)网络通信</h2><p>1、http网络通信<br>2、mqtt网络通信</p><h2 id="3-序列化"><a href="#3-序列化" class="headerlink" title="(3)序列化"></a>(3)序列化</h2><p>1、java序列化基础</p><h2 id="4-多线程"><a href="#4-多线程" class="headerlink" title="(4)多线程"></a>(4)多线程</h2><p>1、多线程详解</p><h2 id="5-锁"><a href="#5-锁" class="headerlink" title="(5)锁"></a>(5)锁</h2><p>1、android三种常用锁讲解</p><h2 id="6-类的继承-amp-接口的实现"><a href="#6-类的继承-amp-接口的实现" class="headerlink" title="(6)类的继承&amp;接口的实现"></a>(6)类的继承&amp;接口的实现</h2><p>1、类继承的基本概念<br>2、接口的基本概念</p><h2 id="7-反射"><a href="#7-反射" class="headerlink" title="(7)反射"></a>(7)反射</h2><p>1、反射的基本概念及使用</p><h1 id="六、主流框架-amp-SDK集成开发"><a href="#六、主流框架-amp-SDK集成开发" class="headerlink" title="六、主流框架&amp;SDK集成开发"></a>六、主流框架&amp;SDK集成开发</h1><h2 id="（1）主流框架"><a href="#（1）主流框架" class="headerlink" title="（1）主流框架"></a>（1）主流框架</h2><ol><li>网络通讯之Okhttp、xUtils</li><li>图像处理之glide，imageLoader，Fresco，Picasso</li><li>轮播图banner</li><li>json数据处理之Gson</li><li>二维码之zxing</li><li>事件处理EventBus</li></ol><h2 id="（2）SDK集成开发"><a href="#（2）SDK集成开发" class="headerlink" title="（2）SDK集成开发"></a>（2）SDK集成开发</h2><ol><li>虹软人脸识别SDK(带完美封装源码)</li><li>百度地图SDK</li><li>百度语音识别SDK</li><li>腾讯Bugly应用更新SDK</li><li>推送JPush</li><li>后端云服务Bomb</li><li>分享平台ShareSDK</li></ol><h1 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h1><p>参考文章：</p><p>1.<a href="http://t.csdn.cn/zvbvL">Android企业级项目实战——基础篇（系列文章）</a> &#x2F;<a href="https://blog.csdn.net/EGM_NB">Carry 海</a> &#x2F;2022-07-27</p><p>2.<a href="http://t.csdn.cn/IoPog">Android面试题集（2020）</a>&#x2F;<a href="https://blog.csdn.net/qq_42761395">计蒙不吃鱼</a>&#x2F;2020-10-03</p><p>3.<a href="http://t.csdn.cn/8GtNK">【精华】安卓开发学习路线规划</a>  &#x2F;<a href="https://blog.csdn.net/cbwem">Time-space</a>&#x2F;2020-11-19</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安卓系统架构简述&quot;&gt;&lt;a href=&quot;#安卓系统架构简述&quot; class=&quot;headerlink&quot; title=&quot;安卓系统架构简述&quot;&gt;&lt;/a&gt;安卓系统架构简述&lt;/h1&gt;&lt;p&gt;Android系统的架构分为四层，从高层到底层依次为：&lt;br&gt;1、应用程序层（app+Sys</summary>
      
    
    
    
    <category term="软件工程" scheme="http://giyayonlib.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="软件开发" scheme="http://giyayonlib.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="移动开发" scheme="http://giyayonlib.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="软件开发" scheme="http://giyayonlib.com/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="Java" scheme="http://giyayonlib.com/tags/Java/"/>
    
    <category term="Android" scheme="http://giyayonlib.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>区块链技术入门</title>
    <link href="http://giyayonlib.com/2023/03/20/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <id>http://giyayonlib.com/2023/03/20/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-03-19T16:08:19.142Z</published>
    <updated>2023-04-02T03:34:09.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>区块链已经成为构建信任的新技术基础设施，通过深度融合密码学、对等网络、共识算法、智能合约等技术进行集成创新，即实现了更广泛的社会协作，又降低了社会的信号成本。第一章为概述，宏观上介绍区块链基础知识，第二到五章分别介绍区块链的核心技术，包括区块链的密码学基础、网络协议、共识算法、智能合约等。第六到八章详解典型的区块链技术实践平台，比特币、以太坊等。</p><p>2023&#x2F;3&#x2F;20</p><h1 id="第一章-区块链概述"><a href="#第一章-区块链概述" class="headerlink" title="第一章 区块链概述"></a>第一章 区块链概述</h1><h2 id="1-技术特点"><a href="#1-技术特点" class="headerlink" title="1.技术特点"></a>1.技术特点</h2><ul><li>分布式一致</li><li>密码算法</li><li>对等网络</li><li>数据库</li><li>货币竞争化</li></ul><h3 id="1-储存"><a href="#1-储存" class="headerlink" title="1.储存"></a>1.储存</h3><p>区块链的主要作用是储存信息。任何需要保存的信息，都可以写入区块链，也可以从里面读取，它很像数据库，你可以向任何一个节点，写入&#x2F;读取数据，因为所有节点最后都会同步，保证区块链一致，但缺点在于它只能增加，和查询，却不能实现修改和删除。</p><p>区块链没有管理员，是一个去中心化的应用。任何人都可以架设服务器，加入区块链网络，成为一个节点。区块链的世界里面，没有中心节点，每个节点都是平等的，都保存着整个数据库。</p><h3 id="2-安全"><a href="#2-安全" class="headerlink" title="2.安全"></a>2.安全</h3><p>区块链是由一个个区块节点组成，一个区块分为头和体，头数据记录着当前区块的多个特征值，体记录着保护的数据。</p><p>头记录着该区块的特征，比如这个区块的生成时间，上一个区块的头数据，头数据通过 <mark>SHA256</mark> 加密出一段哈希值，因为一个区块连着上一个区块，如果改本区块的内容，那么后面的区块也随之改变，发布到全网自然会被淘汰掉，所以实现了不可篡改的要求。</p><pre><code>## 2.历史发展</code></pre><h3 id="1-0货币"><a href="#1-0货币" class="headerlink" title="1.0货币"></a>1.0货币</h3><p>1.全网共享账本：不易攻破系统</p><p>2.块链式结构：加密有序</p><h3 id="2-0-智能合约"><a href="#2-0-智能合约" class="headerlink" title="2.0 智能合约"></a>2.0 智能合约</h3><p>在隔离沙箱中运行契约程序</p><h2 id="3-结构层次"><a href="#3-结构层次" class="headerlink" title="3.结构层次"></a>3.结构层次</h2><p>定义：狭义上按时间顺序连续区块组成一种数据结构，以密码学保证不可篡改伪造功能的分布式账本；广义上利用块链式数据结构验证存储数据利用分布式节点共识算法生成更新数据，利用密码学保证安全，利用自动化来编程与操作数据的分布式基础架构与计算范求。</p><p>应用层 开发应用工程开发工具</p><p>合约层 智能合约编程语言，沙箱</p><p>激励层 发行货币，分配机制</p><p>共识层 Pow，Pos共识算法</p><p>网络层 拓扑结构，传播</p><p>数据层 区块数据与加密</p><h3 id="1-数据层"><a href="#1-数据层" class="headerlink" title="1.数据层"></a>1.数据层</h3><p>有区块结构、链结构、交易结构，通过链式结构链接以时间戳顺序打包区块结构实现不可篡改。交易结构就是基本的数据结构，记录交易的双方基本交易信息。</p><h3 id="2-网络层"><a href="#2-网络层" class="headerlink" title="2.网络层"></a>2.网络层</h3><p>网络拓扑结构，区块或交易等数据协议和验证机制。在节点生成后时刻监听广播与数据，验证是否有效，检查后才加入区块</p><h3 id="3-共识层"><a href="#3-共识层" class="headerlink" title="3.共识层"></a>3.共识层</h3><p>全网存储一致性：共识算法，避免区块生成过快，通过节点证明能力获得记账权的共识与难度变动的共识算法。在一定认可后确定生成区块并给予一定的奖励。</p><h3 id="4-激励层"><a href="#4-激励层" class="headerlink" title="4.激励层"></a>4.激励层</h3><p>经济激励的发行于分配机制，例如发行货币是否有上限，挖矿奖励的分配</p><h3 id="5-合约层"><a href="#5-合约层" class="headerlink" title="5.合约层"></a>5.合约层</h3><p>智能合约由编程语言，沙箱环境以及外部输入正确信息的预言机组成，是一段运行在安全环境的计算机程序。</p><p>该合约不可篡改，只能升级，就是生成新区块部署。</p><p>合约的生命周期：创建开发、部署运行、升级、销毁。</p><h3 id="6-应用层"><a href="#6-应用层" class="headerlink" title="6.应用层"></a>6.应用层</h3><p>定义区块链应用的准则模型，垂直行业以及开发工具等。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>分布式、密码算法、网络协议构成区块链的基础，共识算法到后来的智能合约在比特币以太坊中有所扩展，数据库存储电子货币都有所应用。</p><h1 id="第二章-区块链的密码学基础"><a href="#第二章-区块链的密码学基础" class="headerlink" title="第二章 区块链的密码学基础"></a>第二章 区块链的密码学基础</h1><h1 id="第三章-区块链的网络协议"><a href="#第三章-区块链的网络协议" class="headerlink" title="第三章 区块链的网络协议"></a>第三章 区块链的网络协议</h1><h1 id="第四章-共识算法"><a href="#第四章-共识算法" class="headerlink" title="第四章 共识算法"></a>第四章 共识算法</h1><h1 id="第五章-智能合约"><a href="#第五章-智能合约" class="headerlink" title="第五章 智能合约"></a>第五章 智能合约</h1><h1 id="第六章-比特币"><a href="#第六章-比特币" class="headerlink" title="第六章 比特币"></a>第六章 比特币</h1><h2 id="1-货币"><a href="#1-货币" class="headerlink" title="1.货币"></a>1.货币</h2><p>​数字货币是基于数学加密原理构建的不可伪造的货币系统，而比特币是第一个基于数学加密原理构建的分布式数字货币系统。比特币和区块链有什么关系？一句话概括，比特币使用区块链技术实现了数字货币的可信支付。</p><p>​说起货币，我们想到的就是日常生活中使用的纸币。但是，纸币并不是天生就出现的。如果追溯到三千多年前，人类社会并没有任何货币，部落之间的贸易是物物交换。随着经济和贸易的发展，迫切需要一种“<strong>一般等价物</strong>”来作为商品交换的“中介”，这种一般等价物就是货币。最早的货币是贝壳，后来由于金属冶炼技术的进步，出现了铜、铁铸造的货币。金属货币由于体积小，容易分割和铸造，逐渐获得了广泛的使用。最终，世界各国的金属货币都落到了金、银这几种<strong>贵金属</strong>上。</p><p>​随着经济的继续发展，<strong>金属货币因为沉重并且不易携带</strong>，因此，人们发明了纸币。世界上最早的纸币出现在中国宋朝，称为“交子”。纸币的发行机制决定了必须由政府发行，并且强行推广使用，因此纸币又称法币。</p><p>​随着计算机技术的发展，银行系统经过几十年的发展，已经用计算机系统完全代替了人工记账，纸币也实现了<strong>电子化</strong>。现在，我们可以自由地使用网银、支付宝这样的工具实现随时随地转账付款，就得益于纸币的电子化和网络化。</p><p>​电子货币本质上仍然是法币，它仍然是由<strong>央行发行</strong>，只是以计算机技术把货币以实体纸币形式的流通变成了银行计算机系统的存款。和纸币相比，电子货币具有更高的流动性。我们每天使用的网上银行、支付宝、微信支付等，都是这种方式。</p><p>​而比特币作为一种数字货币，它和电子货币不同的是，比特币<strong>不需要一个类似银行的中央信任机构</strong>，就可以通过全球P2P网络进行发行和流通，这一点听上去有点不可思议，但比特币正是一种通过密码学理论建立的不可伪造的货币系统。</p><p>​总的来说，比特币具有以下特点：</p><ul><li>创建了无需信任中心的货币发行机制；</li><li>发行数量由程序决定，无法随意修改；</li><li>交易账本完全公开可追溯，不可篡改；</li><li>密码学理论保证货币防伪造，防双花；</li><li>数字签名机制保证交易完整可信，不可抵赖和撤销。</li></ul><h2 id="2-钱包"><a href="#2-钱包" class="headerlink" title="2.钱包"></a>2.钱包</h2><p>比特币的交易是一种无需信任中介参与的P2P（Peer-to-peer）交易。</p><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>​传统的电子交易，交易双方必须通过银行这样的信任机构作为中介，这样可以保证交易的安全性，因为银行记录了交易双方的账户资金，能保证在一笔交易中，要么保证成功，要么交易无效，不存在一方到账而另一方没有付款的情况；</p><p>​但是在比特币这种去中心化的P2P网络中，并<strong>没有</strong>一个类似银行这样的<strong>信任机构</strong>存在，要想在两个节点之间达成交易，就必须实现一种在零信任的情况下安全交易的机制。</p><p>​假设有两个人，一个叫小明，一个叫小红，小明说：“我转一万块给小红！”。如何验证这个声明确实是小明作出的呢？数字签名就可以验证这个声明是否是小明做的，并且，一旦验证通过，小明是无法抵赖的。</p><p>在比特币交易中，付款方就是通过数字签名来证明自己拥有某一笔比特币，并且，要把这笔比特币转移给指定的收款方。使用签名是为了验证某个声明确实是由某个人做出的。例如，在付款合同中签名，可以通过验证笔迹的方式核对身份。而在计算机中，用密码学理论设计的数字签名算法比验证笔迹更加可信。使用数字签名时，每个人都可以自己生成一个秘钥对，这个秘钥对包含一个私钥和一个公钥：私钥被称为Secret Key或者Private Key，私钥必须严格保密，不能泄漏给其他人；公钥被称为Public Key，可以公开给任何人；</p><p>当私钥持有人，例如，小明希望对某个消息签名的时候，他可以用自己的私钥对消息进行签名，然后，把消息、签名和自己的公钥发送出去；其他任何人都可以通过小明的公钥对这个签名进行验证，如果验证通过，可以肯定，该消息是小明发出的。</p><p>数字签名算法在电子商务、在线支付这些领域有非常重要的作用：</p><ul><li>首先，签名不可伪造，因为私钥只有签名人自己知道，所以其他人无法伪造签名。</li><li>其次，消息不可篡改，如果原始消息被人篡改了，那么对签名进行验证将失败。</li><li>最后，签名不可抵赖。如果对签名进行验证通过了，那么，该消息肯定是由签名人自己发出的，他不能抵赖自己曾经发过这一条消息。</li></ul><h3 id="支付钱包"><a href="#支付钱包" class="headerlink" title="支付钱包"></a>支付钱包</h3><p>对于比特币来说，钱不是支付给个人的，而是支付给某一把私钥。这就是交易匿名性的根本原因，因为没有人知道，那些私钥背后的主人是谁。所以，<strong>比特币交易的第一件事，就是你必须拥有自己的公钥和私钥。</strong></p><p>​首先生成一个比特币钱包（wallet）。<strong>这个钱包不是用来存放比特币，而是存放你的公钥和私钥。</strong>软件会帮你生成这两把钥匙，然后放在钱包里面。根据协议，公钥的长度是512位。这个长度不太方便传播，因此协议又规定，要为<strong>公钥生成一个160位的</strong><mark>指纹</mark>。所谓指纹，就是一个比较短的、易于传播的哈希值。160位是二进制，写成十六进制，大约是26到35个字符，比如 1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2。这个字符串就叫做<strong>钱包的地址</strong>，它是唯一的，即每个钱包的地址肯定都是不一样的。</p><p>​你向别人收钱时，只要告诉对方你的钱包地址即可，对方向这个地址付款。由于你是这个地址的拥有者，所以你会收到这笔钱。</p><p><strong>由于你是否拥有某个钱包地址，是由私钥证明</strong>的（具体的证明方法稍后介绍），所以一定要保护好私钥。这是极其重要的，如果你的私钥被偷了，你的比特币也就等于没了，因为他人可以冒用你的身份了，把钱包里面的钱都转走。</p><p>同样的，你向他人支付比特币，千万不能写错他人的钱包地址，否则你的比特币就支付到了另一个不同的人了。</p><h2 id="3-交易"><a href="#3-交易" class="headerlink" title="3.交易"></a>3.交易</h2><p>​比特币实际的交易记录是由一系列交易构成，每一个交易都包含一个或多个输入，以及一个或多个输出。未花费的输出被称为UTXO（Unspent Transaction Ouptut）。</p><p><strong>一笔交易就是一个地址的比特币，转移到另一个地址。</strong>由于比特币的交易记录全部都是公开的，哪个地址拥有多少比特币，都是可以查到的。因此，支付方是否拥有足够的比特币，完成这笔交易，这是可以轻易验证的。</p><p>问题出在怎么防止其他人，冒用你的名义申报交易。举例来说，有人申报了一笔交易：地址 A 向地址 B 支付10个比特币。我怎么知道这个申报是真的，申报人就是地址 A 的主人？</p><p>比特币协议规定，申报交易的时候，除了交易金额，<strong>转出比特币的一方</strong>还必须提供以下数据。</p><blockquote><ul><li>上一笔交易的 Hash（你从哪里得到这些比特币）</li><li>本次交易双方的地址，支付方的地址</li><li>支付方的公钥</li><li>支付方的私钥生成的数字签名</li></ul></blockquote><p>验证这笔交易是否属实，需要三步。</p><blockquote><p>第一步，找到上一笔交易，确认支付方的比特币来源。算出他的资产是否足够支付这场交易</p><p>第二步，算出支付方公钥的指纹，确认与支付方的地址一致，从而保证公钥属实。</p><p>第三步，使用支付方公钥去解开数字签名，保证私钥属实。</p></blockquote><p>经过上面三步，就可以认定这笔交易是真实的。</p><h2 id="4-交易确认与写入区块链"><a href="#4-交易确认与写入区块链" class="headerlink" title="4.交易确认与写入区块链"></a>4.交易确认与写入区块链</h2><p>确认交易的真实性以后，交易还不算完成。<strong>交易数据必须写入数据库，才算成立，对方才能真正收到钱。</strong></p><p>比特币使用的是一种特殊的数据库，叫做区块链（blockchain），详细的介绍请看<a href="https://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html">《区块链入门教程》</a>。本文只讨论交易如何写入区块链。</p><p>首先，所有的交易数据都会传送到矿工那里。矿工负责把这些交易写入区块链。</p><p>根据比特币协议，一个区块的大小最大是 1MB，而一笔交易大概是500字节左右，因此一个区块最多可以包含2000多笔交易。矿工负责把这2000多笔交易打包在一起，组成一个区块，然后计算这个区块的哈希。</p><p>计算哈希的过程叫做采矿，这需要大量的计算。矿工之间也在竞争，谁先算出哈希，谁就能第一个添加新区块进入区块链，从而享受这个区块的全部收益，而其他矿工将一无所获。</p><p>一笔交易一旦写入了区块链，就无法反悔了。这里需要建立一个观念：<strong>比特币不存放在钱包或其他别的地方，而是只存在于区块链上面。</strong>区块链记载了你参与的每一笔交易，你得到过多少比特币，你又支付了多少比特币，因此可以算出来你拥有多少资产。</p><h2 id="5-矿工挖矿"><a href="#5-矿工挖矿" class="headerlink" title="5.矿工挖矿"></a>5.矿工挖矿</h2><p>​当某个矿工成功找到特定哈希的新区块后，他会立刻向全网<strong>广播该区块</strong>。其他矿工在收到新区块后，会对新区块进行验证，如果有效，就把它添加到区块链的尾部。同时说明，在本轮工作量证明的竞争中，这个矿工胜出，而其他矿工都失败了。失败的矿工会抛弃自己当前正在计算还没有算完的区块，转而开始计算下一个区块，进行下一轮工作量证明的竞争。</p><p>为什么区块可以安全广播？因为Merkle Hash锁定了该区块的所有交易，而该区块的第一个coinbase交易输出地址是该矿工地址。每个矿工在挖矿时产生的区块数据都是不同的，所以无法窃取别人的工作量。</p><p>​在比特币的P2P网络中，有一类节点，它们时刻不停地进行计算，试图把新的交易打包成新的区块并附加到区块链上，这类节点就是矿工。因为每打包一个新的区块，打包该区块的矿工就可以获得一笔比特币作为奖励。所以，打包新区块就被称为挖矿。</p><p>​比特币的挖矿原理就是一种工作量证明机制。<strong>工作量证明POW</strong>是英文Proof of Work的缩写。</p><p>​如果两个矿工在同一时间各自找到了有效区块，注意，这两个区块是不同的，因为coinbase交易不同，所以Merkle Hash不同，区块哈希也不同。但它们只要符合难度值，就都是有效的。这个时候，网络上的其他矿工应该接收哪个区块并添加到区块链的末尾呢？答案是，都有可能。</p><p>​通常，矿工接收先收到的有效区块，由于P2P网络广播的顺序是不确定的，不同的矿工先收到的区块是有可能的不同的。这个时候，我们说区块发生了分叉：在分叉的情况下，有的矿工在绿色的分叉上继续挖矿，有的矿工在蓝色的分叉上继续挖矿：但是最终，总有一个分叉首先挖到后续区块，这个时候，由于比特币网络采用<mark>最长分叉的共识算法</mark>，绿色分叉胜出，蓝色分叉被废弃，整个网络上的所有矿工又会继续在最长的链上继续挖矿。由于区块链虽然最终会保持数据一致，但是，一个交易可能被打包到一个后续被孤立的区块中。所以，要确认一个交易被永久记录到区块链中，需要对交易进行确认。如果后续的区块被追加到区块链上，实际上就会对原有的交易进行确认，因为链越长，修改的难度越大。一般来说，经过6个区块确认的交易几乎是不可能被修改的。</p><h3 id="手续费"><a href="#手续费" class="headerlink" title="手续费"></a>手续费</h3><p>​交易的确认离不开矿工。为什么有人愿意做矿工呢？比特币协议规定，挖到新区块的矿工将获得奖励，一开始（2008年）是50个比特币，然后每4年减半，目前（2018年）是12.5个比特币。这也是比特币的<strong>供给增加机制</strong>，流通中新增的比特币都是这样诞生的。你可能看出来了，每4年奖励减半，由于比特币可以分割到小数点后八位，那么到了2140年，矿工将得不到任何奖励，比特币的数量也将停止增加。这时，矿工的收益就完全依靠交易手续费了。</p><p>所谓交易手续费，就是矿工可以从每笔交易抽成，具体的金额由支付方自愿决定。你完全可以一毛不拔，一分钱也不给矿工，但是那样的话，你的交易就会没人处理，迟迟无法写入区块链，得到确认。矿工们总是优先处理手续费最高的交易。</p><p>目前由于交易数量猛增，手续费已经水涨船高，一个区块2000多笔交易的手续费总额可以达到3～10个比特币。如果你的手续费给低了，很可能过了一个星期，交易还没确认。</p><h2 id="6-点对点网络"><a href="#6-点对点网络" class="headerlink" title="6.点对点网络"></a>6.点对点网络</h2><p>比特币是一个全世界的开放网络，只要你有服务器，就能加入这个网络，成为一个节点。每个节点都包含了整个区块链（目前2018大概 100多 GB），并且节点之间时刻不停地在同步信息。当你发生了一笔支付，你所在的节点就会把这笔交易告诉另一个节点，直至传遍整个网络。矿工从网上收集各种新发生的交易，将它们打包写入区块链。一旦写入成功， 矿工所在节点的区块链，就成为最新版本，其他节点都会来复制新增的区块，保证全网的区块链都是一致的。</p><p>最后，你所在的节点也拿到了最新的区块链，从而得知你早先的那笔交易，已经写在里面了，至此交易确认成功。</p><h2 id="7-UTXO模型"><a href="#7-UTXO模型" class="headerlink" title="7.UTXO模型"></a>7.UTXO模型</h2><p>比特币的区块链由一个个区块串联构成，而每个区块又包含一个或多个交易。</p><p>如果我们观察任何一个交易，它总是由若干个输入（Input）和若干个输出（Output）构成，一个Input指向的是前面区块的某个Output，只有Coinbase交易（矿工奖励的铸币交易）没有输入，只有凭空输出。所以，任何交易，总是可以由Input溯源到Coinbase交易。</p><p>还没有被下一个交易花费的Output被称为UTXO：Unspent TX Output，即未花费交易输出。给定任何一个区块，计算当前所有的UXTO金额之和，等同于自创世区块到给定区块的挖矿奖励之和。</p><p>因此，比特币的交易模型和我们平时使用的银行账号有所不同，它并没有账户这个说法，只有UTXO。想要确定某个人拥有的比特币，并无法通过某个账户查到，必须知道此人控制的所有UTXO金额之和。</p><p>在钱包程序中，钱包管理的是一组私钥，对应的是一组公钥和地址。钱包程序必须从创世区块开始扫描每一笔交易，如果：</p><ol><li>遇到某笔交易的某个Output是钱包管理的地址之一，则钱包余额增加；</li><li>遇到某笔交易的某个Input是钱包管理的地址之一，则钱包余额减少。</li></ol><p>钱包的当前余额总是钱包地址关联的所有UTXO金额之和。</p><p>如果刚装了一个新钱包，导入了一组私钥，在钱包扫描完整个比特币区块之前，是无法得知当前管理的地址余额的。</p><p>那么，给定一个地址，要查询该地址的余额，难道要从头扫描几百GB的区块链数据？</p><p>当然不是。</p><p>要做到瞬时查询，我们知道，使用关系数据库的主键进行查询，由于用了索引，速度极快。</p><p>把MySQL的binlog日志完整地记录下来，再进行重放，即可在另一台机器上完整地重建整个数据库。把区块链看作不可修改的binlog日志，我们只要把每个区块的所有交易重放一遍，即可重建一个地址-余额的数据库。</p><p>可见，比特币的区块链记录的是修改日志，而不是当前状态。</p><h1 id="第七章-以太坊"><a href="#第七章-以太坊" class="headerlink" title="第七章 以太坊"></a>第七章 以太坊</h1><p>以太坊（Ethereum）是一个支持智能合约的区块链平台，它与比特币最大的不同是，以太坊通过一个虚拟机（EVM）可以运行智能合约。</p><h1 id="第八章-Hyperledger-Fabric"><a href="#第八章-Hyperledger-Fabric" class="headerlink" title="第八章 Hyperledger Fabric"></a>第八章 Hyperledger Fabric</h1><h1 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h1><p>相关技术文章：</p><p><a href="https://bitcoin.org/bitcoin.pdf">https://bitcoin.org/bitcoin.pdf</a>  比特币：一种点对点的电子现金系统&#x2F;中本聪&#x2F;2008.10</p><p>参考文章：</p><p><a href="https://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html">https://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html</a> 比特币入门教程&#x2F;阮一峰&#x2F;2018.1.4 </p><p><a href="https://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html">https://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html</a> 区块链入门教程&#x2F;阮一峰&#x2F;2017.12.26</p><p><a href="https://www.liaoxuefeng.com/wiki/1207298049439968">https://www.liaoxuefeng.com/wiki/1207298049439968</a> 区块链教程&#x2F;廖雪峰&#x2F;2018.4.10</p><p>《区块链技术与实践》朱建民 机械工业出版社.2021</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;区块链已经成为构建信任的新技术基础设施，通过深度融合密码学、对等网络、共识算法、智能合约等技术进行集成创新，即实现了更广泛的社会协作，又降低</summary>
      
    
    
    
    <category term="网络工程" scheme="http://giyayonlib.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="网络安全" scheme="http://giyayonlib.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="区块链" scheme="http://giyayonlib.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="密码学" scheme="http://giyayonlib.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="网络安全" scheme="http://giyayonlib.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="网络" scheme="http://giyayonlib.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>网络安全渗透测试作业题</title>
    <link href="http://giyayonlib.com/2023/03/11/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BD%9C%E4%B8%9A%E9%A2%98/"/>
    <id>http://giyayonlib.com/2023/03/11/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BD%9C%E4%B8%9A%E9%A2%98/</id>
    <published>2023-03-11T12:25:18.692Z</published>
    <updated>2023-04-02T03:31:40.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本书是《网络安全渗透测试》王晓东 西安电子科技大学出版社.</p><p>在信息安全领域中，渗透测试是公认度非常高的新型安全测试方法。从其机理而言，渗透测试属于破坏性检验的范畴。在前三章讲渗透测试的基础概念；第四章讲到信息收集，五到七章讲到服务器 客户端 网络设备渗透测试，第八章讲到后渗透测试，第九章讲到社会工程学，十到十一讲到工控网络和无线网络的测试，十二到十三章讲到自动化框架，最后一章讲了质量控制介绍</p><h1 id="第一章：概述"><a href="#第一章：概述" class="headerlink" title="第一章：概述"></a>第一章：概述</h1><h3 id="什么是渗透测试？"><a href="#什么是渗透测试？" class="headerlink" title="什么是渗透测试？"></a>什么是渗透测试？</h3><blockquote><p>​渗透测试是服务于信息安全的保障技术。</p><p>​信息安全又可分为狭义上的信息安全和广义上的信息安全，狭义上是以密码学为基础，服役通信网络、计算机编程等方面相关信息保护技术。</p><p>​渗透测试是指对计算机系统、网络、应用程序等进行安全评估的一种测试方法。渗透测试通过模拟攻击者的攻击方式和手段，来评估目标系统的安全性，并发现系统存在的漏洞和弱点，从而提供针对性的修复建议，以保障系统的安全性和完整性。</p></blockquote><h3 id="渗透测试的分类有哪些？各有什么特点？"><a href="#渗透测试的分类有哪些？各有什么特点？" class="headerlink" title="渗透测试的分类有哪些？各有什么特点？"></a>渗透测试的分类有哪些？各有什么特点？</h3><blockquote><p>1.按照协议分类</p><p>​按照OSI七层模型与用户一层的八层进行针对性试探</p><p>2.按照信息公开与否分类</p><p>​是否通过公开测试来进行测试</p><p>3.按照测试方法分类</p><p>​黑盒测试：对服务器内部情况一无所知，只有DNS、Web、E-mail公开的服务器知道</p><p>​白盒测试：通过正规渠道获取到公司内部的服务器结构框架针对性的模拟内部企业雇员的越权行为</p><p>4.按照测试目标分类</p><p>​专门的操作系统，数据库，网络设备进行测试</p></blockquote><h3 id="渗透测试的主要方法有哪些？"><a href="#渗透测试的主要方法有哪些？" class="headerlink" title="渗透测试的主要方法有哪些？"></a>渗透测试的主要方法有哪些？</h3><blockquote><ol><li>主动侦查：这是收集有关目标系统的信息的过程。渗透测试人员会使用各种技术和工具，如端口扫描、DNS信息收集和Whois查询等，来收集有关目标系统的详细信息。</li><li>社会工程学攻击：这是一种攻击人员通过欺骗、伪装等方式欺骗用户揭露密码、访问权限等敏感信息的技术。渗透测试人员会通过各种方式测试系统用户的社会工程学素养，包括钓鱼、垃圾邮件和网络欺诈等。</li><li>漏洞扫描：这是通过使用自动化工具扫描目标系统中的漏洞，以确定目标系统中存在的安全漏洞。常见的漏洞扫描工具包括OpenVAS、Nessus和Nmap等。</li><li>漏洞利用：这是一种尝试利用发现的安全漏洞来获取系统访问权限的行为。这包括使用各种技术和工具，如暴力破解、字典攻击和缓冲区溢出等。</li><li>密码攻击：这是一种针对系统中存储的密码进行攻击的行为。渗透测试人员会使用各种密码破解工具，如John the Ripper和Hashcat等，以尝试破解系统中存储的密码。</li><li>社会工程学测试：这是一种测试目标系统用户的社会工程学素养的行为。渗透测试人员会模拟各种攻击场景，以测试系统用户对攻击的反应和应对能力。</li></ol></blockquote><h3 id="渗透测试与软件测试的区别是什么？"><a href="#渗透测试与软件测试的区别是什么？" class="headerlink" title="渗透测试与软件测试的区别是什么？"></a>渗透测试与软件测试的区别是什么？</h3><blockquote><p>渗透测试（Penetration Testing）也被称为漏洞评估，它是指一种通过模拟黑客攻击的方式，来评估计算机系统、网络或应用程序的安全性的方法。渗透测试通常涉及以下步骤：信息收集、漏洞扫描、漏洞利用、权限提升、数据获取、漏洞利用后清理等。渗透测试需要深入了解系统架构和网络安全知识，通常由专业的安全测试工程师完成。</p><p>软件测试（Software Testing）是指在开发软件的过程中，对软件的各项功能、性能、安全性等进行全面的测试和验证。软件测试通常涉及以下步骤：测试计划、测试用例设计、测试执行、缺陷管理和测试报告。软件测试需要深入了解软件开发和测试方法，通常由专业的测试工程师完成。</p><p>渗透测试侧重于系统安全性的评估和漏洞发现，需要深入了解系统安全领域的知识，而软件测试侧重于软件质量的验证和提高，需要深入了解软件开发和测试方法。</p></blockquote><h3 id="论述渗透测试与黑客攻击的区别？"><a href="#论述渗透测试与黑客攻击的区别？" class="headerlink" title="论述渗透测试与黑客攻击的区别？"></a>论述渗透测试与黑客攻击的区别？</h3><blockquote><ol><li>合法性：渗透测试是经过委托或者授权的正规测试行为，而黑客攻击则是未经授权或违法的攻击行为。</li><li>目的：渗透测试的目的是评估目标系统的安全性，并提供改进措施，而黑客攻击的目的是非法获取系统资源或者信息。</li><li>方法：渗透测试使用合法的测试工具和技术来模拟攻击，以探测和利用系统的安全漏洞，而黑客攻击则使用各种非法手段来攻击目标系统。</li><li>范围：渗透测试在明确范围内进行，不会超出客户授权的范围，而黑客攻击则可以攻击任何目标。</li><li>报告：渗透测试通常会在测试结束后提供详细的测试报告，报告中包括系统中发现的安全漏洞和建议的改进措施。黑客攻击不会提供任何报告，其目的只是攻击目标系统并非法获取信息或者资源。</li></ol></blockquote><h3 id="简述渗透测试的发展过程？"><a href="#简述渗透测试的发展过程？" class="headerlink" title="简述渗透测试的发展过程？"></a>简述渗透测试的发展过程？</h3><blockquote><ol><li>手动渗透测试阶段：早期的渗透测试主要采用手动方式进行，渗透测试人员需要通过自己的知识和经验，手动识别和利用目标系统的漏洞，进行攻击和渗透。</li><li>自动化渗透测试阶段：随着计算机技术的不断发展，渗透测试工具逐渐自动化，如著名的Nmap、Metasploit、Burp Suite等渗透测试工具。这些工具可以自动扫描目标系统，自动化地进行漏洞验证和攻击测试。</li><li>智能化渗透测试阶段：智能化渗透测试工具的出现，使得渗透测试更加高效和准确。智能化渗透测试工具可以通过机器学习、人工智能等技术，快速识别和利用目标系统的漏洞，有效地进行攻击和渗透。</li><li>云渗透测试阶段：云计算的出现，为渗透测试带来了更多的便利和效率。云渗透测试平台可以帮助企业快速、低成本地进行渗透测试，实现对企业安全的全面保护。</li></ol></blockquote><h3 id="渗透测试的步骤是什么？"><a href="#渗透测试的步骤是什么？" class="headerlink" title="渗透测试的步骤是什么？"></a>渗透测试的步骤是什么？</h3><blockquote><p>渗透测试通常涉及以下步骤：信息收集、漏洞扫描、漏洞利用、权限提升、数据获取、漏洞利用后清理等。</p></blockquote><h3 id="渗透测试的工具有哪些？"><a href="#渗透测试的工具有哪些？" class="headerlink" title="渗透测试的工具有哪些？"></a>渗透测试的工具有哪些？</h3><blockquote><p>1.Metasploit</p><p>2.Nessus</p><p>3.Nmap</p><p>4.Burp Suite</p><p>5.OWASP ZAP</p><p>6.SQLmap</p><p>7.Kali Linux</p></blockquote><h3 id="渗透测试的原则有哪些？"><a href="#渗透测试的原则有哪些？" class="headerlink" title="渗透测试的原则有哪些？"></a>渗透测试的原则有哪些？</h3><blockquote><p>1.标准性原则：需要遵守相关规定</p><p>2.规范性原则：有良好的写作格式，清楚地记录所用工具以及策略</p><p>3.可控性原则：对工作的可控，在双方认可的范围内进行</p><p>4.影响性原则：测试过程不可让系统崩溃或网络造成破坏，在业务时间允许的情况进行，做到影响小</p><p>5.整体性和不可缺原则：测试对象不可在规定的范围外进行</p><p>6.保密性原则：过程与结果都要保密，不可泄漏</p></blockquote><h3 id="渗透测试的道德约束和法律约束是什么？"><a href="#渗透测试的道德约束和法律约束是什么？" class="headerlink" title="渗透测试的道德约束和法律约束是什么？"></a>渗透测试的道德约束和法律约束是什么？</h3><blockquote><p>道德约束包括：</p><ol><li>确保事先获得授权：渗透测试必须在经过被测试系统拥有者或合法代表的书面授权后才能进行。</li><li>遵守保密协议：渗透测试人员需要严格遵守保密协议，不得泄露任何有关被测试系统的信息。</li><li>确保安全：渗透测试人员需要在测试期间确保被测试系统的安全性，不得在测试过程中破坏、篡改或者删除任何数据。</li></ol><p>法律约束包括：</p><ol><li>合法授权：渗透测试必须在被测试系统拥有者或合法代表的书面授权后才能进行，否则将会触犯法律。</li><li>不侵犯隐私：在渗透测试过程中，测试人员必须遵守隐私保护规定，不得侵犯被测试系统用户的隐私权。</li><li>不破坏系统：在测试过程中，渗透测试人员必须严格遵守法律规定，不得破坏、篡改或者删除被测试系统中的数据和信息。</li><li>合法使用工具：在渗透测试过程中，测试人员必须使用合法的工具和软件，不得使用非法、盗版或者未授权的工具和软件。</li></ol></blockquote><h1 id="第二章：渗透测试原理与模型"><a href="#第二章：渗透测试原理与模型" class="headerlink" title="第二章：渗透测试原理与模型"></a>第二章：渗透测试原理与模型</h1><h3 id="什么是网络攻击？网络攻击的手段有哪些？"><a href="#什么是网络攻击？网络攻击的手段有哪些？" class="headerlink" title="什么是网络攻击？网络攻击的手段有哪些？"></a>什么是网络攻击？网络攻击的手段有哪些？</h3><blockquote><p>网络攻击是针对计算机信息系统、基础设施、计算机网络或个人计算机设备的任何类型的进攻动作。</p><ol><li>拒绝服务攻击（Denial of Service, DoS）：通过发送大量无效请求或攻击数据包，使服务器负载过大，最终导致服务不可用。</li><li>木马病毒攻击：将木马病毒程序传入目标主机，并通过该程序获取或窃取计算机中的敏感信息。</li><li>黑客攻击：利用漏洞攻击操作系统或应用程序，获取管理员权限，并在系统中实施各种破坏性行为。</li><li>社会工程学攻击：通过伪装成信任的个人或组织，诱骗用户提供敏感信息，如密码、账号等。</li><li>网络钓鱼攻击：利用电子邮件、短信等方式诱导用户点击链接或下载附件，以获取用户的账号和密码等敏感信息。</li><li>网络间谍攻击：通过入侵目标网络或计算机，获取目标组织或个人的敏感信息，如商业机密、个人隐私等。</li><li>网络入侵检测攻击：利用漏洞攻击网络入侵检测系统，从而获得管理员权限，控制系统并绕过安全检测。</li></ol></blockquote><h3 id="密码分析如何按照攻击的方式和条件进行分类？"><a href="#密码分析如何按照攻击的方式和条件进行分类？" class="headerlink" title="密码分析如何按照攻击的方式和条件进行分类？"></a>密码分析如何按照攻击的方式和条件进行分类？</h3><blockquote><p>密码分析是指通过各种手段分析加密或编码后的数据，以便揭示加密算法、密码、密钥等信息。根据攻击的方式和条件，密码分析可以分为以下几类：</p><p>1.1 字典攻击：利用事先准备好的字典文件，尝试对目标加密数据进行猜解，以获得密码信息。</p><p>1.2 暴力破解：穷举所有可能的密码组合，直到找到正确的密码为止。</p><p>1.3 差分攻击：针对加密算法中的差分运算进行攻击，通过观察输入和输出之间的关系来破解密钥。</p><p>1.4 工具攻击：使用各种密码破解工具，如John the Ripper、Hashcat等。</p><p>1.5 侧信道攻击：通过观察目标设备的电磁辐射、功耗、时间等信息，来推测目标设备的加密算法、密钥等信息。</p><p>1.6 社会工程学攻击：通过与目标用户的交互来获取密码等敏感信息，如钓鱼邮件、假冒网站等。</p><p>这些攻击方式可能会结合使用，以提高攻击的成功率。密码分析的目的是为了揭示加密算法的漏洞，从而加强密码的安全性。</p></blockquote><h3 id="什么是漏洞？漏洞的分类有哪些？画图说明安全漏洞的生命周期。"><a href="#什么是漏洞？漏洞的分类有哪些？画图说明安全漏洞的生命周期。" class="headerlink" title="什么是漏洞？漏洞的分类有哪些？画图说明安全漏洞的生命周期。"></a>什么是漏洞？漏洞的分类有哪些？画图说明安全漏洞的生命周期。</h3><blockquote><p>漏洞是系统中存在的一些功能性或安全性的逻辑缺陷，包括可能导致威胁、损坏计算机系统安全性的因素，也可以认为是计算机系统在硬件、软件、协议的具体实现或系统安全策略上存在的所有缺陷和不足。</p><p>1.身份验证与授权漏洞：指攻击者可以通过各种方式绕过身份验证或者授权机制，获得未授权的访问权限。</p><p>2.输入验证漏洞：指攻击者可以利用输入验证不充分的漏洞来执行恶意代码或者通过SQL注入等方式访问和修改数据。</p><p>3.加密和安全协议漏洞：指攻击者可以利用加密算法或安全协议中的漏洞，获取数据或者执行恶意代码。</p><p>4.网络服务漏洞：指网络服务应用程序存在漏洞，导致攻击者可以通过攻击服务来获取系统权限或者执行恶意操作。</p><p>5.操作系统漏洞：指操作系统本身存在的漏洞，攻击者可以利用漏洞获取系统权限或执行恶意操作。</p><p>安全漏洞的生命周期包括以下几个阶段：</p><p>1.发现漏洞：安全漏洞的第一步是发现它们，可以是由安全专业人员、黑客或其他人员发现。</p><p>2.分析漏洞：在这个阶段，安全专业人员需要分析漏洞，确定漏洞的性质和影响范围。</p><p>3.利用漏洞：攻击者利用漏洞来获取系统访问权限、执行恶意代码或窃取敏感信息。</p><p>4.公开漏洞：漏洞可能会被安全专家或黑客公开披露，从而暴露给广大用户。</p><p>5.修复漏洞：漏洞修复是防止攻击的最佳方法，需要厂商或管理员及时修补漏洞，以防止攻击者利用漏洞攻击系统。</p></blockquote><h3 id="区分Shellcode、EXP、Payload"><a href="#区分Shellcode、EXP、Payload" class="headerlink" title="区分Shellcode、EXP、Payload."></a>区分Shellcode、EXP、Payload.</h3><blockquote><p>EXP： 对漏洞如何利用的纤细说明或者是一段演示漏洞攻击的代码，EXP 可以帮助使用者了解漏洞的机理以及利用的方法。</p><p>Payload：攻破目标系统后所进行的操作，目的是提升权限、加强控制等操作。</p><p>Shellcode：指一小段用来执行特定任务的机器码，通常是用于利用软件漏洞的过程中，用于获得对受攻击计算机的控制权限。Shellcode通常被注入到受攻击计算机的内存中，并被执行。Shellcode可以执行各种各样的任务，如创建一个远程访问后门、下载并执行恶意软件、以及执行其他指定的操作。</p></blockquote><h3 id="简述攻击树、攻击图、特权图、Petri、状态转移攻击模型"><a href="#简述攻击树、攻击图、特权图、Petri、状态转移攻击模型" class="headerlink" title="简述攻击树、攻击图、特权图、Petri、状态转移攻击模型"></a>简述攻击树、攻击图、特权图、Petri、状态转移攻击模型</h3><blockquote><p>攻击树（Attack Tree）是一种用于表达攻击路径的方法，它通过树状结构展示攻击者达到某个目标的所有可能路径和方法，每个节点代表一种攻击手段或条件，从根节点开始，通过不断地分解和细化攻击目标，最终到达攻击成功的叶子节点。</p><p>攻击图（Attack Graph）是一种用于分析网络攻击路径的方法，它通过展示攻击者攻击网络时可能的路径、攻击点和攻击方式来分析网络攻击的可能性和危害程度。</p><p>特权图（Privilege Graph）是一种用于描述系统权限控制的方法，它通过展示系统中各个主体（如用户、程序、服务等）的权限关系来分析系统的安全性。</p><p>Petri网（Petri Net）是一种用于描述并发系统的方法，它通过表示系统中的各个状态和状态之间的变迁关系来分析系统的行为和安全性。</p><p>状态转移攻击模型（STAM）是一种基于状态机模型的攻击模型，它通过描述系统中各个状态以及状态之间的转移关系来分析攻击者在系统中的行为和攻击路径。STAM通常用于分析网络协议和安全协议的安全性。</p></blockquote><h3 id="简述攻击方案的生成过程"><a href="#简述攻击方案的生成过程" class="headerlink" title="简述攻击方案的生成过程"></a>简述攻击方案的生成过程</h3><blockquote><ol><li>收集信息：攻击者通过各种手段获取目标系统的信息，包括系统架构、操作系统版本、应用程序版本、网络拓扑结构等。</li><li>制定攻击目标：根据收集到的信息，攻击者制定攻击目标，选择合适的攻击手段和工具，以及攻击的时间和地点。</li><li>分析攻击面：攻击者分析目标系统的攻击面，即可能被攻击的漏洞或弱点，确定攻击方案的方向和重点。</li><li>选择攻击技术：攻击者根据攻击面和攻击目标，选择适合的攻击技术，例如漏洞利用、社会工程学攻击、拒绝服务攻击等。</li><li>编写攻击代码：攻击者根据选择的攻击技术，编写攻击代码或利用已有的攻击代码。</li><li>测试攻击代码：攻击者测试攻击代码的有效性和可靠性，确保攻击能够成功。</li><li>部署攻击代码：攻击者将攻击代码部署到目标系统中，执行攻击。</li><li>操作维护：攻击者在攻击过程中不断进行操作和维护，以保证攻击的成功和持续性。</li></ol></blockquote><h1 id="第三章：渗透测试环境工程"><a href="#第三章：渗透测试环境工程" class="headerlink" title="第三章：渗透测试环境工程"></a>第三章：渗透测试环境工程</h1><h3 id="渗透测试的要素有哪些？"><a href="#渗透测试的要素有哪些？" class="headerlink" title="渗透测试的要素有哪些？"></a>渗透测试的要素有哪些？</h3><blockquote><p>包括测试质量、人员、技术、标准、资源</p><p>质量是测试目标的核心</p><p>人员起决定因素</p><p>技术是工具</p><p>标准是规范要求</p><p>资源是所需基础</p></blockquote><h3 id="简述测试覆盖率与测试效率的关系"><a href="#简述测试覆盖率与测试效率的关系" class="headerlink" title="简述测试覆盖率与测试效率的关系"></a>简述测试覆盖率与测试效率的关系</h3><blockquote><p>测试覆盖率是用来度量测试完整性的一种手段，是测试技术有效性的一个指标。</p><p>测试效率是指测试过程中执行测试人物的时间有效性。</p><p>提升测试效率有利于进一步增加测试覆盖率</p></blockquote><h3 id="对渗透测试人员的要求有哪些？如何进行训练？"><a href="#对渗透测试人员的要求有哪些？如何进行训练？" class="headerlink" title="对渗透测试人员的要求有哪些？如何进行训练？"></a>对渗透测试人员的要求有哪些？如何进行训练？</h3><blockquote><p>1.专业的理论素质</p><p>2.分析解决问题能力</p><p>3.创新思维</p><p>4.团队沟通能力</p><p>5.法律意识与知识</p><p>公认度较高的渗透测试能力训练的手段包括参加CTF和网络对抗训练</p></blockquote><h3 id="简述Docker与虚拟机的区别"><a href="#简述Docker与虚拟机的区别" class="headerlink" title="简述Docker与虚拟机的区别"></a>简述Docker与虚拟机的区别</h3><blockquote><p>虚拟机是通过软件模拟的具有完整硬件系统功能的运行在一个完全隔离环境中的完整计算机系统</p><p>Docker是一个开源的应用容器引擎。让开发者打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的Linux或Windows机器上，也可以实现虚拟化。</p><p>区别：</p><p>1.Docker守护进程可以直接与主操作系统进行通信，为各个Docker容器分配资源；它还可以将容器与主操作系统隔离，并将各个容器相互隔离。</p><p>2.虚拟机的启动需要几分钟，而Docker容器可以在几毫秒内启动。</p><p>3.Docker没有从操作系统，节省了大量的磁盘空间。</p><p>4.虚拟机更擅长于彻底隔离整个运行环境。例如，云服务提供商通常采用虚拟机技术隔离不同的用户，而Docker通常于隔离不同的应用，例如前端、后端、以及数据库</p></blockquote><h3 id="介绍攻击机平台搭建方法。"><a href="#介绍攻击机平台搭建方法。" class="headerlink" title="介绍攻击机平台搭建方法。"></a>介绍攻击机平台搭建方法。</h3><blockquote><p>攻击机平台是指用于进行渗透测试和安全评估的计算机系统，它可以模拟真实攻击场景并进行安全测试。以下是攻击机平台搭建的一般步骤：</p><ol><li>确定操作系统：选择一个适合渗透测试的操作系统，如Kali Linux、Parrot OS、BlackArch等。</li><li>安装必要的软件：根据具体的渗透测试需求，安装必要的软件，如Nmap、Metasploit、Burp Suite、Hydra、John the Ripper等。</li><li>配置网络：在攻击机平台上设置IP地址、网关、DNS服务器等，确保能够访问被测系统。</li><li>安装虚拟机：如果需要模拟多种攻击场景，可以在攻击机平台上安装虚拟机软件，如VirtualBox、VMware等，并安装适合的操作系统和软件。</li><li>模拟攻击场景：根据渗透测试的目标和要求，模拟真实攻击场景，如Web应用程序渗透测试、无线网络攻击、社会工程学攻击等。</li><li>记录测试结果：在攻击机平台上记录测试过程中的操作和结果，以便进行分析和总结。</li></ol><p>在搭建攻击机平台时，需要注意以下几点：</p><ol><li>安全防护：攻击机平台可能会存在安全风险，需要加强系统安全防护措施，如加密磁盘、安装防病毒软件、关闭不必要的服务等。</li><li>合法性问题：在进行渗透测试时，需要遵守法律法规，确保测试行为的合法性，避免对他人造成损失和影响。</li><li>维护成本：攻击机平台需要进行定期维护和更新，以确保系统稳定性和安全性，需要有专业的人员进行管理和维护。</li></ol></blockquote><h3 id="简述靶场技术。"><a href="#简述靶场技术。" class="headerlink" title="简述靶场技术。"></a>简述靶场技术。</h3><blockquote><p>靶场技术是一种安全测试方法，旨在模拟真实世界中的攻击场景，以评估系统的安全性和弱点。靶场通常是虚拟或真实的系统或网络环境，其中安装了各种漏洞和弱点，以模拟真实世界中的攻击情况。靶场可以用于测试安全人员的技能和知识，以及测试安全工具和技术的有效性。</p><p>靶场技术的基本过程如下：</p><ol><li>确定测试目标：确定要测试的系统或网络，以及测试的目的和范围。</li><li>收集信息：收集与测试目标有关的信息，包括IP地址、端口、操作系统版本、应用程序等。</li><li>定义攻击场景：根据测试目标和信息，定义攻击场景，包括攻击类型、攻击方法、攻击者角色等。</li><li>准备靶场：设置靶场环境，包括安装漏洞和弱点，设置攻击场景和网络拓扑等。</li><li>进行测试：进行测试，模拟攻击场景，测试系统的安全性和弱点。</li><li>分析结果：分析测试结果，确定系统的安全性和弱点，制定改进计划。</li></ol><p>靶场技术可以帮助安全人员了解攻击者的思维方式和攻击方式，帮助他们更好地了解系统和网络的安全性，以便更好地保护其机密性、完整性和可用性。</p></blockquote><h3 id="简述PETS渗透测试标准。"><a href="#简述PETS渗透测试标准。" class="headerlink" title="简述PETS渗透测试标准。"></a>简述PETS渗透测试标准。</h3><blockquote><p>PETS (Penetration Testing Execution Standard) 是一种渗透测试标准，其目的是帮助渗透测试人员开展有效的测试，并为客户提供全面的渗透测试报告。PETS 标准包括以下阶段：</p><ol><li>确定范围：定义测试的目标、边界和规则。</li><li>收集信息：通过各种手段搜集测试目标的信息，包括网络拓扑、操作系统、应用程序等等。</li><li>识别漏洞：通过各种手段识别目标系统的漏洞，包括端口扫描、漏洞扫描、手工测试等等。</li><li>利用漏洞：利用已知或发现的漏洞，获取目标系统的敏感信息或控制权。</li><li>维持访问：保持攻击者对目标系统的持久访问权限。</li><li>分析漏洞：对已发现的漏洞进行分析，包括漏洞利用效果、影响范围、风险等等。</li><li>编写报告：撰写详细的渗透测试报告，包括测试目的、测试方法、测试结果、建议改进等等。</li><li>清除痕迹：在测试结束后，清除所有与测试相关的痕迹，以确保不留下任何安全漏洞。</li></ol><p>PETS 标准的主要特点是：明确的测试流程、可重复性和标准化、详细的测试报告。</p></blockquote><h3 id="简述渗透测试资源的定义。"><a href="#简述渗透测试资源的定义。" class="headerlink" title="简述渗透测试资源的定义。"></a>简述渗透测试资源的定义。</h3><blockquote><p>泛指一切实施渗透测试系统所依赖的软硬件、知识与信息</p><p>分为有形、无形</p><p>无形是指知识与信息，包括漏洞库、字典、社会工程库、系统源代码、指纹特征。</p><p>有形是指设备、软件、人力资源为主</p></blockquote><h3 id="简述渗透测试的漏洞资源。"><a href="#简述渗透测试的漏洞资源。" class="headerlink" title="简述渗透测试的漏洞资源。"></a>简述渗透测试的漏洞资源。</h3><blockquote><p>漏洞库是记录漏洞信息的数据库。有助于为安全厂商基于漏洞发现和攻击防护类的产品提供数据和数据支持，政府机构指导制定未来的安全策略。</p></blockquote><h3 id="简述渗透测试的计算资源。"><a href="#简述渗透测试的计算资源。" class="headerlink" title="简述渗透测试的计算资源。"></a>简述渗透测试的计算资源。</h3><blockquote><p>渗透测试往往需要用密码分析对系统认证进行突破，而密码分析通常需要密集、高质量的计算资源</p></blockquote><h1 id="第四章：渗透测试信息收集与分析"><a href="#第四章：渗透测试信息收集与分析" class="headerlink" title="第四章：渗透测试信息收集与分析"></a>第四章：渗透测试信息收集与分析</h1><h3 id="渗透测试的信息有哪些？"><a href="#渗透测试的信息有哪些？" class="headerlink" title="渗透测试的信息有哪些？"></a>渗透测试的信息有哪些？</h3><blockquote><p>信息源一般分为实物型信息源、文献型信息源、电子型信息源和网络信息源</p><p>1.实物型信息源：具体的观察对象在运动过程中直接产生的有关信息，例如事物运动现场、学术研讨会、展览会等</p><p>2.文献型信息源：承载者系统的知识信息的各种载体信息源，包括图书、报纸、期刊、专利文献、学位论文、公文等。</p><p>3.电子型信息源：电子技术实现信息传播的信息源、广播、电视、电子刊物等。</p><p>网络型信息源：蕴藏在计算机网络、特别是因特网中的有关信息而形成的信息源。</p><p>在渗透测试中，根据信息的性质可以对信息进行不同的划分，不同的信息在时效性、处理方法、存储方法和利用方式上差异很大，要区别对待。</p><p>1.根据信息的可用性，分为直接信息、间接信息、隐藏信息。</p><p>2.根据信息内容，分为技术信息、管理信息、物理细节</p><p>3.根据信息的保密等级，分为公开信息、保密信息、机密信息</p><p>4.根据信息的格式，分为文本信息、参数信息、规律信息</p><p>5.根据信息的位置，分为线上信息和线下信息</p></blockquote><h3 id="渗透测试信息的收集方法有哪些？"><a href="#渗透测试信息的收集方法有哪些？" class="headerlink" title="渗透测试信息的收集方法有哪些？"></a>渗透测试信息的收集方法有哪些？</h3><blockquote><p>按收集的手段分类，信息收集可以分为主动信息收集和被动信息收集。主动信息收集是与目标主机进行直接交互；从而获取目标信息；而被动信息收集恰恰相反，不与目标主机进行直接交互，而是通过第三方获取目标信息。</p><p>1.主动信息收集通过直接访问、扫描、尝试连接等方法收集信息，这种方法将产生流量，可能被监测和记录。</p><p>2.被动信息收集利用第三方的服务对目标进行访问了解，例如搜索引擎、公开媒体等，不产生流量具有比较好的隐蔽性。</p></blockquote><h3 id="公开信息有哪些？如何进行收集？"><a href="#公开信息有哪些？如何进行收集？" class="headerlink" title="公开信息有哪些？如何进行收集？"></a>公开信息有哪些？如何进行收集？</h3><blockquote><p>公开信息资源的表现有报刊、图书、地图、声像、照片、微缩、因特网、其他等。</p><p>信息获取方法</p><p>1.直接获取</p><p>用户可以根据自己对信息的需求，针对明确的信息目标，通过搜索引擎或者网址来精确地定位到信息资源所在的位置。</p><p>2.间接获取</p><p>通过网址链接或者是网络导航来获取网络信息资源。很多时候用户不一定很明确自己所需要的信息资源，一般通过一层一层链接找到对自己有用的信息，这种获取网络信息资源的方式并非目标所指，是网络行为导致的一种必然趋势，但这种方式并不比直接获取简单快捷，一般会花费一些时间，而且有时候最终也不一定能够得到对自己游泳的信息资源。</p><p>3.其他</p><p>除了社交网络外，与社交网络捆绑的金融、服务、旅游、导航也是公开信息收集可利用的渠道</p></blockquote><h3 id="解释什么是Google-Hacking"><a href="#解释什么是Google-Hacking" class="headerlink" title="解释什么是Google Hacking"></a>解释什么是Google Hacking</h3><blockquote><p>设备信息：信息系统是由通信网络链接起来的信息设备构成的，进行渗透测试首先需要了解系统的设备信息。</p><p>​Shodan是用来搜索网络空间中在线主机设备的</p><p>​ZoomEye侧重于Web层面的资产发现。</p><p>网站信息</p><p>​1.网站信息跟踪：网站是企业、单位发布信息的窗口，可以利用网站渗透测试目标的大量公开信息</p><p>​1# 跟踪新闻网站</p><p>​2# 分析相关的专业机构网站</p><p>​3# 关注新型的传播平台</p><p>​4# 利用因特网数字图书馆资源</p><p>​2.搜索引擎：通过搜索引擎可以检索到非常多的信息。</p><p>​谷歌黑客（GoogleHacking）就是专门利用搜索引擎实施黑客活动的方法。</p><p>​渗透测试一般基于软件漏洞给和错误配置，虽然一些有经验的入侵者的目标瞄准了一些特殊的系统，尝试发现可能进入的漏洞，但大部分的入侵者是从具体的软件漏洞或者普通用户错误配置开始查找漏洞，在这些配置中，找到怎样侵入并且尝试发现或者扫描有该中漏洞的系统。谷歌黑客对于第一种攻击者来说用处很少，但是对于第二种攻击者则发挥了重要作用</p><p>社交网络</p><p>​社交网络通过网络聊天、博客、播客和社区共享等途径，实现个体社交圈的逐步扩大，最终形成一个链接”熟人的熟人“的大型网络社交圈，充分反映出人类社会的六度分隔理论特征。蕴含大量可以利用的公开信息，日趋发展成网民获取信息、表达观点和信息交流不可缺少的网络传播媒介。</p><p>​1.信息价值分析</p><p>​从信息获取成本来说，社会上刚发生过的新闻，社交网络上可以第一时间获取，好友发布的日志以及状态也能第一时间获得，单从成本来看，成本很低获取到社交网络的信息普遍具有一定价值</p><p>​从信息获取收益来说，社交网络本身是一个大型的网络圈，信息可以一传十，十传百地传播，信息获取速度块，用户根据自己需求筛选，可以短时间内获得大量对自己有用的信息。</p><p>​从信息本身的有效性和可信度来说，获得同一信息的途径可能不同，那么造成的信息可信度也就不一样，因此根据信息可信度来判断信息的价值也是不确定的，视情况来定</p></blockquote><h3 id="什么是主机指纹信息？"><a href="#什么是主机指纹信息？" class="headerlink" title="什么是主机指纹信息？"></a>什么是主机指纹信息？</h3><blockquote><p>​网络信息系统最基本的单元是主机，因此进行渗透测试时，应当首先获得目标主机的信息。主机信息包括信息内容，指纹信息，安防设备。操作系统指纹是指识别某台网络设备上运行的操作系统类型的特征。网络操作系统的指纹实际上来源于TCP&#x2F;IP的协议栈。TCP&#x2F;IP协议栈技术只在RFC文档中描述，并没有一个统一的行业标准，各个公司在编写应用于自己的操作系统的TCP&#x2F;IP协议栈时，对RFC文档做出了不同的诠释，造成了各个操作系统在TCP&#x2F;IP协议的实现上有所不同。例如人的指纹，通过比较不同操作系统的TCP&#x2F;IP协议栈的细微差异，就可以判定操作系统类型以及版本。这种方式称为”指纹方法学“</p></blockquote><h3 id="如何探测目标系统的安防设备信息？"><a href="#如何探测目标系统的安防设备信息？" class="headerlink" title="如何探测目标系统的安防设备信息？"></a>如何探测目标系统的安防设备信息？</h3><blockquote><p>1.防火墙，扫描出防火墙上开放的端口，通过检查响应包可以识别端口是否被防火墙过滤</p><p>2.负载均衡，负载均衡从其应用的地理结构上分为本地负载均衡和全局负载均衡。本地负载均衡是指对本地的服务器群做负载均衡；全局负载均衡是指分别放置在不同地理位置、有不同网络结构的服务器群间作负载均衡。</p><p>3.WAF识别，Web Application Firewall 应用层，通过执行一些列针对Http&#x2F;Https的安全策略专门来保护Web应用的产品。检测通过WAF检测通过发送一个正常的 Http 请求，然后观察其返回有没有一些特征字符，若没有，再发送一个恶意的请求触发 WAF 拦截，用获取其返回的特征来判断 WAP 的存在。可以借助一些工具，如wafwoof、sqlmap等，也可以使用手动方法(在网站 URL 地址后面输入诸如““and”“1&#x3D;1等SQL 语句)触发 WAF并回显网站的 WAF 信息。对于一些旁路或工作在透明模式的安防设备，如IDS、IPS、行为管控系统、病毒墙等,不能通过主动方式探测，只能通过数据分析和推理的方法了解其存在以及相关参数。</p></blockquote><h3 id="端口扫描有哪些方法？"><a href="#端口扫描有哪些方法？" class="headerlink" title="端口扫描有哪些方法？"></a>端口扫描有哪些方法？</h3><blockquote><p>​端口扫描时，扫描者假意与目标进行TCP连接，发起请求，通过观察端口反应来判断端口信息,端口扫描可以采用的方法包括 TCP connect ()、TCP SYN、TCP FINQNULLACK、UDP 扫描等。</p><p>1.TCP connect() </p><p>​扫描TCP connect()是最基本的TCP扫描，或称为全开扫描。操作系统提供的connect0系统调用，用来与每一个感兴趣的目标计算机的端口进行连接。如果端口处于侦听状态，那么connectO就能成功;否则，这个端口是不能用的，即没有提供服务。这个技术最大的优点是不需要任何权限，系统中的任何用户都有权利使用这个调用。另一个优点就是速度。如果对每个目标端口以线性的方式使用单独的connect0调用，那么将会花费相当长的时间,但可以通过同时打开多个套接字加速扫描，如使用非阻塞 I&#x2F;O 允许设置一个低的时间用尽周期，同时观察多个套接字。这种方法的缺点是很容易被发觉，并且被过滤掉。目标计算机的 logs 文件会显示一连串的连接和连接出错的服务消息，并且能很快地关闭它。</p><p>2.TCP SYN 扫描</p><p>​TCPSYN扫描技术通常被认为是“半开放”扫描，因为这种扫描程序不必打开一个完全的 TCP 连接。扫描程序发送的是一个 SYN 数据包，和试图打开一个实际的连接并等待反应一样(参考 TCP 的三次握手建立一个 TCP 连接的过程)。一个 SYNIACK 的返回信息表示端口处于侦听状态。一个RST返回表示端口没有处于侦听状态。如果收到一个SYNIACK则扫描程序必须再发送一个 RST 信号来关闭这个连接过程。这种扫描技术的优点是一般不会在目标计算机上留下记录;缺点是必须要有 root 权限才能建立SYN 数据包。</p><p>3.TCP FIN 扫描</p><p>​有的时候，SYN扫描有可能不够秘密，一些防火墙和包过滤器会对一些指定的端口进行监视，有的程序能检测到这些扫描，而 FIN 数据包可能会没有任何麻烦地通过。一方面这种扫描方法的思想是关闭的端口会用适当的 RST 来回复 FIN 数据包，另一方面，打开的端口会忽略对 FIN 数据包的回复，这种方法和系统的实现有一定的关系。有的系统不管端口是否打开都回复 RST，这时，TCP FIN 扫描方法就不适用了，但这种方法在区分 UnixNT 时十分有用。</p><p>4.NULL扫描</p><p>​RFC793 中规定，当一个端口关闭时，如果它收到一个标志位为空的信息，系统应当反馈一条 RST;当端口开放时，如果收到这种标志位为空的信息，系统不予响应。这种标志位为空的信息，称其为NULL，故这种扫描称为 NULL 扫描。NULL 扫描的优点就是行踪隐蔽，但相对于半连接扫描(完成一半的 TCP 连接)，毕竟还是执行了大部分握手过程，如果目标网络的安防措施部署得较为深入，难免会有被发现的风险。而 NULL扫描隐蔽性更强，不必过分担心被防火墙和包过滤器等防护设备的端口监视功能发现。</p><p>5，ACK扫描<br>ACK 扫描是利用标志位 ACK 实施扫描探测，而ACK 标志在 TCP 协议中表示确认序号有效，它表示确认一个正常的TCP 连接，但是在 TCP ACK 扫描中没有进行正常的TCP连接过程，实际上是没有真正的TCP连接。使用 TCP ACK 扫不能够确定端口的关闭或者开放，因为当发送给对方一个含有 ACK 表示的TCP 报文时，都返回含有 RST标志的报文，无论端口是开放或者关闭的。</p><p>6、UDP扫描</p><p>​当一个UDP端口接收到一个UDP数据报时，如果它是关闭的，就会给源端发回一个ICMP端口不可达数据报，如果它是开放的，那么就会忽略这个数据报，也就是将它丢而不返回任何信息。UDP扫播的优点是可以完成对 UDP 端口的探测:缺点是需要系统管理员的权限，扫描结果的可靠性不高(因为当发出一个UDP数据报而没有收到任何应答时有可能是因为这个UDP端口是开放的，也有可能是因为这个数据报在传输过程中丢失了)另外，扫描的速度很慢(原因是RFC1812中对ICMP错误报文的生成速度进行了限制)。</p></blockquote><h3 id="简述漏洞扫描的过程。"><a href="#简述漏洞扫描的过程。" class="headerlink" title="简述漏洞扫描的过程。"></a>简述漏洞扫描的过程。</h3><blockquote><p>通过PoC代码或漏洞机理对目标系统进行分析，就可以发现是否存在漏洞。</p><p>漏洞扫描可以分为主机漏洞扫描和网络漏洞扫描，其扫描过程稍有不同。</p><p>1.主机漏洞扫描</p><p>​主机漏洞扫描通常在目标系统上安装一个代理(Agent)或者是服务(Services)以便能够访问所有的文件与进程，以此来扫描计算机中的漏洞。</p><p>2.网络漏洞扫描<br>网络漏洞扫描通过网络来扫描远程计算机中的漏洞，可以看作一种漏洞信息收集。根据不同漏洞的特性构造网络数据包，发给网络中的一个或多个目标服务器，以判断某特定的漏洞是否存在。</p><p>​(1)网络漏洞扫描进行工作时，首先探测目标系统的存活主机(例如 SYN 扫描)，对存活主机进行端口扫描，确定系统开放的端口，同时根据协议指纹技术识别出主机的操作系统类型(初始化旗标):然后根据目标操作系统和提供的网络服务，调用漏洞资料库中已知的各种漏洞进行逐一检测，通过对目标系统探测响应数据包的分析判断是否存在漏洞。</p><p>​(2)当前的漏洞扫描技术主要是基于特征匹配原理的，一些漏洞扫描器通过检测目标主机不同端口开放的服务并记录其应答，然后与漏洞库进行比较，如果满足匹配条件，则认为存在安全漏洞。<br>在漏洞扫描中，漏洞库 PoC 定义的精确与否直接影响最后的扫描结果。费</p></blockquote><h3 id="简述漏洞扫描器的结构。"><a href="#简述漏洞扫描器的结构。" class="headerlink" title="简述漏洞扫描器的结构。"></a>简述漏洞扫描器的结构。</h3><blockquote><p>​在漏洞扫描的过程中，可以借助于漏洞扫描器。</p><p>​传统的漏洞扫描器可以分为两种类型:主机漏洞扫描器(Host Sanner)和网络漏洞扫描器(Network Scanner)。</p><p>​主机漏洞扫描器是用于系统本地运行检测系统漏洞程序的硬设备:</p><p>​网络漏洞扫描器是对企业网络架构系统或者网站进行扫描的硬件设备。</p><p>​漏洞扫描也是一种主动探测的方式，在有些渗透测试条件下不被允许，并且扫描过程也受到扫描器、扫描软件的限制，精准性、指向性比较差。渗透测试者还可以根据应用指纹信息、版本号，通过漏洞发布平台进行直接查询。</p></blockquote><h3 id="如何进行目标系统网络拓扑探测？"><a href="#如何进行目标系统网络拓扑探测？" class="headerlink" title="如何进行目标系统网络拓扑探测？"></a>如何进行目标系统网络拓扑探测？</h3><blockquote><p>​对于目标系统，网络的安全信息最终可以投射到态势图上，形成整体和动态的认识。一般以网络拓扑或地理地图为背景。</p><p>​网络的拓扑结构是研究如何在一个网络中互连节点之间链接的安排，可以分为物理网拓扑和逻辑网络拓扑结构两类。网络拓扑发现技术的原理是通过网络扫播、主机探测数据噢探等技术手段。发现网络拓扑中各网络节点、主机和网络连接等拓扑信息，以及名个设备、主机之间的互连关系。</p><p>​实现网络拓扑探测发现必须要解决的问题主要包括:发现不同类型的设备，发现有关设备类型的详细信息，需要一个更好的算法来识别的设备类以及网络拓扑可视化。</p><p>1.基于ARP协议的网络拓扑发现</p><p>​每个路由设备的以太网接口在本地缓存中维护着张 ARP表，表中记录了接口连接网络中IP地址和MAC的转化关系。因此，根据路由器的 ARP 表项，可以发现接口同一侧局城网中所有的网络设备和主机，然后继续利用 ARP 关系进行发现，以此类推，就可得到整个网络的拓扑结构。这种方法适合于局域网发现，发现效率很高，但不适合于过大的网络,不能发现那些不支持ARP 协议的网络连接和设备。</p><p>2、基于OSPF路由协议的网络拓扑发现</p><p>​开放最短路径优先(OSPF)是一种自适应的路由协议，内部网关协议用于互联网协议(IP)网络。在一个自治系统(AS)内使用链接状态路由算法，用于单一自治系统内决策跨由。<br>​基于 OSPF 路由协议的网络拓扑发现就是根据 OSPF 协议的实现原理，使其能够与路由设备相互通信，访问区域内所有边界路由设备的拓扑数据库。</p><p>3.基于SNMP协议的网络拓扑发现</p><p>​基于 SNMP 协议的网络拓扑发现主要是利用 MIB 中定义的路由信息表(ipRoutetable)来判断网络层的拓扑结构。基于 SNMP 的网络拓扑发现基本上分为网络设备存活性、判别设备类型区分和节点连接发现三个步骤进行。</p></blockquote><h3 id="什么是网络态势图？"><a href="#什么是网络态势图？" class="headerlink" title="什么是网络态势图？"></a>什么是网络态势图？</h3><blockquote><p>​态势感知是一种基于环境和动态整体地洞悉安全风险的能力，是以安全数据为基础,从全局视角提供网络识别、理解分析的一种方式，最终为决策与行动提供支持。</p><p>​态势感知的概念最早在军事领域被提出，分为态势要素获取、理解和预测三个层次(如图412)。并随着网络的兴起而升级为网络态势感知(CyberspaceSituationAwareness，CSA)旨在大规模网络环境中对能够引起网络态势发生变化的安全要素进行获取、理解、显示,以及最近发展趋势的顺延性预测，进而进行决策与行动。</p><p>​态势图基于态势感知技术。在渗透测试过程中建立态势图，能够从全局的角度了解测试目标的安全状态。所谓网络态势图，是指由各种网络设备运行状况、网络行为以及用户行为等因素构成的整个网络当前的安全状态和变化趋势，并采用地图背景展示。</p><p>​态势图一般以地图或拓扑图为背景，上面有服务器、主机、网络节点的各类信息(如IP端口、操作系统、漏洞等)标定，可以通过一些图形操作进行交互访问。</p><p>​这里所说的态势是一种状态、趋势，是整体和全局的概念，任何单一的情况或状态都不能称之为态势，因此对态势的理解特别强调环境性、动态性和整体性。环境性是指态势感知的应用环境，是在一个较大的范围内具有一定规模的网络;动态性是指态势随时间不断变化，态势信息不仅包括过去和当前的状态，还要对未来的趋势做出预测;整体性是态势各实体间相互关系的体现，某些网络实体状态发生变化，会影响到其他网络实体的状态进而影响整个网络的态势。<br>为了实时、准确地绘制整个网络安全态势图，网络安全态势感知要在对网络资源进行要素采集的基础上，通过数据预处理、网络安全态势特征提取、态势评估、态势预测和势展示等过程来完成，这其中涉及许多相关的技术问题，主要包括数据融合技术、数据挖掘技术、特征提取技术、态势预测技术和可视化技术等。</p></blockquote><h3 id="解释网络嗅探的原理。"><a href="#解释网络嗅探的原理。" class="headerlink" title="解释网络嗅探的原理。"></a>解释网络嗅探的原理。</h3><blockquote><p>​嗅探一般指嗅探器捕获网络数据包。</p><p>​噢探器可以窃听网络上传输的数据包。用集线器 hub 组建的网络是基于共享原理的局域网内所有的计算机都接收相同的数据包，而网卡构造了硬件的“过滤器”，通过识别MAC地址过滤掉和自己无关的信息，嗅探程序只需关闭这个过滤器，将网卡设置为“混杂模式”就可以进行嗅探。</p><p>​网络嗅探利用的是共享式的网络传输介质。共享即意味着网络中的一台机器可以嗅探到传递给本网段(冲突域)中所有机器的报文。最常见的以太网就是一种共享式的网络技术。</p><p>​以太网卡收到报文后，通过对目的地址进行检查来判断是否是传递给自己的，如果是，则把报文传递给操作系统;否则，将报文丢弃，不进行处理。</p><p>​网卡存在一种特殊的工作模式，在这种工作模式下，网卡不对目的地址进行判断，而直接将收到的所有报文都传递给操作系统进行处理，这种特殊的工作模式称为混杂模式。网络嗅探器通过将网卡设置为混杂模式来实现对网络的嗅探。</p><p>（网卡：一个主机系统实体中，数据的收发是由网卡来完成的，当网卡接收到传输来的数据时，网卡内的单片程序首先解析数据包的目的网卡物理地址，然后根据网卡驱动程序设置的接收模式判断该不该接收，认为该接收就产生中断信号通知CPU，认为不该接收就丢数据包，所以不该接收的数据包就被网卡截断了，上层应用根本就不知道这个过程。CPU如果得到网卡的中断信号，则根据网卡的驱动程序设置的网卡中断程序地址调用驱动程序接收数据，并将接收的数据交给上层协议软件处理。）</p></blockquote><h3 id="如何进行流量分析？流量分析可以提供哪些信息？"><a href="#如何进行流量分析？流量分析可以提供哪些信息？" class="headerlink" title="如何进行流量分析？流量分析可以提供哪些信息？"></a>如何进行流量分析？流量分析可以提供哪些信息？</h3><blockquote><p>​除了数据包本身，数据包流量统计特征也可能蕴含重要信息。</p><p>​针对数据包流量统计特征蕴含的大量信息进行分析的技术就是网络流量分析。网络流量分析是计算机信息安全领域的一个分支，它将一组设备产生的网络流量作为输入，将与这些设备、用户、应用程序或流量本身有关的信息作为输出。</p><p>​网络流量分析通常包括4 个阶段，流量收集、预处理、数据分析和结果评估。</p><p>流量收集是构建数据集的过程;<br>预处理则通过去除数据集中无效的数据或提取流量的关键特征等将收集到的数据转换为可理解的格式以便后续分析;<br>数据分析是网络流量分析流程中最重要的环节;<br>结果评估输出分析结果。</p><p>​通过网络流量分析可以获取设备、用户行为、用户标识等信息。</p></blockquote><h3 id="什么是正向工程、逆向工程、再工程？关系如何？"><a href="#什么是正向工程、逆向工程、再工程？关系如何？" class="headerlink" title="什么是正向工程、逆向工程、再工程？关系如何？"></a>什么是正向工程、逆向工程、再工程？关系如何？</h3><blockquote><p>​软件逆向分析涵盖在软件逆向工程范畴内。软件逆向工程是软件科学和计算机科学的一个分支，它综合了加密和解密、编译和反编译、系统分析、程序理解等多种计算机技术，从可运行的程序系统出发，生成对应的源程序、系统结构以及相关设计原理和算法思想的文档等。</p><p>​可见软件逆向是对已构建程序的解构还原，从二进制代码出发，逆向猜测、推理、分析出程序原本的功能、逻辑甚至源代码。</p><p>​这个过程与逆向思维过程十分吻合。所谓逆向思维是指从反面提出问题、分析问题、解决问题的一种思维方式，它是与正向思维相对应的一种思维，因此软件逆向分析的逆向思维是对软件创作的正向思维的目标逆向、方向逆向和方式逆向。软件逆向分析过程可视为与软件作者的博弈对抗过程。</p><p>​正向工程是指根据需求和设计，通过编码、编译等步骤，将软件开发为可执行的程序的过程。它是从需求和设计到实现的过程，是软件系统开发的正常流程。</p><p>​逆向工程是从任何人造产品中提取知识或者设计规划的过程。</p><p>​再工程（Reengineering）：再工程是指对已有软件系统的源代码、文档等进行分析和修改，以提高其质量、可维护性和可扩展性的过程。再工程是一个包括逆向工程在内的过程，旨在通过对现有系统进行分析和修改，使其满足新的需求或提高其质量。</p><p>​正向工程解决了功能的实现，说明了哪些功能需要增加和删除;逆向工程是从实现到设计或需求的过程，再工程则是对现有系统进行分析和修改以改进其质量和可维护性的过程。</p><img src="https://raw.githubusercontent.com/GiyaYon/mypicGo/master/%E5%B7%A5%E7%A8%8B%E4%B8%89%E8%80%85%E5%85%B3%E7%B3%BB.png" style="zoom:50%;" /><center>正向逆向再工程三者关系</center><p>逆向分析的一般流程包括解码&#x2F;反汇编(目标二进制代码)、中间语言翻译(汇编&#x2F;类汇编代码)、数据流分析、控制流分析(各级中间语言)其他分析(高级抽象代码)和优化几个步骤</p><p>​1.静态反汇编是对反汇编出来的程序清单的分析，从提示信息入手进行分析。<br>​目前,多数软件在设计时都采用了人机对话方式。所谓人机对话，即在软件运行过程中，需要有用户选择的地方，软件应显示相应的提示信息，并等待用户按键选择。如在执行某段程序之后显示一串提示信息，以反映该段程序运行后的状态，是正常运行，还是出现错误，或者提示用户进行下一步工作的帮助信息。<br>​如果我们对静态反汇编出来的程序清单进行阅读，就可了解软件的编程思路，顺利破解该软件，这也就是我们常说的破解版(即盗版)。</p><p>​2.编译和反编译不一定要生成汇编代码，一般生成某种设计好的中间语言。但在反编译的二进制解码过程中，首先会生成一种类汇编或汇编代码，因此二进制解码也可称为反汇编。在反编译的过程中，中间代码也有很多级别，类汇编或汇编代码只是低级中语言。<br>中间语言便于对程序的理解和分析。</p><p>​3.数据流分析是在不执行程序的情况下，收集程序数据运行时的信息，分析程序中数据对象之间的关系。</p><p>​4.控制流分析对执行语句的若干可执行路径进行分析，确定程序的控制结构，建立控制流图。控制流分析有两种形式:过程内(intraprocedural)分析和过程间(interprocedural)分析。</p><p>​5.其他分析和优化是指对分析的结果进行高级推理和优化，使其逼近理想结果<br>逆向分析过程通常可以借助于一些软件工具，如反汇编工具IDA(DA Pro Disassemblerand Debugger)、OllyDbg、D32Aam; 反编译工具dcc&#x2F;UQBT&#x2F;Boomerang、CodeSurfer和CodeSufer&#x2F;x86 等，以提高工作效率。</p></blockquote><h1 id="第五章：服务器端渗透测试"><a href="#第五章：服务器端渗透测试" class="headerlink" title="第五章：服务器端渗透测试"></a>第五章：服务器端渗透测试</h1><h3 id="什么是服务器端渗透"><a href="#什么是服务器端渗透" class="headerlink" title="什么是服务器端渗透?"></a>什么是服务器端渗透?</h3><blockquote><p>服务器、客户机以及网络设备等实质上都是计算机主机。</p><p>​服务器端渗透是指攻击者利用漏洞和安全弱点，入侵和控制服务器操作系统、应用程序、数据库等后台系统，以获取敏感信息、掌握系统权限、窃取数据等恶意行为。</p><p>​服务器端渗透通常需要掌握一定的操作系统、网络和编程技能，能够深入了解服务器和应用程序的工作原理，并发现和利用潜在的安全漏洞。攻击者可以使用各种工具和技术来进行服务器端渗透，包括漏洞扫描器、渗透测试框架、密码破解工具、Web Shell等。</p><p>​服务器端渗透可以对企业和组织的核心业务产生巨大的影响，可能导致业务中断、数据丢失、机密泄露等严重后果。因此，服务器端渗透测试也成为企业和组织信息安全管理中的重要组成部分，可以帮助企业和组织发现和修复安全漏洞，提高系统的安全性和稳定性。</p></blockquote><h3 id="什么是DMZ区"><a href="#什么是DMZ区" class="headerlink" title="什么是DMZ区?"></a>什么是DMZ区?</h3><blockquote><p>DMZ（隔离区）也称为军事化区，它是为了解决安装防火墙后部网络的访问用户不能访问内部网络服务器的问题而设立的一个非安全系统与安全系统之间的缓冲区。在这个小网络区域内可以放置一些必须公开的服务器设施，企业Web服务器、FTP服务器和论坛等。</p></blockquote><h3 id="为什么Web-应用程序成为攻击者重点攻击的对象"><a href="#为什么Web-应用程序成为攻击者重点攻击的对象" class="headerlink" title="为什么Web 应用程序成为攻击者重点攻击的对象?"></a>为什么Web 应用程序成为攻击者重点攻击的对象?</h3><blockquote><p>Web应用除了开放性、多样性和脆弱性外，还有以下问题导致了Web应用成为目前信息安全防御体系的短板</p><p>1.远程执行：随着动态网页技术的引用，，Web应用程序提供了大量的功能函数，以实现基于数据的高级应用。</p><p>2.隐蔽性强：Web访问所基于http和https攻击数据流，通常能够正常通过防火墙和过滤技术的监测，为攻击行为提供保护。</p><p>3.更新困难：很多Web站点结合使用了各种商业应用程序和开源脚本，导致很难实时更新安全补丁。</p></blockquote><h3 id="FTP渗透的方法是什么"><a href="#FTP渗透的方法是什么" class="headerlink" title="FTP渗透的方法是什么?"></a>FTP渗透的方法是什么?</h3><blockquote><p>FTP渗透主要利用用户口令破译、远程溢出、文件上传三种方法进行测试。</p><p>​用户口令破译渗透：用户口令破译可以采用的方法有弱口令探测和嗅探，弱口令扫描方法具体是利用积累的口令字典实现，俗称碰撞。</p><p>​远程溢出：当FTP服务程序存在失误时，可能导致程序溢出以及远程命令的执行。渗透者可以通过漏洞挖掘或向已经公布漏洞但未打补丁的服务器发起攻击实现渗透。</p><p>​文件上传渗透：上传文件方式实施基于社会工程学，或上传畸形文件导致下载、执行该文件用户发生错误</p></blockquote><h3 id="比较FTP主、被动模式的不同，并回答为什么被动模式适合公网服务"><a href="#比较FTP主、被动模式的不同，并回答为什么被动模式适合公网服务" class="headerlink" title="比较FTP主、被动模式的不同，并回答为什么被动模式适合公网服务"></a>比较FTP主、被动模式的不同，并回答为什么被动模式适合公网服务</h3><blockquote><ol><li>主动模式</li></ol><p>在主动模式中，FTP客户端主动向FTP服务器的端口21发起连接请求，随后FTP服务器会在其本地随机选择一个端口，将该端口号发送给FTP客户端。FTP客户端收到FTP服务器发送的数据端口号后，会主动发起一个数据连接请求，以与FTP服务器进行数据传输。</p><p>​2.被动模式</p><p>在被动模式中，FTP客户端向FTP服务器的端口21发起连接请求后，FTP服务器会随机选择一个端口（通常在1024~65535之间），将该端口号发送给FTP客户端。FTP客户端接收到FTP服务器发送的数据端口号后，会主动发起一个连接请求，以与FTP服务器进行数据传输。</p><p>总的来说，主动模式是FTP服务器主动向FTP客户端发起数据连接请求，而被动模式是FTP客户端主动向FTP服务器发起数据连接请求。</p><p>被动模式更适合在公网服务中使用，因为公网服务中的FTP服务器位于防火墙后，无法直接从外部访问其数据端口。被动模式允许FTP服务器在任何端口上打开数据连接，从而避免了因端口限制导致的连接问题。</p></blockquote><h3 id="如何对SMTP服务器进行渗透"><a href="#如何对SMTP服务器进行渗透" class="headerlink" title="如何对SMTP服务器进行渗透?"></a>如何对SMTP服务器进行渗透?</h3><blockquote><ol><li>收集信息：您需要了解SMTP服务器的IP地址、端口、SMTP协议的版本等信息。可以使用Nmap或其他端口扫描工具来扫描SMTP服务器。</li><li>枚举：使用工具进行用户枚举，例如使用smtp-user-enum、Metasploit等工具来查找存在的用户列表。</li><li>验证：尝试使用用户名和密码进行登录验证。使用SMTP扫描工具，例如smtp-user-enum，对SMTP服务器进行枚举，然后使用基于字典的攻击工具，例如Hydra和Medusa等，尝试使用常见的用户名和密码进行登录验证。</li><li>暴力破解：如果枚举和验证失败，则可以使用暴力破解攻击进行密码破解。使用工具，例如Hydra、Medusa等，使用字典或暴力破解攻击进行密码破解。</li><li>利用漏洞：如果SMTP服务器存在漏洞，则可以利用该漏洞进行攻击。您可以使用漏洞扫描工具，例如Nessus、OpenVAS等，来查找SMTP服务器的漏洞，并尝试使用相应的漏洞利用工具进行攻击。</li><li>后门：如果您已经成功获取了访问SMTP服务器的权限，则可以尝试在SMTP服务器上安装后门，以便以后随时访问SMTP服务器。</li></ol></blockquote><h3 id="如何对POP3-服务器进行渗透"><a href="#如何对POP3-服务器进行渗透" class="headerlink" title="如何对POP3 服务器进行渗透?"></a>如何对POP3 服务器进行渗透?</h3><blockquote><p>POP3和SMTP是两个不同的协议，POP3主要用于接收邮件，SMTP主要用于发送邮件。因此，在进行渗透测试时，需要采用不同的方法和工具。</p><p>对于POP3服务器，攻击者可以使用类似于对其他服务进行渗透测试的方法。一些常见的攻击方式包括：</p><ol><li>用户名&#x2F;密码枚举：使用字典攻击、暴力破解等方式尝试猜测用户名和密码。</li><li>漏洞利用：搜索和利用POP3服务器的漏洞，例如缓冲区溢出、拒绝服务攻击等。</li><li>中间人攻击：攻击者可以在客户端和POP3服务器之间插入自己的服务器，然后拦截和篡改邮件。</li></ol><p>对于SMTP服务器，攻击者可以使用以下方法：</p><ol><li>邮件欺骗：使用欺骗的SMTP服务器发送欺骗邮件，例如伪造发件人地址、伪造收件人地址、伪造邮件内容等。</li><li>暴力破解：类似于POP3服务器的攻击方法，使用字典攻击、暴力破解等方式尝试猜测用户名和密码。</li><li>漏洞利用：搜索和利用SMTP服务器的漏洞，例如缓冲区溢出、拒绝服务攻击等。</li><li>中间人攻击：攻击者可以在客户端和SMTP服务器之间插入自己的服务器，然后拦截和篡改邮件。</li></ol></blockquote><h3 id="DNS渗透的方法如何"><a href="#DNS渗透的方法如何" class="headerlink" title="DNS渗透的方法如何?"></a>DNS渗透的方法如何?</h3><blockquote><ol><li>DNS欺骗：攻击者可以通过DNS欺骗来实现中间人攻击或劫持，向用户提供错误的DNS解析结果或将用户重定向到恶意网站。常见的DNS欺骗技术包括DNS投毒、DNS重绑定等。</li><li>DNS缓存投毒：攻击者可以利用DNS缓存中的漏洞，向DNS服务器发送虚假的DNS响应，将恶意的DNS记录插入到缓存中，导致用户访问的是恶意的网站或服务器。</li><li>DNS拒绝服务（DNS DoS）：攻击者可以向DNS服务器发送大量的DNS请求或欺骗请求，占用服务器资源或使服务器崩溃，导致无法正常解析DNS查询。</li><li>DNS隧道：攻击者可以利用DNS协议的报文格式来传输恶意的数据或通信，例如通过DNS隧道将远程控制命令传递到目标系统中。</li></ol></blockquote><h3 id="简述数据库服务器端的渗透方法"><a href="#简述数据库服务器端的渗透方法" class="headerlink" title="简述数据库服务器端的渗透方法"></a>简述数据库服务器端的渗透方法</h3><blockquote><p>黑客攻击数据库的常用方法有拖库、洗库、撞库。</p><p>​拖库是指黑客入侵有价值的网络站点，把注册用户的资料数据库全部盗走的行为，因为谐音，也经常被称作“脱库”。</p><p>​在取得大量的用户数据之后，黑客会通过一系列的技术手段和黑色产业链将有价镇的用户数据变现，通常也被称作“洗库”。</p><p>​最后黑客将得到的数据在其他网站上进行尝试录，称为“撞库”，因为很多用户喜欢使用相同的用户名和密码，“撞库”也可以使黑客获颇丰。</p><p>1远程下载数据库文件</p><p>2利用Web应用漏洞</p><p>3、数据库解密</p></blockquote><h3 id="为什么要对安全机制进行反制"><a href="#为什么要对安全机制进行反制" class="headerlink" title="为什么要对安全机制进行反制?"></a>为什么要对安全机制进行反制?</h3><blockquote><p>可以采取的措施主要包括防火墙、入侵检测等技术设备。渗透测试必须进行有效规避，才能对服务器端展开渗透。</p></blockquote><h1 id="第六章：客户端渗透测试"><a href="#第六章：客户端渗透测试" class="headerlink" title="第六章：客户端渗透测试"></a>第六章：客户端渗透测试</h1><h3 id="客户器端渗透的提出原因是什么"><a href="#客户器端渗透的提出原因是什么" class="headerlink" title="客户器端渗透的提出原因是什么?"></a>客户器端渗透的提出原因是什么?</h3><blockquote><ol><li>客户端应用程序和用户终端设备普及度高：大多数人都使用电脑、手机等客户端设备进行工作、生活和娱乐，而这些设备上安装的应用程序往往是网络攻击的主要目标。</li><li>客户端设备存在漏洞：很多客户端设备存在漏洞，黑客可以通过利用这些漏洞进行攻击，比如利用浏览器漏洞进行钓鱼攻击、利用PDF阅读器漏洞进行远程控制等。</li><li>客户端设备经常连接到不受信任的网络：很多用户经常在咖啡厅、图书馆等公共场所连接到不受信任的Wi-Fi网络，这些网络容易受到中间人攻击和DNS劫持等威胁，导致用户的数据和隐私泄露。</li></ol><p>对客户端应用程序和用户终端设备进行渗透测试可以发现并修复潜在的安全漏洞，保护用户的数据和隐私安全。</p></blockquote><h3 id="什么是内存对抗"><a href="#什么是内存对抗" class="headerlink" title="什么是内存对抗?"></a>什么是内存对抗?</h3><blockquote><p>​内存对抗（Memory Forensics）是一种计算机取证技术，主要用于研究和分析恶意软件和攻击行为，从<strong>计算机内存中提取并分析数据，以了解攻击者对受害者计算机的操作行为、攻击路径和受害者系统的状态</strong>。内存对抗技术可以用于检测、定位和分析各种恶意行为，包括病毒、木马、后门、rootkit、网络钓鱼等。它可以帮助安全人员更好地了解攻击者对受害者计算机的控制情况，提供更全面、深入的信息，以便更好地处理安全事件。</p></blockquote><h3 id="解释堆喷射的原理。"><a href="#解释堆喷射的原理。" class="headerlink" title="解释堆喷射的原理。"></a>解释堆喷射的原理。</h3><blockquote><p>​堆喷射（Heap spraying）是一种利用浏览器或操作系统漏洞进行攻击的技术。其原理是利用JavaScript等脚本语言来在内存中创建大量相同的特定数据，从而将某一段特定的内存空间（通常是堆内存）填满，然后将恶意代码插入到已经预先填充好的内存块中，等待受害者访问时被执行。</p><p>​堆喷射的攻击原理是，利用漏洞将堆内存中的指针覆盖成攻击者控制的地址，使得攻击者可以将恶意代码注入到指定的内存地址中。因为现代操作系统和浏览器都会对栈进行一定的保护，但对堆的保护相对较弱，因此堆喷射已经成为了一种广泛应用的攻击手段。</p></blockquote><h3 id="什么是空指令与滑行区"><a href="#什么是空指令与滑行区" class="headerlink" title="什么是空指令与滑行区?"></a>什么是空指令与滑行区?</h3><blockquote><p>​空指令是指在程序中没有实际作用的指令。通常是由编译器或者开发者为了调试程序而添加的，实际上并不对程序逻辑产生影响。空指令通常被用作占位符，因为在指令中占用了一个地址，可以用来填充代码中的空洞，以达到指令地址的对齐。</p><p>​滑行区是指在堆喷射攻击中，为了在特定的地址空间中寻找合适的空间来存储攻击代码，需要在堆中创建足够的空间。滑行区通常是指在堆中创建的一段用于存储攻击代码的空间，这个空间通常与目标应用程序的堆空间不重叠，以确保攻击代码的正常运行。在堆喷射攻击中，攻击者通常通过滑行区来寻找目标空间，并将攻击代码注入到目标空间中，以达到控制程序流程的目的。</p></blockquote><h3 id="什么是栈溢出-什么是堆溢出"><a href="#什么是栈溢出-什么是堆溢出" class="headerlink" title="什么是栈溢出?什么是堆溢出?"></a>什么是栈溢出?什么是堆溢出?</h3><blockquote><p>​栈溢出指的是利用程序在函数调用时使用的栈空间出现错误，导致向栈中写入了超出预留空间的数据，覆盖了栈上的其他重要数据，例如函数返回地址和函数参数等，从而导致程序崩溃或执行了攻击者预设的恶意代码。</p><p>​堆溢出则是指程序在使用堆内存时出现错误，向堆中写入了超出预留空间的数据，覆盖了堆上的其他重要数据，例如分配堆内存时的管理结构体等，从而导致程序崩溃或执行了攻击者预设的恶意代码。</p></blockquote><h3 id="解释浏览器为什么成为客户端攻击的重点。"><a href="#解释浏览器为什么成为客户端攻击的重点。" class="headerlink" title="解释浏览器为什么成为客户端攻击的重点。"></a>解释浏览器为什么成为客户端攻击的重点。</h3><blockquote><p>​浏览器是现代计算机中最广泛使用的应用程序之一，用户使用浏览器访问互联网上的各种服务和资源，包括网站、应用程序、视频、音频和文本等。浏览器的广泛使用和开放的特性使得它成为攻击者攻击用户的主要目标。</p><p>浏览器也存在一些安全缺陷，其中有，沙箱逃逸、SOP绕过、Cookie盗取等。</p><p>​1.沙箱逃逸：沙箱是将不可信代码限制在一个低权限范围内运行的环境。利用某种方式绕过沙箱获取访问敏感数据的权限，就可以达到沙箱逃逸的目的。</p><p>​2.SOP绕过：同源策略，是浏览器中最基本也是最核心的安全机制，负责页面之间的访问控制。最大的缺陷目前该策略是一个规范，并不是强制要求。</p><p>​3.Cookie盗取：Cookie存储的数据有时候非常重要。</p><p>对于浏览器的攻击，主要分为两大类：</p><p>​1.对浏览器本身的程序进行攻击。</p><p>​2.对浏览器内嵌第三方扩展或者是插件进行渗透攻击。</p><p>​此外，由于浏览器通常在互联网上运行，攻击者可以通过发送恶意代码或链接，通过互联网攻击数千甚至数百万的用户，这也使浏览器成为客户端攻击的主要目标之一。</p></blockquote><h3 id="简述浏览器攻击、扩展攻击和插件攻击的方法"><a href="#简述浏览器攻击、扩展攻击和插件攻击的方法" class="headerlink" title="简述浏览器攻击、扩展攻击和插件攻击的方法"></a>简述浏览器攻击、扩展攻击和插件攻击的方法</h3><blockquote><p>浏览器扩展（Extensions）和浏览器插件（Plugins）都是浏览器的功能增强组件，但两者有以下不同：</p><ol><li>功能：</li></ol><p>  浏览器扩展主要是用来<strong>增强浏览器功能</strong>，例如广告拦截、翻译、截屏等；</p><p>  浏览器插件主要是用来在<strong>浏览器中运行特定的应用程序</strong>，例如Adobe Flash、Java等插件。</p><ol start="2"><li><p>安全性：由于浏览器插件是以系统管理员权限运行的，因此安全性存在一定的风险；而浏览器扩展一般以普通用户权限运行，相对来说更加安全。</p></li><li><p>架构：浏览器插件的开发需要使用特定的API和SDK，如Adobe Flash、Java等；而浏览器扩展的开发则可以使用标准的Web技术，如HTML、CSS和JavaScript等。</p></li></ol><p>总之，两者的区别在于浏览器扩展更多地关注于浏览器的功能增强和用户体验，而浏览器插件更多地关注于提供特定的应用程序功能。</p><p><strong>浏览器攻击方法：</strong></p><ol><li><p>XSS攻击（跨站脚本攻击）：攻击者向网站中注入恶意脚本，当其他用户访问该网站时，恶意脚本会被执行，导致用户信息泄露或网站受到破坏。</p></li><li><p>CSRF攻击（跨站请求伪造攻击）：攻击者利用受害者已登录的身份，在受害者不知情的情况下发送恶意请求，以达到攻击目的。</p></li><li><p>Clickjacking攻击：攻击者将一个网站隐藏在一个透明的网页上，使得用户误以为是点击了某个按钮，但实际上点击的是隐藏网站的按钮，以此达到攻击目的。</p></li><li><p>钓鱼攻击：攻击者伪造一个网站或电子邮件，诱骗用户提供敏感信息，如用户名和密码。</p></li></ol><p><strong>扩展攻击方法：</strong></p><p>扩展（Extension）是浏览器提供的一种功能，通过添加扩展可以增强浏览器的功能。扩展攻击方法一般是通过恶意扩展来实现，如：</p><ol><li><p>假冒扩展：攻击者伪造一个扩展，通过类似于钓鱼攻击的方式诱骗用户下载和安装该扩展，以达到窃取用户信息或攻击网站的目的。</p></li><li><p>代码注入：攻击者将恶意代码注入到合法扩展中，当用户安装并运行该扩展时，恶意代码会被执行，以达到攻击目的。</p></li></ol><p><strong>插件攻击方法：</strong></p><p>插件（Plugin）是浏览器提供的一种插件式的扩展机制，插件攻击方法与扩展攻击类似，主要是通过恶意插件实现，如：</p><ol><li>假冒插件：攻击者伪造一个插件，通过类似于钓鱼攻击的方式诱骗用户下载和安装该插件，以达到窃取用户信息或攻击网站的目的。</li><li>代码注入：攻击者将恶意代码注入到合法插件中，当用户安装并运行该插件时，恶意代码会被执行，以达到攻击目的。</li></ol></blockquote><h3 id="简述实现HTTPs-降级为-HTTP-的方法。"><a href="#简述实现HTTPs-降级为-HTTP-的方法。" class="headerlink" title="简述实现HTTPs 降级为 HTTP 的方法。"></a>简述实现HTTPs 降级为 HTTP 的方法。</h3><blockquote><p>浏览器指纹获取，识别浏览器的平台和版本，识别唯一地标不同的浏览器，确定浏览器版本主要查看http请求首部，dom属性以及浏览器的独有特征，在侦查过程中，可能会遇到https的保护无法实施网络嗅探窃听。</p><p>阻止用户访问https站点，或者是通过其他方式吧用户转到网站的http板上。</p><p>一，截取网络数据并重写请求，二是在浏览器内部重写链接。</p><ol><li>SSLStrip</li></ol><p>SSLStrip攻击利用的是Web应用程序未正确配置的漏洞，可以将原本的HTTPs链接重定向到HTTP链接，使得HTTPs流量被劫持到HTTP链接上，并将传输的敏感信息暴露给攻击者。</p><ol><li>HTTPS连接劫持</li></ol><p>HTTPS连接劫持攻击是利用攻击者控制的代理服务器来中间人攻击通信的另一种方式。攻击者通过伪造CA证书或通过自签名证书来欺骗客户端与代理服务器建立连接，然后将请求转发给服务器，获取服务器响应后再将响应转发给客户端，从而达到窃取或篡改通信内容的目的。</p><p>为了避免HTTPs降级攻击，建议采用以下方法：</p><ol><li>在应用程序的代码中进行严格的输入验证和输出编码，以避免注入和跨站点脚本等攻击。</li><li>使用HSTS（HTTP Strict Transport Security）协议，要求客户端始终使用HTTPs连接，以防止HTTPs被降级为HTTP。</li><li>采用HTTP Public Key Pinning（HPKP）技术，指定可信任的证书机构，避免中间人攻击。</li><li>避免在Web应用程序中使用混合内容（HTTP和HTTPs混合），以避免攻击者能够通过劫持HTTP链接来篡改HTTPs链接。</li></ol></blockquote><h3 id="简述文件格式漏洞利用原理。"><a href="#简述文件格式漏洞利用原理。" class="headerlink" title="简述文件格式漏洞利用原理。"></a>简述文件格式漏洞利用原理。</h3><blockquote><p>​攻击者一般会恶意构造符合正常格式的畸形文件进行漏洞利用，攻击者构造恶意文件并将其发送给受害者，当受害者尝试打开或解析这个文件时，恶意代码就会被执行，从而导致攻击成功。</p></blockquote><h3 id="简述文件格式漏洞的挖掘方法。"><a href="#简述文件格式漏洞的挖掘方法。" class="headerlink" title="简述文件格式漏洞的挖掘方法。"></a>简述文件格式漏洞的挖掘方法。</h3><blockquote><p>文件格式漏洞指的是利用文件格式解析器（如图像解码器、PDF阅读器等）的漏洞来进行攻击的一类漏洞。挖掘文件格式漏洞的方法一般包括以下几个步骤：</p><ol><li>寻找目标：选择常用的文件格式，如图片、视频、音频、文档等，并寻找常用的解析器。可以通过搜索常见的文件格式解析器的源代码、官方文档、博客等途径来寻找目标。</li><li>学习文件格式：深入学习目标文件格式的结构、特征、解析方式等，理解其内部原理。可以通过查看文档、相关论文、源代码等途径来学习。</li><li>构造恶意文件：利用对文件格式的深入理解，构造出一个带有漏洞的文件，并在其中嵌入恶意代码。</li><li>寻找漏洞：使用工具或手工对构造的恶意文件进行解析，寻找文件格式解析器中的漏洞。</li><li>利用漏洞：在找到漏洞后，可以利用它来进行攻击，如实现代码执行、绕过安全机制、读取敏感信息等。</li><li>提交漏洞报告：将发现的漏洞报告给厂商或开发者，并与其进行合作修复漏洞。</li></ol><p>需要注意的是，挖掘文件格式漏洞需要对目标文件格式有深入的理解，同时需要具备较强的代码审计能力和漏洞利用能力。在挖掘过程中，需要严格遵守法律法规，不得进行非法攻击和窃取敏感信息等行为。</p></blockquote><h3 id="什么是-HID-如何利用-HID进行USB-设备渗透"><a href="#什么是-HID-如何利用-HID进行USB-设备渗透" class="headerlink" title="什么是 HID?如何利用 HID进行USB 设备渗透?"></a>什么是 HID?如何利用 HID进行USB 设备渗透?</h3><blockquote><p>​HID（Human Interface Device）是指人机接口设备，如键盘、鼠标、游戏手柄等。由于HID设备在操作系统上通常被当作输入设备来对待，因此可以利用HID设备进行USB设备渗透，将恶意代码注入到目标计算机上，从而实现攻击目的。</p><p>​一种常见的利用HID进行USB设备渗透的方法是利用Rubber Ducky这样的工具。Rubber Ducky是一种外形类似USB闪存盘的HID设备，可以被当作键盘使用。攻击者将恶意脚本预先编写好并存储在Rubber Ducky中，然后将Rubber Ducky插入目标计算机，Rubber Ducky就会自动模拟键盘输入，执行恶意脚本。</p><p>​例如，攻击者可以编写一个恶意脚本，用于窃取目标计算机上的敏感信息，并将该脚本存储在Rubber Ducky中。在攻击时，攻击者将Rubber Ducky插入目标计算机，Rubber Ducky就会自动模拟键盘输入，将恶意脚本输入到目标计算机上。恶意脚本会执行一系列命令，从而窃取敏感信息并将其发送给攻击者控制的服务器。由于Rubber Ducky被当作键盘使用，因此其攻击效果与真实的键盘输入无异，能够绕过大多数安全软件的检测。</p></blockquote><h3 id="解释BadUSB渗透的思想。"><a href="#解释BadUSB渗透的思想。" class="headerlink" title="解释BadUSB渗透的思想。"></a>解释BadUSB渗透的思想。</h3><blockquote><p>​BadUSB渗透是一种利用USB设备固件漏洞的攻击方式，它的基本思想是通过修改USB设备的固件代码，使得USB设备在插入计算机时可以实现隐藏操作、破解计算机密码、安装恶意软件等一系列攻击行为。</p><p>​具体来说，BadUSB攻击者需要了解目标计算机的操作系统及USB设备的驱动程序等相关信息，针对目标设备的固件漏洞进行开发和定制，制作出恶意固件进行篡改，然后通过替换掉正常USB设备的固件或直接生产带有恶意固件的USB设备来进行攻击。</p></blockquote><h1 id="第七章：网络设备渗透测试"><a href="#第七章：网络设备渗透测试" class="headerlink" title="第七章：网络设备渗透测试"></a>第七章：网络设备渗透测试</h1><h3 id="简述网络分层。"><a href="#简述网络分层。" class="headerlink" title="简述网络分层。"></a>简述网络分层。</h3><blockquote><p>1.核心层</p><p>核心层是骨干网，提供高容错性，并尽量以最小的延迟处理大量流量。</p><p>2.分发层</p><p>分发层位于骨干网和终端用户LAN之间，是网络中实现控制功能的部分</p><p>3.访问层</p><p>访问层包括用户工作站、服务器、交换机以及它们之间连接的访问点</p></blockquote><h3 id="简述网络安全特征。"><a href="#简述网络安全特征。" class="headerlink" title="简述网络安全特征。"></a>简述网络安全特征。</h3><blockquote><p>对网络设备进行安全加固可以减少攻击者的攻击机会，如果设备本身存在安全上的脆弱性，往往会成为攻击目标，为了确保网络的安全运行，网络设备需要满足一定的安全特征。</p><p>1.路由器的安全特征</p><ol><li>访问控制：路由器应该具备对用户进行身份验证、对用户进行访问控制的功能，以确保只有授权用户可以访问路由器。</li><li>防火墙：<strong>路由器应该支持基本的防火墙功能，可以检测和阻止未经授权的数据包流经路由器。</strong></li><li>加密和认证：路由器应该支持加密和认证功能，以保护路由器管理通道和网络流量的机密性和完整性。</li><li>远程管理：<strong>路由器应该支持远程管理功能，但是需要采取适当的安全措施，如加密、访问控制和认证等，以防止未经授权的用户访问和操纵路由器。</strong></li><li>日志记录和警报：<strong>路由器应该支持日志记录和警报功能，以便管理员能够监视和分析路由器的活动，并对异常情况进行及时响应。</strong></li><li>固件更新：路由器应该支持固件更新功能，以及时修复安全漏洞和缺陷，提高路由器的安全性和可靠性。</li><li>审计和合规性：路由器应该支持审计和合规性功能，以便管理员能够监视和报告路由器的安全性和合规性水平，确保网络安全和合规性要求得到满足。</li></ol><p>2.交换机的安全特征</p><ol><li>VLAN：<strong>交换机支持虚拟局域网(VLAN)技术，将物理网络划分为逻辑网络，可以实现不同VLAN之间的隔离和通信。</strong></li><li>认证与授权：交换机提供用户认证和授权服务，可以对接入的用户进行身份验证和权限控制，避免未授权的用户访问网络。</li><li>MAC地址过滤：交换机可以根据MAC地址过滤数据包，只允许已授权的MAC地址通过交换机转发数据包。</li><li>端口安全：交换机提供端口安全功能，可以限制每个端口的MAC地址数量，避免通过端口连接多个未授权设备。</li><li>网络监测：交换机支持网络监测功能，可以实时监测网络流量和带宽使用情况，及时发现网络异常。</li><li>防攻击：交换机可以对一些常见的攻击进行防御，如ARP欺骗、MAC地址欺骗等攻击。</li><li>交换机管理安全：<strong>交换机的管理接口需要设置安全口令，限制管理权限，避免未授权用户通过管理接口修改交换机配置。</strong></li></ol></blockquote><h3 id="简述网络设备的入侵动机。"><a href="#简述网络设备的入侵动机。" class="headerlink" title="简述网络设备的入侵动机。"></a>简述网络设备的入侵动机。</h3><blockquote><p>恶意控制路由器或交换机比针对工作站或服务器实施的攻击更为严重，因为攻击者可以在网络中获得一个极佳的切入点。</p><p>1.路由器的入侵目的</p><p>​(1)完整地映射内部网络，包括被动方式，如ARP(地址解析协议)表、路由表、流量嗅探和主动方式如 Telner和SSH(Secure ShelD)转发针对该网络的端口扫描。</p><p>​(2) 将任意类型的流量从控制主机转发给被攻击网络中的主机。</p><p>​(3)嗅探并修改穿过路由器的所有或特定流量。将流量从被控制的路由器镜像到指主机、或者简单地将这些流量重新路由穿过被控主机。</p><p>​(4) 迫使通常不会流经某台路由器的流量穿过它</p><p>​(5)建立一条到达被黑的网络的加密后门通道。</p><p>​(6)从被控制的路由器或者通过它攻击其他网络</p><p>​(7)注入 VoIP(Voice over Intemet Protocol)打免费电话，更改呼叫转移(只针对 VOIP网关和网守。</p><p>2.交换机的入侵目的</p><p>获得交换机的控制权可以实现以下目的:<br>(1)以被动和主动方式映射内部网络。<br>(2)嗅探穿过所有或特定交换端口的网络流量。<br>(3)滥用802.1d和802.1g 协议探交换网络，并迫使通常不会流经该交换机的流量穿过<br>(4)旁路虚拟 LAN(VLAN隔离(“跳跃的VLAN”)，并禁用MAC地址过滤。<br>(5)截断连接着不受欢迎的主机，如入侵检测系统传感器和监控台以及系统管理员的作站的端口。<br>(6)通过Telnet 或 Secure Shell(SSH)访问其他网络设备。<br>(7)通过滥用数据连接层(锁定交换机之后禁用STP从而导致Layer2环路)引起各种难处理的连接问题。</p><p>概括起来，黑客接管路由器、交换机或其他网络设备的原因包括:</p><ul><li>利用网络管理员的疏忽(他们未保护、更新或监控自己的网络设备:</li><li>当设备被入侵时，难以执行取证和正确的事件响应;</li><li>很容易利用不同的路由器和路由器链跳跃隐藏踪迹:</li><li>实现逻辑挑战，即发现并利用目标平台上设备的操作系统的弱点。</li></ul></blockquote><h3 id="网络设备入侵的方法有哪些"><a href="#网络设备入侵的方法有哪些" class="headerlink" title="网络设备入侵的方法有哪些?"></a>网络设备入侵的方法有哪些?</h3><blockquote><p>对网络设备的入侵方法包括入侵设备和协议攻击两类。</p><p>1.入侵设备</p><p>​网络设备也是具有特定功能的主机，因此，第 5、6章讨论的主机入侵方式同样适用于网络设备的入侵。</p><p>​(1)在配备大量网络设备的复杂网络中，最早是以明文方式保存口令的，后来采用了各种加密手段，使得攻击者即使得到了配置文件或者截获到了加密后的口令，也无法获得实际口令，但是通过密码破译或利用管理缺陷依然可以尝试获得口令。<br>​(2)攻击者先列举整个网络，然后挑选并精确地列举出特定的目标，再依据目标的漏洞发起漏洞利用攻击，获得并保持超级用户级别的访问，通过或从被入侵的网络设备发起进一步的毁坏性攻击。</p><p>2.协议攻击</p><p>​路由协议攻击可分为多种，常见的有利用叛变路由器进行攻击、利用流氓路由器进行攻击、利用假冒路由器进行攻击等。</p><p>​(1)利用叛变路由器进行攻击:叛变路由器(subverted roufer)由攻击者接管，用于取对目标网络的进一步控制。</p><p>​(2)利用流氓路由器进行攻击:流氓路电器rogle router)是指由攻击者非法部署在网络上的路由器，如果路由更新时缺乏身份验证机制，或者身份验证机制已被破坏，则这种流氓路由器可参与网络的路由选择，并能根据攻击者的需要更改路由。流氓路由器可以是运行通用操作系统并安装有路由软件的机器，攻击者也可以用 NemesisSpoof或IRPAS等数据包制作工具向网络中注入非法路由更新数据。<br>​(3)利用假冒路由器进行攻击:假冒路由器(masquerading router)是指通过假冒合法路由器身份而获得路由信息的流氓路由器。这种攻击可用以突破访问控制列表的限制，并可能涉及源路由攻击。<br>​攻击者还可以通过利用<strong>处理路由数据时的漏洞来接管路由器</strong>，虽然这并不是真正的路由攻击，但也是一种需要认真考虑的威胁。<br>​任何路由攻击的最终结果都是导致网络上的流量重定向。要实现这个目的，攻击者可进行如下操作:</p><ul><li>更改路由的量度(通常改为一个表示所插入恶意路由优先级的数值):</li><li>更改所通告网络的网络掩码，需要记住的是，路由的网络掩码越长、越具体，其优先级就越高;</li><li>更改策略路由、路由重分布和管理距离(很少见):</li><li>删除指向所涉及路由器的路由或引发拒绝服务(DOS)</li><li>完成路由器的攻击之后，对于目标的渗透攻击将因具有数据包流向控制的能力而具有更加有利的条件。</li></ul></blockquote><h3 id="简述路由器的漏洞及利用方法。"><a href="#简述路由器的漏洞及利用方法。" class="headerlink" title="简述路由器的漏洞及利用方法。"></a>简述路由器的漏洞及利用方法。</h3><blockquote><p>​路由器的安全漏洞分为三个不同层次的漏洞:<strong>软件操作系统安全漏洞</strong>(包括缓冲区溢出漏洞和客户端漏洞)、<strong>运行协议漏洞</strong>(包括网络服务和路由协议漏洞)和<strong>配置管理漏洞</strong>。</p><p><strong>1.缓冲区溢出漏洞</strong></p><p>路由器处理对象主要是各种报文，这些报文使用堆存储，一般路由器很少在函数中使用局部变量，即很少使用栈存储变量，因此，<strong>路由器缓冲区溢出以堆溢出为主</strong>。路由器通常使用其特有的堆管理和保护机制对堆块进行管理和安全保护，但是，近年来随着对此安全机制研究的深入，堆管理和保护机制的安全脆弱性也逐渐暴露出来，出现了绕过堆保护机制的堆溢出攻击。</p><p><strong>2、客户端漏洞</strong></p><p>​路由器之间为了完成状态协商及数据传输等，有时必须使路由器访问其他网上服务，这样攻击者可以利用其客户端漏洞。尤其是提供一个可扩展平台，随着需求和技术的发展有更多新功能引入路由器，导致情况变得更加严重。</p><p><strong>3.网络服务漏洞</strong></p><p>​路由器可以作为网络服务器和客户端。IOs 网络服务包括 HTTP 服务器(用于配置和控)、HTTPS服务器、telnet 和 SSH 远程访问、FTP和TFTP 服务器等，过去，人们己经》现HTTP、FIP和TFTP 服务中的内存溃漏洞，开发了相应的 POC程序。</p><p><strong>4.路由协议漏洞</strong></p><p>​路由协议制定时，环境是相当安全的，并只用于学术研究。路由器为完成其路由功能需要提供一些基本协议，包括路由协议通信(OSPF、ISIS、BGP、RIP)，以及网络支持服3如DHCP中继和IPv6路由发现，增加了被攻击概率。</p><p><strong>5.配置管理漏洞</strong></p><p>​网络管理员对设备的错误或不当配置也可能产生受攻击的漏洞。如默认的口令密码弱口令，开启了存在隐患的网络服务，如SNMPv1&#x2F;v2，配置了默认的Community stringCDP协议等。攻击者通过字典攻击技术，通过远程访问方式(TELNET、FTP、SSH、HTTPIHTTPs等)猜测和暴力破解路由器的用户名和口令，或者利用其他手段获得配置文件通过对口令破解得到用户名与口令，从而获得路由器的控制权限，远程控制与管理路由器，危害整个网络的安全性。<br>​对于一些具有无线网络功能的路由器，无线安全漏洞也被引入到路由中。</p><p><strong>路由器渗透方法</strong></p><p><strong>1，远程溢出攻击</strong></p><p>​远程溢出攻击是最为常用的一种方式，也是最重要的一种方式。通过远程溢出，攻击者可以直接获取管理员 Shell，实现了控制路由器的可能性。在正常情况下，堆保护机制可以有效地检测出堆溢出错误，主动重新启动系统以避免对系统造成更大的破坏。因此，精心构造的堆溢出攻击数据包可能会超过堆保护机制，以达到破坏或控制系统的目的。利用堆溢出攻击，只能导致路由器重新启动或拒绝服务攻击(DoS)。</p><p><strong>2.数据重定向攻击技术</strong></p><p>​IP 报文首部的可选项中有“源站选路”，如果选择要求按源站选路，则服务器在收到信息后会返回信息给这个源站(报文通过路由来返回来记录经过的路由)。源路由功能指定数据包必须经过的一条路径，这一功能包括两种类型的源路由选择。</p><p>​攻击者C进行源路由欺骗，伪装成B的IP 地址，给服务器A发送了一个包此时A收到包后发现要返回信息，正常的话因为发送栏地址是 B，应该返回给 B，但由于源路由信息记录了来时的路线，反推回去就把应该给 B 的信息给了 C，而A 没有意识到问题，B对此一无所知，C拿到了 B 才能拿到的信息。这样，通过IP 源路由欺骗，攻击者可以将敏喀信息重新定向到攻击者主机，实现对重要数据的截获分析</p><p>对路由器还可以实施ICMP 重定向攻击、RIP 重定向攻击、OSPF 重定向攻击。</p><p><strong>3.口令攻击</strong></p><p>​口令攻击尝试猜解路由器口令，继而控制路由器。通过远程访问方式(TELNET、FTPSSH、HTTP&#x2F;HTTPs 等)猜测和暴力破解路由器的用户名和口令，或者利用其他手段获得配置文件，通过对口令破解得到用户名与口令。由于对未知团体名的SNMP 请求不会产生任何响应，因此，对 SNMP 的字典攻击可以使用以下两种手段:一种是对路由器实施临时的UDP端口扫描:另一种是利用多个已知的团体名进行尝试扫描。也可采用口令暴力破解的方法实施口令攻击。</p><p><strong>4.DOS攻击</strong></p><p>​DOS攻击利用路由器的TCP连接漏洞发起该漏洞攻击者通过操纵一个TCP连接的状态，可迫使 TCP 连接保持在一个可能无限期存在的状态。如果有足够的 TCP 连接都被迫进入长期存在或不确定的状态下，受到攻击的系统上的资源可能会被消耗掉，进而达到攻击的目的。要实施 DOS 攻击，攻击者必须能够完成一个有漏洞的系统的TCP三次挥丰。</p><p>​针对路由器攻击技术和相应的安全防护技术方面的研究，对于网络的安全渗透性测试,积极采取防范措施对提高路由器的抗攻击性、健壮性具有重要意义。</p></blockquote><h3 id="简述交换机的漏洞及利用方法。"><a href="#简述交换机的漏洞及利用方法。" class="headerlink" title="简述交换机的漏洞及利用方法。"></a>简述交换机的漏洞及利用方法。</h3><blockquote><p>​网络交换机作为网络环境中重要的转发设备，在局域网络中占有极其重要的地位，因此成为攻击者入侵和病毒肆虐的重点对象。</p><p>MAC 地址、DHCP 应用、ARP 请求和SPANNINGTREE 协议都处在数据链路层，极易遭受欺骗攻击。</p><p>​对于交换机可以依次尝试中继威胁攻击、VTP 攻击、地址解析协议攻击、STP 攻击以及非法接入。</p><p><strong>1.中继威胁攻击</strong></p><p>​正常情况下，网络交换机上划分的 VLAN 具有隔离广播、在一定程度上保护网络安全的作用。在没有路由的情况下，一个 VLAN 上的计算机无法与另一个 VLAN 上的用户进行通信。<strong>VLAN中继威胁攻击充分利用了动态中继协议(Dynamic Trunk Protocol，DTP)攻者利用 DTP 冒充由网络交换机发送的正常报文，进而攻击此台计算机所连接的交换机。</strong>因此，如果网络交换机启动了中继功能，就会导致异常报文发送到被攻击的机器上,从而在不同的VLAN 中进行网络攻击。</p><p><strong>2.VTP攻击</strong></p><p>​VLAN中继协议(VLANTrunk Protocol，VTP)是一种管理协议，可以减少交换环境中的配置数量。就VTP而言，网络交换机可以是 VTP 服务器、VTP 客户端或VTP交换机。用户每次对工作于 VTP 服务器模式下的交换机进行配置改动时，无论是添加、修改还是移除VLAN，VTP配置版本号都会增加1，VTP 客户端看到配置版本号大于目前的版本号后就会与VTP服务器进行同步。于是,当攻击者发送VTP 消息到配置版本号高于当前的VTP服务器时，就会导致所有网络交换机都与恶意攻击者的计算机进行同步，从而把所有非默认的 VLAN从VLAN 数据库中移除出去，这样就可以进入其他每个用户所在的同一个VLAN 上.</p><p><strong>3.地址解析协议攻击</strong></p><p>​在网络传输中，往往不能仅仅通过IP 地址进行网络传输，因为目前大规模的网络泛滥IP地址已经远远不能够满足当前的需要，IP 已经完全没有办法定位到被使用的是哪一台机器。另外，由于目前大规模路由器、交换机的使用，虚拟IP 逐渐增多，为了进行通信只能依赖MAC 地址。地址解析协议(Address Resolution Protocol，ARP)就是首先将目标机器的IP 地址解析成为唯一的MAC 地址，然后ARP 会自动搜索IP 到MAC 的解析，并通过广播的形式进行请求的发送，这样所有的主机就都可以收到报文信息。于是，攻击者就可利用ARP 获取发送报文的信息流，采用欺骗方式连接上目标主机并进行通信，使目标主机出现大量的异常报文，导致网络交换机的瘫痪。</p><p><strong>4.STP攻击</strong></p><p>​生成树协议(Spanning Tree Protocol，STP)可以通过阻寨元余线路，消除交换环境中出现的回路。如果网络中有回路，网络广播就会在网络中反复发送，进而形成广播风暴导致整个网络崩溃。使用 STP 的所有网络交换机都可通过网桥协议数据单元(Bridge ProtocoData Unit，BPDU)来共享信息。网络交换机发送并接收这些 BPDU，以确定哪个网络交换机拥有最低的网桥 ID，这个拥有最低网桥 ID 的网络交换机就称为根网桥。由其他每个网络交换机确定返回根网桥的最佳路线(端口速度、可靠性最高的路径)，而把其他路径的端口设为阻塞模式。</p><p>​STP 威胁攻击就是恶意攻击者首先连接到一个网络交换机，然后设计一组 BPDU并发送给最低网桥ID，就可欺骗网络交换机导致 STP 重新收敛。由于 STP协议收敛速度较慢，在一定时间内会产生回路，容易导致网络崩溃。对于内网交换机，还可尝试将未经过授权的计算机接入到网络交换机端口，尝试进入到局域网内部，来测试内部网络存在的安全隐患。</p></blockquote><h3 id="简述防火墙的漏洞及利用方法。"><a href="#简述防火墙的漏洞及利用方法。" class="headerlink" title="简述防火墙的漏洞及利用方法。"></a>简述防火墙的漏洞及利用方法。</h3><blockquote><p>防火墙本身是安全设备，除了被攻击者规避之外(见 5.6.1小节)，同时自身也可能遭受到攻击。</p><p><strong>攻击面</strong></p><p>防火墙遭受攻击是因为存在以下缺陷和不足:</p><p>​(1)传统防火墙是一种被动防卫技术，它假设了网络安全的边界和服务，对内部的非法访问往往难以实施有效的控制。</p><p>​(2)防火墙无法防范通过防火墙以外的其他途径的攻击，这就对网络安全造成了极大的威胁。</p><p>​(3)防火墙无法彻底防范计算机病毒。尽管现在有些新的防火墙产品能够在数据流过时检测病毒，但聪明的攻击者仍然可以用很多方法把病毒程序包装起来以穿过防火墙。</p><p>​(4)防火墙不能防止内部网合法用户的不法行为和疏忽大意:无法禁止内部合法用户将敏感数据拷贝到软盘上，也不能防止掉电、网络断开等物理故障。</p><p>​(5)防火墙本身的设置也可能成为安全隐患。随着防火墙系统功能的日益强大和复杂，它对设置和使用者的要求也越来越高，因此必须进行正确、合理的设置，否则防火墙形同虚设。</p><p>防火墙的安全漏洞还应包括所承载的操作系统本身的漏洞。</p><p>防火墙渗透方法可以分为三类。</p><ul><li><p>防火墙探测渗透:探测在目标网络上安装的是何种防火墙系统，并且找出此防火墙系统允许哪些服务。</p></li><li><p>防火墙欺骗渗透:采取地址欺骗、TCP 序号攻击等手法绕过认证机制，破坏防火和内部网络。</p></li><li><p>防火墙主机渗透:寻找、利用防火墙系统实现和设计上的安洞，从而有舒对地发动攻击。</p></li></ul><p>渗透测试可以依次采用以上三类方法实施，针对不同的防火墙类型具体还有以下诊方法。</p><p>1.数据包伪装</p><p>​        对于包过滤型防火墙，可以利用实时数据包伪装渗透。对攻击数据包进行修饰伪装，修改数据包的源地址、目的地址和端口，模仿一些非法的数据包骗过防火墙的检测。</p><p>2.非授权访问</p><p>​对于代理型防火墙，可以采用非授权访问渗透。代理防火墙运行在应用层，其攻击的方法很多。可以利用安全漏洞获得 WinGate 的授权 Web 和 Socks 的访问，从而伪装成 WinGate 主机的身份对攻击目标发动攻击。</p><p>3，利用协议隧道</p><p>​对于监测型防火墙，可以利用协议隧道进行渗透。协议隧道是指将一种协议的数据封装进另一种协议的数据包中。隧道是一项通用的技，可以携带某种协议通过异质的网络。协议隧道的渗透思想类似VPN 的实现原理，攻击者将一些恶意的攻击数据包隐藏在些协议分组的头部,从而穿透防火墙系统对内部网络进行攻击</p><p>4、利用信任服务</p><p>​对于监测型防火瑞，还可以利用信任服务进行渗透。为了提高通过效率，并不是每一种服务都需要进行过滤。防火墙会开辟一些信任通道提高通过效率，例如80端口或 FTP 服务等。可以利用FTP-pasy 绕过防火墙认证的攻击FTP-pusv 攻击是针对防火墙实施入侵的重要手段之一，目前很多防火墙不能过滤这种攻击手段。</p><p>5.反弹木马攻击</p><p>​对于防火墙的攻击，还可以使用反弹木马的通用方法。<br>反弹木马利用防火墙对80端口的信任实现突破，攻击者设在内部网络的反弹木马定时地连接外部攻击者控制的主机，由于连接是从内郎发起的，防火墙都认为其是一个合法的连接，因此基本上防火墙的盲区。防火墙不能区分木马的连接和合法的连接。</p><p>6，旁路攻击</p><p>​旁路攻击(bypass)就是在内网与外部之间开辟一条新的数据通路。对于一些设计有缺陷或安全管理薄弱的内网，可能存在通过无线&#x2F;有线网络非法外联的情况(如图 7-3 所示)，通过发现这样的通路可以绕开防火墙</p><p>7.DDOS 攻击<br>    通过对防火墙的 DDOS 攻击阻塞防火墙的过滤。简单的防火墙不能跟踪 TCP 的状态，很容易受到拒绝服务攻击，一旦防火墙受到 DOS攻击，它可能会忙于处理而忽略了自己的过滤功能。</p></blockquote><h1 id="第八章：后渗透测试"><a href="#第八章：后渗透测试" class="headerlink" title="第八章：后渗透测试"></a>第八章：后渗透测试</h1><h3 id="什么是后渗透测试，它的目的是什么"><a href="#什么是后渗透测试，它的目的是什么" class="headerlink" title="什么是后渗透测试，它的目的是什么?"></a>什么是后渗透测试，它的目的是什么?</h3><blockquote><p>​后渗透测试攻击是相对于前期渗透测试而言的测试工作，具体是指渗透测试漏洞利用成功后的后续渗透行为，即获得系统权限后为了进一步深入测试目标的功能、最具价值资产而开展的高级渗透测试活动。</p><p>后渗透测试的目的可以概况为提供能够对客户组织造成最重要业务影响的攻击途径的验证和演示，并以此评估黑客攻击可能造成的危害和等级。</p></blockquote><h3 id="对“权利”与“权限”进行区别比较"><a href="#对“权利”与“权限”进行区别比较" class="headerlink" title="对“权利”与“权限”进行区别比较"></a>对“权利”与“权限”进行区别比较</h3><blockquote><p>权限源自计算机安全访问，是针对资源而言，，权利主要是针对用户而言，包含登陆权利，决定用户如何登陆计算机。特权则是一些列系统权力的总称。</p></blockquote><h3 id="简述后渗透测试的主要内容。"><a href="#简述后渗透测试的主要内容。" class="headerlink" title="简述后渗透测试的主要内容。"></a>简述后渗透测试的主要内容。</h3><blockquote><p><strong>权限维持和内网渗透</strong></p><p>权限维持是指攻击者在获取系统控制权之后，利用各种手段维持自己的权限，以确保自己能够持续地控制目标系统。权限维持的方式包括但不限于以下几种：</p><ol><li>注入恶意代码：攻击者可以将恶意代码注入到系统的某些组件中，以便在系统启动时自动运行，并维持攻击者的权限。</li><li>提权攻击：攻击者可以通过漏洞利用或其他手段提升自己的权限，以便更好地控制系统。</li><li>建立后门：攻击者可以在系统中留下后门，以便在以后的时间里能够再次进入系统。</li></ol><p>内网渗透是指攻击者在获取对某个系统的控制权之后，进一步深入目标网络，以获取更多的敏感信息或攻击机会。内网渗透的方式包括但不限于以下几种：</p><ol><li>横向渗透：攻击者可以利用已经获取的系统控制权，在目标网络中寻找其他易受攻击的系统，并进一步攻击这些系统。</li><li>密码攻击：攻击者可以通过暴力破解等手段获取其他系统的密码，从而进一步渗透网络。</li><li>社交工程：攻击者可以利用社交工程手段获取其他系统的访问权限，以便进一步控制网络。</li></ol></blockquote><h3 id="什么是-APT攻击-简述APT-攻击的检测难度"><a href="#什么是-APT攻击-简述APT-攻击的检测难度" class="headerlink" title="什么是 APT攻击?简述APT 攻击的检测难度"></a>什么是 APT攻击?简述APT 攻击的检测难度</h3><blockquote><p>APT攻击及高级可持续威胁攻击也称为定向威胁攻击，指某组织对特定对象展开的持续有效的攻击活动。</p><p>1.先进的攻击方法，攻击者为摄影防御者的入侵检测能力，变得攻击不确定</p><p>2.持续性攻击与隐藏，通常进入系统后采取隐藏策略进入休眠状态，待时机成熟后，才利用间隙与外界服务器交流。</p><p>3.长期驻留目标系统并保持系统的访问权限，有自启与痕迹自毁功能</p></blockquote><h3 id="简述网络攻击杀伤链与钻石模型。"><a href="#简述网络攻击杀伤链与钻石模型。" class="headerlink" title="简述网络攻击杀伤链与钻石模型。"></a>简述网络攻击杀伤链与钻石模型。</h3><blockquote><p><strong>网络攻击杀伤链</strong>（Cyber Kill Chain）是由美国网络安全公司Lockheed Martin提出的模型，用于描述网络攻击的不同阶段，包括情报收集、攻击准备、攻击执行、内部渗透、数据挖掘和窃取等环节。该模型提供了一个分析网络攻击的框架，可以帮助安全专家在不同阶段进行预防和应对。</p><p>网络攻击杀伤链包括以下7个阶段：</p><ol><li>侦察（Reconnaissance）：攻击者在这个阶段通过网络或其他方式获取目标系统的相关信息，包括IP地址、操作系统类型、应用程序、网络拓扑结构等。</li><li>入侵（Weaponization）：攻击者根据目标系统的信息和漏洞，选择相应的攻击载荷和工具，将攻击负载嵌入到可执行文件、文档、邮件等中，使其具有攻击性。</li><li>邮件传递（Delivery）：攻击者通过电子邮件、社交媒体、恶意广告等方式将攻击载荷发送给目标系统，实现攻击载荷的传递。</li><li>利用（Exploitation）：攻击者通过漏洞利用、社会工程学等手段，将攻击载荷注入到目标系统中，并实现远程代码执行、提权等操作。</li><li>安装（Installation）：攻击者在目标系统中安装后门、木马等恶意程序，用于控制系统、窃取敏感信息等。</li><li>操作（Command and Control）：攻击者通过已安装的后门、木马等恶意程序，远程控制目标系统，执行指令、窃取敏感信息等。</li><li>行动（Actions on Objectives）：攻击者在目标系统中完成所设定的目标，比如窃取敏感信息、破坏系统等。</li></ol><p><strong>钻石模型</strong>（Diamond Model）则是由美国网络安全公司Mandiant提出的模型，是一种网络攻击模型，用于描述网络攻击的四个方面：攻击者、受害者、工具和信息。这个模型基于四个问题：谁（Who）正在做什么（What）使用哪些工具（How）获取了什么（What），通过将这些问题组合成钻石形状的模型来描述网络攻击。</p><p>​用于描述网络攻击的四个要素：攻击者、目标、工具和技术。该模型认为，在任何一次网络攻击中，这四个要素都是密不可分的，彼此影响和支撑，分析这些要素的关系和变化可以帮助安全专家更好地理解攻击过程和实施相应的防范措施。</p><p>​在钻石模型中，攻击者和受害者分别位于模型的两个顶点，攻击工具和攻击信息分别位于另外两个顶点。攻击工具描述了攻击者使用的技术和工具，攻击信息描述了攻击者获取的信息。</p></blockquote><h3 id="简述后渗透测试的步骤。"><a href="#简述后渗透测试的步骤。" class="headerlink" title="简述后渗透测试的步骤。"></a>简述后渗透测试的步骤。</h3><blockquote><p>(1)打开代理: 通过代理访问目标，提升安全性;<br>(2) 绕过白名单:绕过白名单保护机制实现访问;<br>(3)提权:提升在目标系统里的访问权限:<br>(4)收集信息:收集目标的功能和最具有价值资产<br>(5)持续化控制:建立持续访问通道;<br>(6)检测与迁移:规避用户紧测</p></blockquote><h3 id="什么是提权-提权有哪些分类"><a href="#什么是提权-提权有哪些分类" class="headerlink" title="什么是提权?提权有哪些分类?"></a>什么是提权?提权有哪些分类?</h3><blockquote><p>提高权限简称提权，顾名思义，就是提高用户在系统中的权限。从低到高分为</p><p>1.应用后台权限</p><p>2.shell权限</p><p>3.服务器权限</p><p>4.域控权限</p></blockquote><h3 id="什么是持久化-持久化的方法有哪些"><a href="#什么是持久化-持久化的方法有哪些" class="headerlink" title="什么是持久化?持久化的方法有哪些?"></a>什么是持久化?持久化的方法有哪些?</h3><blockquote><p>​持久化的目的是实现对目标网络设备或节点系统的持续控制，这即是进行网络情报获取等攻击性网络空间行动所依赖的基础，也是开张积极防御繁殖威慑乃至实现网络展攻击的重要前提。</p><p>​持久化方法主要是干扰系统的正常启动逻辑，通过在服务器上放置一些后门来实现以后持久性的入侵，常见的方法包括Rootkit、Bootkit、注册表修改、WIM操作、定时任务、修改服务、劫持、创建自启动服务器、powershell、bitsadmin等</p></blockquote><h3 id="简述跳板攻击的过程。"><a href="#简述跳板攻击的过程。" class="headerlink" title="简述跳板攻击的过程。"></a>简述跳板攻击的过程。</h3><blockquote><p>为了更好地隐蔽自己，一些网络攻击者通常并不直接从自己的系统向目标发动攻击，而是先攻破若干中间系统，让他们称为“跳板”，再通过跳板系统完成攻击行动</p></blockquote><h3 id="简述端口转发。"><a href="#简述端口转发。" class="headerlink" title="简述端口转发。"></a>简述端口转发。</h3><blockquote><p>端口转发有时候被称为隧道，是安全壳为网络安全通信使用的一种方法。是将一个网络端口从一个网络节点转发到另一个网络节点的行为，他是一个外部用户从外部经过一个被激活的NAT路由器到达一个再私有内部IP地址上的一个端口</p></blockquote><h3 id="简述会话劫持的方法与步骤。"><a href="#简述会话劫持的方法与步骤。" class="headerlink" title="简述会话劫持的方法与步骤。"></a>简述会话劫持的方法与步骤。</h3><blockquote><p>会话劫持（Session Hijacking）指攻击者盗取合法用户的身份认证信息，利用这些信息欺骗系统，以合法用户的身份进行攻击行为的过程。常见的会话劫持方式有以下几种：</p><ol><li>IP 欺骗：攻击者通过欺骗网络中的路由器或者交换机，将合法用户的请求流量重定向到攻击者的计算机，从而劫持了用户的会话。</li><li>ARP 欺骗：攻击者通过 ARP 欺骗攻击，将网络中合法用户的请求流量重定向到攻击者的计算机，从而劫持了用户的会话。</li><li>XSS 攻击：攻击者通过在网页中植入恶意脚本，当用户访问该网页并执行脚本时，攻击者就可以获取到用户的身份认证信息，从而劫持了用户的会话。</li><li>会话劫持工具：攻击者使用专门的工具，如 Cookie Digger、Session Sniffer 等，来截获合法用户的 Cookie 或 Session ID，从而劫持用户的会话。</li></ol><p>会话劫持的步骤如下：</p><ol><li>攻击者通过各种方式获取到合法用户的会话信息，例如 Cookie 或 Session ID。</li><li>攻击者使用获取到的会话信息模拟用户的身份进行攻击，例如访问敏感页面、发送恶意请求等。</li><li>如果攻击成功，攻击者就可以获得被攻击系统的控制权限，并在其中进行恶意行为。</li><li>合法用户可能会在不知情的情况下继续使用被劫持的会话，导致攻击者可以持续访问被攻击系统。</li></ol><p>为了防止会话劫持，可以采取以下措施：</p><ol><li>使用 HTTPS：通过使用 HTTPS 协议，可以对用户和服务器之间的通信进行加密，从而避免会话信息被窃取。</li><li>增加 Session ID 的复杂度：增加 Session ID 的复杂度可以有效防止攻击者通过猜测 Session ID 来获取会话信息。</li><li>对输入进行验证：通过对用户的输入进行验证，可以有效防止 XSS 攻击等漏洞，从而减少会话劫持的风险。</li><li>使用双因素认证：使用双因素认证可以增加攻击者窃取会话信息的难度，从而提高系统的安全性。</li></ol></blockquote><h3 id="比较后渗透测试信息收集与前期渗透测试信息收集的异同点。"><a href="#比较后渗透测试信息收集与前期渗透测试信息收集的异同点。" class="headerlink" title="比较后渗透测试信息收集与前期渗透测试信息收集的异同点。"></a>比较后渗透测试信息收集与前期渗透测试信息收集的异同点。</h3><blockquote><p>​1.信息内容</p><p>​前期渗透测试主要关注的是目标系统本身的参数和信息。其目的是获得非授权进入目标系统的条件:后渗透测试在已经获得目标系统的部分非授权访问的条件下，根据渗透测试交互阶段的约定，按照任务要求主要收集最具价值和尝试安全保护的信息和资产。</p><ol start="2"><li><p>收集行为</p><p>  前期渗透测试考虑到网络的开放性，不用过于关注行为的隐蔽，因此可以采用主被动相结合的信息收集方法; 实施后渗透攻击，特别是 APT 渗透，其目的是最大程度的隐藏,存活越久才可以发现更多，因此多采取屏幕观看、键盘记录等方式，不多做主动行为(即使模拟用户行为也不做)，当然外传数据采用闲时传送、压缩、加密等手段是必不可少的。只有达到最终收割阶段的时候，各种方式才都会被采取，最大化窃取数据才是最终目的。</p></li><li><p>权限等级</p></li></ol><p> ​前期渗透获取的信息大部分都是在没有权限等级要求下就可以得到的公开信息;而后渗透测试获取的信息一般都是以某种权限等级为前提才能获得的非公开信息，因此在获取过程中，提权和密码破译手段的运用就显得十分重要。<br> 后渗透测试的信息收集是渗透方法与信息获取手段的综合应用。</p></blockquote><h3 id="后渗透测试收集的信息有哪些"><a href="#后渗透测试收集的信息有哪些" class="headerlink" title="后渗透测试收集的信息有哪些?"></a>后渗透测试收集的信息有哪些?</h3><blockquote><p>​由于已经完成了前期渗透，初步进入目标系统，具有一定的从接触外部无法触及信息的权限，因此可以再次执行信息收集的任务。<br>后渗透测试尝试获取的信息包括:</p><p>​(1)内网结构、参数、拓扑、漏洞等;<br>​(2)业务系统种类、等级、价值等;<br>​(3) 权限策略信息、管理员账号&#x2F;哈希值、令牌、cookie 等;<br>​(4)员工当前业务、工作习惯、个人信息等;<br>​(5)最具价值和尝试安全保护的信息和资产，以及其他信息等。</p></blockquote><h3 id="如何规避应用程序控制策略"><a href="#如何规避应用程序控制策略" class="headerlink" title="如何规避应用程序控制策略?"></a>如何规避应用程序控制策略?</h3><blockquote><p>(1) Ofice 宏:利用宏获得程序执行;<br>(2) dII&#x2F;CPL:将 dIl 重命名为 CPL 并运行;(3)Chm 后门捆绑:利用捆绑工具，将恶意程序捆到白名单进程中;<br>(4)Powershell;通过本地的 Powershell 运行程序,如禁用了 Powershell 则可以通过NET执行 powershell再运行;<br>(5)Regsvr32:通过执行 Regsvr32 修复程序;<br>(6)Regsvcs: Regasm 和 Regsvcs 都是用于向 COM 对象注册程序集文件的 Microsoft二进制文件。这些二进制文件可以在.NET 框架中找到，并且由于它们是可信的，可以绕过应用限制;<br>(7)Installutil:使用Istallutil将恶意程序安装为系统服务;<br>(8)关闭控制机制:在提权的基础上获得管理员权限，针对性地关闭部分限制策略<br>随着渗透技术的不断发展，还有很多规避方法。</p></blockquote><h3 id="什么是横向移动-横向移动的方法有哪些"><a href="#什么是横向移动-横向移动的方法有哪些" class="headerlink" title="什么是横向移动?横向移动的方法有哪些?"></a>什么是横向移动?横向移动的方法有哪些?</h3><blockquote><p>横向移动渗透攻击技术是复杂网络攻击中广泛使用的一种技术，特别是再APT中更加热衷使用的攻击技术。以被攻陷的系统为跳板访问其他主机，包括邮箱、共享文件夹或者是凭证信息在内的敏感信息。</p><p>1.基于域间信任关系欺骗方法：在内部子网中，为了方便管理一般会设域控制器，收起管理的主机默认对域控制器信任。</p><p>2.基于共享资源污染的方法：为了方便协同工作，通常会建立共享资源机制，共同对某些文件进行操作，形成交叉影响</p></blockquote><h3 id="简述网络取证。"><a href="#简述网络取证。" class="headerlink" title="简述网络取证。"></a>简述网络取证。</h3><blockquote><p>完成后渗透测试后，整个测试活动也就接近尾声了，为了记录测试过程，同时为测试结论提供佐证，需要对测试过程中采用的方法、收集的数据、渗透的手段进行取证。</p><p>计算机取证也称数据取证、电子取证、是对计算机犯罪证据的获取、保存、分析、出示、是以技术手段对计算机犯罪过程进行重建的一个过程。</p></blockquote><h1 id="第九章：社会工程学渗透测试"><a href="#第九章：社会工程学渗透测试" class="headerlink" title="第九章：社会工程学渗透测试"></a>第九章：社会工程学渗透测试</h1><h3 id="什么是社会工程-社会工程具有什么特征"><a href="#什么是社会工程-社会工程具有什么特征" class="headerlink" title="什么是社会工程?社会工程具有什么特征?"></a>什么是社会工程?社会工程具有什么特征?</h3><blockquote><p>​社会工程学是利用人性的弱点侦察、获取有价值信息的实践方法。社会工程学的方法的核心是使用心理学去唆使人们不经意地透露他们所知的信息或访问权限的过程。</p><p>从被攻击者的行为表现来分析，社会工程学攻击一般分为一致性、合作性、关联性的显著特征，</p><p>​一致性，当一个人处理一种群体环境下往往会收到群体的压力，个人的行动在满足群个体决定的行为时将会收到约束，呈现出与集体保持一致性的倾向。利用这种心理特征，攻击者可能会提出有引导性的请求行为，诱导受攻击者对攻击者的请求进行响应。</p><p>​合作性，攻击大部分是由攻击者以及被攻击者合作实现的，被攻击者在壁纸请的情况下直接或间接完成了对攻击者的配合。通常攻击者针对目标都会设计号攻击的模拟场景，引导收攻击者去主动配合攻击者一起合作完成某个事项。受攻击者主动顺从地配合攻击者完成行为，体现了社会工程学攻击的与人交互的合作性。</p><p>​关联性，社会工程学的成功实施取决于开展本次攻击的目标与个体之间的关联关系，关联性低的个体往往是开展社会工程学的目标。因为他们对攻击所获得的信息并非有很高的关联性，往往忽略了该类信息的重要性。</p><ol><li>一致性：指攻击者能够获得攻击目标的信任，并且让目标相信攻击者是合法的。攻击者通常会伪装成一个可信的个体或机构，比如伪装成银行客服或是IT管理员，以获取目标的信任。攻击者还会利用目标的心理，比如好奇心、恐惧心理等，来使目标放松警惕。</li><li>合作性：指攻击者能够获取目标的合作，让目标主动提供所需的信息或执行所需的行为。攻击者通常会使用诱骗、欺骗、威胁等手段来促使目标合作。</li><li>关联性：指攻击者能够将攻击行为与目标的实际情况联系起来，让目标认为攻击是合理的。攻击者通常会调查目标的相关信息，比如公司组织结构、工作流程等，从而使攻击行为看起来合理而不引起怀疑。</li></ol></blockquote><h3 id="社会工程渗透的方法有哪些"><a href="#社会工程渗透的方法有哪些" class="headerlink" title="社会工程渗透的方法有哪些?"></a>社会工程渗透的方法有哪些?</h3><blockquote><p><strong>技术方法有：在线攻击，电话攻击，非交互式技术，反向社会工程，学科交叉技术</strong></p><p>在线攻击有邮件利用、钓鱼技术、域欺骗技术。</p><p>电话攻击有直接索取、成控交换机、信息服务平台</p><p>非交互式有垃圾搜索、公共信息媒体、搜索引擎搜索</p><p>反向社会工程是迫使目标人员反过来向攻击者求助的手段。</p><p>学科交叉技术有组织行为学技术、安全心里盲区、网管心理分析</p><p><strong>实施方法有：冒名顶替，投桃报李、狐假虎威、诱骗重利、观点共鸣</strong></p><p>冒名顶替是指攻击人员假装成他人以获得对方的信任。</p><p>投桃报李是指通过利益交换的方式达成双方各自利益的行为</p><p>狐假虎威是冒充单位业务负责人的身份从而干预正常业务的做法就是狐假虎威。</p><p>诱骗重利基于人们的欲望心理，设计交换条件获得重要信息</p><p>观点共鸣，作为人，我们总是需要某种形式的社会关系，以分享思想、感情做法。由于这种强烈的感情和信任的错觉，人们可能在不经意间向对手透露了信息。</p></blockquote><h3 id="简述社会工程渗透的一般步骤。"><a href="#简述社会工程渗透的一般步骤。" class="headerlink" title="简述社会工程渗透的一般步骤。"></a>简述社会工程渗透的一般步骤。</h3><blockquote><p>情报收集：采用高级搜索工具收集目标人员的邮箱地址；利用社交网络收集目标人员的个人信息；识别目标使用的软件、参与的经营社交会议等、准确推测筛选目标人员。</p><p>识别漏洞：一旦选中人后，接下来就是跟对方开始建立信任关系和友谊，这样可以在不惊动对方的情况下截获对方的信息，保证整个行动的隐蔽性和保密性</p><p>规划攻击：制定计划，可以对目标直接发起攻击，也可利用电子辅助技术被动地攻击目标。从挖掘来的情报入口着手拟定攻击路径和方法。</p><p>执行攻击：保持足够的信息和耐心执行攻击，过程中根据对象的反应变化不断地调整攻击方案。攻击成功后，也宣告结束。</p></blockquote><h3 id="安全专家是如何对社会工程渗透进行防范的-如何进行突破"><a href="#安全专家是如何对社会工程渗透进行防范的-如何进行突破" class="headerlink" title="安全专家是如何对社会工程渗透进行防范的?如何进行突破?"></a>安全专家是如何对社会工程渗透进行防范的?如何进行突破?</h3><blockquote><p>1.建立完善的信息安全管理策略</p><p>2.对系统管理相关人员进行培训</p><p>3.建立安全事件应急响应小组</p><p>对于社会工程渗透的突破，安全专家需要不断地跟进新的攻击技术和手段，并采取相应的防范措施。</p><p>此外，他们还需要加强安全监控和漏洞管理，及时发现并修复系统中的漏洞。</p><p>同时，安全专家也可以采取一些主动的渗透测试，发现系统中存在的安全风险并加以修复</p></blockquote><h3 id="基于社交网络的社会工程渗透有哪些特点"><a href="#基于社交网络的社会工程渗透有哪些特点" class="headerlink" title="基于社交网络的社会工程渗透有哪些特点?"></a>基于社交网络的社会工程渗透有哪些特点?</h3><blockquote><p>信息传播是社交网络的核心功能之一，SNS信息传播有以下特点。</p><p>1.低成本传播</p><p>2.多维度的信息传播</p><p>3.即时互动</p><p>4.基于人际关系</p><p>5.裂变式</p><ul><li>隐蔽性强：攻击者可以伪装成目标用户的朋友、同事、客户等，利用社交网络上的各种功能和渠道，如私信、评论、转发、点赞等，来与目标用户建立信任关系，从而达到欺骗或诱导的目的。</li><li>成本低廉：攻击者不需要使用复杂的技术手段或工具，只需要利用社交网络上已有的信息和功能，就可以实施攻击。例如，通过搜索目标用户的个人资料、兴趣爱好、工作单位等，就可以制定针对性的攻击策略。</li><li>危害严重：攻击者可以通过社会工程渗透获取目标用户的敏感信息，如密码、银行卡号、身份证号等，或者诱使目标用户下载安装恶意软件，从而造成经济损失或隐私泄露。</li></ul></blockquote><h3 id="简述SET工具包的主要功能。"><a href="#简述SET工具包的主要功能。" class="headerlink" title="简述SET工具包的主要功能。"></a>简述SET工具包的主要功能。</h3><blockquote><p>社会工程工具包是一款先进的多功能的社会工程学计算机辅助工具包，它可以性质有效的用科幻段应用程序的漏洞获取目标的信息。</p><ol><li><p>伪造网站攻击（Website Attack Vectors）：可以伪造各种类型的恶意网站，包括钓鱼网站、恶意下载、社交工程网站等，用于诱骗目标用户进行点击或输入敏感信息。</p></li><li><p>伪造电子邮件攻击（Email Spoofing Attack Vectors）：可以伪造各种类型的电子邮件，包括欺诈邮件、恶意附件邮件、钓鱼邮件等，用于欺骗目标用户打开恶意文件或链接。</p></li><li><p>嵌入式攻击（Embedded Attack Vectors）：可以将各种类型的恶意代码嵌入到常见的文档、图像、音频和视频文件中，通过社交工程手段诱骗目标用户打开文件，从而实现攻击。</p></li><li><p>自定义攻击向量（Custom Attack Vectors）：可以自定义各种类型的攻击向量，包括USB攻击、QR码攻击、电话攻击、钓鱼攻击等。</p></li><li><p>集成第三方工具（Third Party Integrations）：可以集成第三方工具，如Metasploit、Nmap、BeEF等，增强攻击功能和效果。</p></li></ol></blockquote><h1 id="第十章：工控网络渗透测试"><a href="#第十章：工控网络渗透测试" class="headerlink" title="第十章：工控网络渗透测试"></a>第十章：工控网络渗透测试</h1><h3 id="简述SCADA网络的应用"><a href="#简述SCADA网络的应用" class="headerlink" title="简述SCADA网络的应用"></a>简述SCADA网络的应用</h3><blockquote><p>1.在电力系统的应用：作为能量管理系统EMS的最主要的子系统，具有信息完整、效率高、能正确掌握系统运行状态、决策快、能推断出系统故障状态等优势。</p><p>2.铁道电气化</p><p>3.输油管道，采集设备状态数据，监控提供预警保护。</p><p>4.工业自动化，自动化生产线组成包括控制单元、数据采集与监控、机器人传感器。</p></blockquote><h3 id="简述工控网络的结构。"><a href="#简述工控网络的结构。" class="headerlink" title="简述工控网络的结构。"></a>简述工控网络的结构。</h3><blockquote><p>系统结构：硬件（客户、服务器）、软件（多任务系统）、通信（内部外部IO三种）</p><ol><li>管理层：包括网络管理和控制设备管理等，主要负责对工控网络进行管理和监控。</li><li>数据中心层：包括数据库和服务器等，主要负责存储和处理工控系统产生的数据。</li><li>控制层：包括PLC（Programmable Logic Controller）、DCS（Distributed Control System）等，主要负责对生产过程进行控制和调度。</li><li>设备层：包括传感器、执行器等，主要负责对生产设备进行控制和监测。</li></ol></blockquote><h3 id="解释什么是梯形逻辑"><a href="#解释什么是梯形逻辑" class="headerlink" title="解释什么是梯形逻辑?"></a>解释什么是梯形逻辑?</h3><blockquote><p>梯形逻辑是一种编程语言，它通过基于继电器逻辑电路图的图形来代表程序<a href="https://zh.wikipedia.org/wiki/%E6%A2%AF%E5%BD%A2%E9%80%BB%E8%BE%91">1</a><a href="https://zh.wikipedia.org/zh-cn/%E6%A2%AF%E5%BD%A2%E9%80%BB%E8%BE%91">2</a>。它主要用于开发可编程逻辑控制器（PLC）的软件，用于工业控制应用<a href="https://zh.wikipedia.org/wiki/%E6%A2%AF%E5%BD%A2%E9%80%BB%E8%BE%91">1</a><a href="https://zh.wikipedia.org/zh-cn/%E6%A2%AF%E5%BD%A2%E9%80%BB%E8%BE%91">2</a>。梯形逻辑的程序看起来像一个一级一级的梯子，具有两条是指边和多个水平的梯级<a href="https://zh.wikipedia.org/wiki/%E6%A2%AF%E5%BD%A2%E9%80%BB%E8%BE%91">1</a><a href="https://zh.wikipedia.org/zh-cn/%E6%A2%AF%E5%BD%A2%E9%80%BB%E8%BE%91">2</a>。每个梯级都包含一个或多个输入条件和一个输出条件，当输入条件满足时，输出条件就会被激活<a href="https://blog.csdn.net/qq_34492170/article/details/120470308">3</a><a href="https://cloud.tencent.com/developer/article/1430688">4</a>。</p></blockquote><h3 id="工控网络的安全漏洞有哪些"><a href="#工控网络的安全漏洞有哪些" class="headerlink" title="工控网络的安全漏洞有哪些?"></a>工控网络的安全漏洞有哪些?</h3><blockquote><p>1.SCADA系统软件漏洞</p><p>2.操作系统漏洞</p><p>3.网络通信协议漏洞</p><p>4.安全策略与管理流程漏洞</p></blockquote><h3 id="简述震网病毒的入侵思路。"><a href="#简述震网病毒的入侵思路。" class="headerlink" title="简述震网病毒的入侵思路。"></a>简述震网病毒的入侵思路。</h3><blockquote><p>震网病毒入侵目标的整体传播思路是: 首先侵入位于互联网中主机然后感染U盘，利用微软的快捷方式文件解析漏洞MS0-046)传播到工业专用内部网络:接下来在内网中T通过 RPC 远程代码执行漏洞(MS08-067)、打印机后台远程服务中的远程代码执行漏洞(MS10-061)、计划任务服务限提升漏洞(MS10-092)Windows内核模式驱动程序权限提升漏洞(MS10-73)等，实现在内网主机之间的传播量后抵达安装有 WinCC系统的主机，修改其可编程逻辑控制器，劫持控制逻辑发送控制指令，使工业控制系统控制混乱，最终造成业务系统异常、核心数据泄露、停产停工等</p></blockquote><h3 id="简述工控网络渗透测试的主要步骤"><a href="#简述工控网络渗透测试的主要步骤" class="headerlink" title="简述工控网络渗透测试的主要步骤"></a>简述工控网络渗透测试的主要步骤</h3><blockquote><p>1.内网访问</p><p>2.目标分析</p><p>3.过程控制</p><ol><li>网络架构分析：对工控系统的物理和逻辑拓扑结构进行分析，包括网络设备、工控设备、通讯协议等。</li><li>服务识别和端口扫描：通过端口扫描工具扫描网络上开放的端口和服务，确定可以攻击的目标。</li><li>操作系统识别和漏洞扫描：通过漏洞扫描工具扫描网络设备和工控设备上的操作系统和应用程序是否存在已知漏洞。</li><li>无线网络渗透测试：如果工控网络中存在无线设备，则需要对其进行渗透测试。</li><li>嗅探和协议分析：对网络上的通信流量进行嗅探和协议分析，获取有价值的信息。</li><li>漏洞利用和提权：根据漏洞扫描结果，使用渗透测试工具对目标设备进行漏洞利用和提权。</li><li>后渗透测试：获取管理员权限后，进一步测试系统的安全性，包括数据泄漏、持久化攻击等。</li><li>覆盖痕迹：删除攻击痕迹，避免被检测到。</li></ol></blockquote><h1 id="第十一章：无线网络渗透测试"><a href="#第十一章：无线网络渗透测试" class="headerlink" title="第十一章：无线网络渗透测试"></a>第十一章：无线网络渗透测试</h1><h3 id="简述无线网络的发展。"><a href="#简述无线网络的发展。" class="headerlink" title="简述无线网络的发展。"></a>简述无线网络的发展。</h3><blockquote><ol><li>无线电通信时代（20世纪初至20世纪40年代）：这个阶段的无线通信主要用于无线电广播、电报和军事通信等。当时使用的技术主要是无线电波，主要特点是传输距离远但带宽小。</li><li>蜂窝移动通信时代（20世纪70年代至90年代）：这个阶段无线通信进入了商业化阶段，开始应用于移动通信。蜂窝移动通信网络可以分为1G、2G、3G、4G等几代，每一代都有自己的特点和技术。</li><li>无线局域网时代（20世纪90年代至今）：随着移动计算设备的发展，无线局域网技术开始应用于家庭和办公室等小范围网络的构建。最初的无线局域网标准是IEEE 802.11，后来又出现了一些变种，如802.11a、802.11b、802.11g、802.11n、802.11ac等。</li><li>无线城域网和广域网时代（21世纪初至今）：这个阶段主要是针对无线网络的覆盖范围和容量进行扩展。无线城域网和广域网的技术可以支持大规模的无线网络覆盖，例如城市Wi-Fi、无线城市和移动通信网络等。</li><li>5G时代（2019年至今）：5G是第五代移动通信技术，具有高带宽、低时延和大连接数的特点。5G网络的应用将更加广泛，涉及智能家居、智慧城市、自动驾驶等多个领域。</li></ol></blockquote><h3 id="分析无线网络的安全问题。"><a href="#分析无线网络的安全问题。" class="headerlink" title="分析无线网络的安全问题。"></a>分析无线网络的安全问题。</h3><blockquote><p>由于无线路由器的DNS设置被暴力篡改</p><p>由于公共场所无线网络的开放性</p><p>无线网络密码设置过于简单</p><p>无线网络的信号受外部电磁环境影响较大</p></blockquote><h3 id="无线网络的攻击方式有哪些"><a href="#无线网络的攻击方式有哪些" class="headerlink" title="无线网络的攻击方式有哪些?"></a>无线网络的攻击方式有哪些?</h3><blockquote><p>未经授权用户私自连接</p><p>网络病毒侵入</p><p>数据泄露</p><p>网络窃听隐患</p><p>流氓接入点</p><p>信号干扰</p></blockquote><h3 id="解释什么是战争驾驶。"><a href="#解释什么是战争驾驶。" class="headerlink" title="解释什么是战争驾驶。"></a>解释什么是战争驾驶。</h3><blockquote><p>“战争驾驶”（WarDriving）是一种利用车辆或其他移动设备，收集无线网络信息的行为。WarDriving的主要目的是为了发现无线网络的安全漏洞，包括未加密的Wi-Fi网络，弱密码和易受攻击的网络设备等。</p><p>WarDriving的步骤通常包括使用设备（如笔记本电脑、智能手机、GPS接收器等）和软件来扫描和记录无线网络的SSID、加密方式、信号强度和位置等信息。这些信息可以被黑客用来定位易受攻击的网络，并进行未经授权的访问或攻击。因此，WarDriving的行为在一定程度上是非法的，也可能会对网络安全造成威胁。</p></blockquote><h3 id="如何实现无线网络嗅探-比较它与有线网络嗅探的异同"><a href="#如何实现无线网络嗅探-比较它与有线网络嗅探的异同" class="headerlink" title="如何实现无线网络嗅探?比较它与有线网络嗅探的异同"></a>如何实现无线网络嗅探?比较它与有线网络嗅探的异同</h3><blockquote><p>​无线网络嗅探指的是通过一定的技术手段，监控和捕获无线网络中的数据流量和信号，并对其进行分析，以了解网络的状态和性能，或者进行安全评估和攻击等行为。无线网络嗅探的主要目的是为了监控和管理无线网络，或者为了进行网络安全攻击和渗透测试等行为。</p><p>​与有线网络嗅探不同的是，无线网络嗅探需要对无线信号进行抓取和解码，并对无线协议进行深入分析。由于无线信号的传输受到环境、干扰等因素的影响，因此无线网络嗅探的难度较大，需要使用专门的无线嗅探设备和软件来实现。此外，无线网络嗅探涉及到的安全问题也比有线网络更加复杂和敏感，需要采取更加严格和细致的安全措施和防护策略。</p><p>​实现无线网络嗅探的常用工具有Wireshark、Airodump-ng、Kismet等。这些工具可以在无线网络中捕获数据包并对其进行分析，以获得无线网络中的信息。</p><p>与有线网络嗅探相比，无线网络嗅探存在以下几个异同点：</p><p>相同点：</p><ul><li>都可以用于捕获网络中的数据包并进行分析。</li><li>都需要特殊的工具和技能。</li></ul><p>不同点：</p><ul><li>无线网络嗅探需要使用无线网卡，而有线网络嗅探则需要使用有线网卡。</li><li>无线网络嗅探受到无线信号的干扰和传播距离的限制，有时可能无法捕获到所有数据包。而有线网络嗅探则不会受到这些限制。</li><li>由于无线网络是广播信道，因此所有无线数据包都可以在物理层面上被任何拥有无线网卡的设备所接收到。这意味着任何拥有无线网卡的设备都可以进行无线网络嗅探。而有线网络只能被物理连接到网络中的设备所接收到。</li></ul><p>总的来说，无线网络嗅探与有线网络嗅探在原理上是相似的，但在具体实现和应用上存在较大的区别。</p></blockquote><h3 id="如何进行电磁信息的泄露与复现"><a href="#如何进行电磁信息的泄露与复现" class="headerlink" title="如何进行电磁信息的泄露与复现"></a>如何进行电磁信息的泄露与复现</h3><blockquote><ol><li>环境准备：需要一些专业的设备，如电磁信号接收器和分析软件等。</li><li>收集信息：使用电磁信号接收器，可以获取目标设备发出的电磁信号，比如无线电信号、辐射信号等。收集到的信号可以保存到文件中，作为后续分析的数据源。</li><li>信号分析：对收集到的信号进行分析，找出其中有用的信息，如通信内容、加密算法等。可以使用专业的分析软件，如Wireshark等。</li><li>信息重现：根据分析结果，重现目标设备的行为，比如复制加密密钥、仿造无线电信号等。</li></ol></blockquote><h3 id="简述WEP密钥破解过程。"><a href="#简述WEP密钥破解过程。" class="headerlink" title="简述WEP密钥破解过程。"></a>简述WEP密钥破解过程。</h3><blockquote><p>WEP共享密钥猜测 密钥破解是指获得数据并通过暴力译码或FMS译码攻击来复原WEP密钥。</p><p>WEP（Wired Equivalent Privacy）是无线局域网（WLAN）安全的一种加密方式，它已经被更加安全的加密方式WPA和WPA2所取代。WEP加密方式使用一个固定的密钥来对数据进行加密和解密。下面是WEP密钥破解的基本过程：</p><ol><li>收集数据包：通过无线网络接收器在信道上监听数据包并捕获WEP加密的数据包。</li><li>识别有效数据包：使用特殊工具或软件来过滤和识别有效的数据包。有效的数据包通常包含一个被攻击者发送的明文（未加密）数据，如ARP请求等。</li><li>破解WEP密钥：攻击者利用软件工具对WEP加密算法进行攻击，可以使用现成的工具，如Aircrack-ng、Airsnort等，或者自己编写代码进行攻击。攻击方式主要有两种：基于已知的密钥流攻击和基于弱IV攻击。基于已知的密钥流攻击是指攻击者拥有一部分密钥流并通过分析密钥流生成算法来破解整个密钥。基于弱IV攻击是指攻击者寻找WEP加密中使用的弱IV（初始化向量）并利用其漏洞进行破解。攻击者可以通过重复发送相同的数据包来收集大量的数据包并破解密钥。</li><li>获取网络访问权：一旦攻击者破解了WEP密钥，他们就可以使用网络资源，并嗅探网络中的数据流量来获取敏感信息。</li></ol><p>需要注意的是，WEP加密方式已经被证明非常不安全，并且易于攻击。因此，建议使用更加安全的加密方式，如WPA和WPA2。</p></blockquote><h3 id="如何进行无线网络授权攻击"><a href="#如何进行无线网络授权攻击" class="headerlink" title="如何进行无线网络授权攻击?"></a>如何进行无线网络授权攻击?</h3><blockquote><p>入侵者可以使用授权攻击来窃取合法用户的身份和机密信息，并进入私人网络和服务。</p><ol><li>伪造MAC地址：攻击者可以使用MAC地址欺骗的方式来伪造合法设备的MAC地址，以获取访问控制列表中的访问权限。攻击者可以使用工具来进行MAC地址伪造，如SpoofMAC等。</li><li>ARP欺骗：攻击者可以使用ARP欺骗的方式来获取网络访问权限。攻击者向目标设备发送伪造的ARP数据包，将目标设备的IP地址映射到攻击者的MAC地址上。攻击者可以使用工具来进行ARP欺骗，如Ettercap等。</li><li>欺骗用户：攻击者可以通过社交工程的方式来欺骗用户，以获取用户的登录信息。攻击者可以发送钓鱼邮件、伪造网站等方式来欺骗用户，以获取用户的账号密码等信息。</li><li>破解密码：攻击者可以使用破解工具来破解无线网络密码，以获取网络访问权限。常见的破解工具包括Aircrack-ng、Hashcat等。</li><li>具体的技术点</li></ol><ul><li>MAC地址欺骗：攻击者检测到授权设备上的网络适配器MAC地址，企图冒充授权设备建立新连接<a href="https://bing.com/search?q=%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E6%8E%88%E6%9D%83%E6%94%BB%E5%87%BB">1</a>。</li><li>帧欺骗（又叫帧注入）：攻击者发送看似来自合法发送者的恶意数据帧<a href="https://bing.com/search?q=%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E6%8E%88%E6%9D%83%E6%94%BB%E5%87%BB">1</a>。</li><li>IP欺骗：攻击者使用篡改过的IP数据包来隐藏数据包的真实来源<a href="https://bing.com/search?q=%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E6%8E%88%E6%9D%83%E6%94%BB%E5%87%BB">1</a>。</li><li>数据重放：攻击者捕获无线传输的数据，篡改传输内容，并将篡改后的内容重新传输给目标系统<a href="https://bing.com/search?q=%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E6%8E%88%E6%9D%83%E6%94%BB%E5%87%BB">1</a>。</li><li>身份验证重放：攻击者捕获用户之间的身份验证交换内容，并在攻击中重新使用这些交换内容<a href="https://bing.com/search?q=%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E6%8E%88%E6%9D%83%E6%94%BB%E5%87%BB">1</a>。</li><li><a href="https://baijiahao.baidu.com/s?id=1752714725580170329">非法接入点：攻击者将任何未经授权的接入点连接到网络，从而访问网络中的应用和数据</a><a href="https://baijiahao.baidu.com/s?id=1752714725580170329">2</a><a href="http://www.cnetsec.com/dfaq_wordpress/?p=39118">3</a>。</li><li><a href="https://baijiahao.baidu.com/s?id=1752714725580170329">无线网络钓鱼（又叫双面恶魔）：攻击者设置一个与目标网络类似或相同名称和配置的假冒接入点，诱使用户连接并窃取其敏感信息</a><a href="https://baijiahao.baidu.com/s?id=1752714725580170329">2</a><a href="http://www.cnetsec.com/dfaq_wordpress/?p=39118">3</a>。</li></ul></blockquote><h3 id="简述如何进行蓝牙渗透测试。"><a href="#简述如何进行蓝牙渗透测试。" class="headerlink" title="简述如何进行蓝牙渗透测试。"></a>简述如何进行蓝牙渗透测试。</h3><blockquote><ol><li>收集目标蓝牙设备的信息：包括设备类型、蓝牙地址、制造商、服务、协议等信息。</li><li>扫描目标蓝牙设备：使用蓝牙扫描工具扫描周围的蓝牙设备，并记录它们的MAC地址和服务信息。</li><li>获取目标蓝牙设备的服务信息：使用蓝牙扫描工具获取目标蓝牙设备的服务信息，包括服务名称、服务UUID、端口号等信息。</li><li>尝试连接目标蓝牙设备：使用蓝牙连接工具尝试连接目标蓝牙设备，并进行身份验证和授权操作。</li><li>分析蓝牙通信协议：对目标蓝牙设备和应用进行分析，了解其通信协议和数据格式，并尝试寻找漏洞。</li><li>利用蓝牙漏洞进行攻击：根据分析结果，利用蓝牙漏洞进行攻击，例如通过蓝牙进行远程代码执行、篡改蓝牙通信数据、获取设备敏感信息等。</li><li>渗透测试报告撰写：根据渗透测试结果，编写渗透测试报告，并提出相应的修复建议。</li></ol></blockquote><h3 id="简述移动终端的渗透测试"><a href="#简述移动终端的渗透测试" class="headerlink" title="简述移动终端的渗透测试"></a>简述移动终端的渗透测试</h3><blockquote><p><a href="https://www.freebuf.com/articles/terminal/235143.html">移动终端渗透测试是一种用来检测移动APP和相关系统安全性的方法。测试的目的是充分分析和挖掘移动APP和相关系统存在的安全问题，进而帮助其进行修复，提升安全性，保护用户信息</a><a href="https://www.freebuf.com/articles/terminal/235143.html">1</a>。</p><p><a href="https://www.freebuf.com/articles/terminal/235143.html">在移动APP架构中，面临安全威胁的目标&#x2F;路径主要有三个，它们分别是：移动APP、数据传输和服务端</a></p></blockquote><blockquote><ol><li>信息收集：获取目标设备的相关信息，如操作系统版本、安装应用程序、网络连接情况等。</li><li>应用分析：对目标设备上的应用程序进行分析，包括反编译应用程序代码、检测应用程序漏洞等。</li><li>网络渗透测试：检测目标设备的网络漏洞，例如WiFi、蓝牙和NFC漏洞等。</li><li>攻击面评估：评估目标设备的攻击面，并分析其可能的攻击路径。</li><li>漏洞利用：利用已知或发现的漏洞对目标设备进行攻击，例如代码注入、应用程序漏洞利用等。</li><li>漏洞修复：对发现的漏洞进行修复，以提高目标设备的安全性。</li><li>报告编写：撰写渗透测试报告，包括发现的漏洞、攻击路径和修复建议等。</li></ol><p>移动终端渗透测试需要使用一些工具和技术，如反编译工具、网络分析工具、漏洞扫描器、代码注入工具等。同时，渗透测试人员需要对移动设备的操作系统、应用程序和通信协议有深入的了解。</p></blockquote><h1 id="第十二章：渗透测试自动化框架"><a href="#第十二章：渗透测试自动化框架" class="headerlink" title="第十二章：渗透测试自动化框架"></a>第十二章：渗透测试自动化框架</h1><h3 id="什么是自动化测试"><a href="#什么是自动化测试" class="headerlink" title="什么是自动化测试?"></a>什么是自动化测试?</h3><blockquote><p>​自动化测试是执行某种程序设计语言编制的自动测试程序，控制被测程序的执行，模拟手动测试步骤，完成全自动或半自动测试。目的是提高软件测试的效率，降低人为因素带来的风险，从而达到提高应用软件测试质量的目的。</p></blockquote><h3 id="简述自动化测试的特点和局限性。"><a href="#简述自动化测试的特点和局限性。" class="headerlink" title="简述自动化测试的特点和局限性。"></a>简述自动化测试的特点和局限性。</h3><blockquote><p>特点：</p><p>​1.可以自动对程序的新版本执行回归测试</p><p>​2.可以执行一些手工测试困难或不可能进行的测试</p><p>​3.可以更好地利用资源。</p><p>​4.测试具有一致性和可重复性</p><p>​5.测试具有重用性</p><p>​6.可以更快地将软件推向市场</p><p>​7.可以增加软件信任度</p></blockquote><blockquote><p>局限性：</p><p>​1.手工测试比自动化测试发现的故障要多</p><p>​2.自动化测试不能提高测试的有效性</p><p>​3.自动化测试不具有想象力</p></blockquote><h3 id="简述安全自动化测试的特点和主要方法。"><a href="#简述安全自动化测试的特点和主要方法。" class="headerlink" title="简述安全自动化测试的特点和主要方法。"></a>简述安全自动化测试的特点和主要方法。</h3><blockquote><p>特点：</p><ol><li>提高效率：相对于手动测试，自动化测试可以提高测试效率和准确性。</li><li>重复性强：可以对同一功能进行反复测试，确保测试结果的一致性和可靠性。</li><li>覆盖面广：可以对系统的各个方面进行全面测试，包括功能、性能、安全等多个方面。</li><li>可追溯性高：可以记录测试的过程和结果，方便问题定位和分析。</li></ol></blockquote><blockquote><p>主要方法：</p><p>1.NIST SP800-115 信息安全测试技术指导方针是美国国家标准和技术研究所发布的关于安全测试技术的一份指导性文件。</p><p>2.ISSAF 信息系统安全评估框架是一个开源的安全测试和分析框架，按照逻辑顺序进行安全评估，主要关注技术和管理。</p><p>3.OSSTMN开源安全测试方法手册是一个被业界认可的用于安全测试和分析的国际标准。许多组织内部的日常安全评估中都是用该标准。分为四个关键部分，范围划定、通道、索引、向量，范围划定是收集目标资产，一个通道代表了一种与这些资产进行通信的方法和交互，这些通道组成了一个独立的安全组件的集合，在评估中需要对这些组件进行测试和验证。索引是一个非常游泳的方法，来将目标中的字长按照其特定标识进行分类。一个向量代表一个技术方向，审计人员可以在这个方向上对目标环境中的所有资产进行评估和分析。</p><p>4.PTES渗透测试执行标准是安全业界在渗透测试技术领域中正在开发的新标准，目标是对渗透测试进行重新定义。过程分为前期交互、情报收集、威胁模型、漏洞分析、渗透攻击、后渗透攻击、报告七个阶段。</p></blockquote><h3 id="自动化渗透测试框架有哪些分类，举例说明各类具有代表性的工具。"><a href="#自动化渗透测试框架有哪些分类，举例说明各类具有代表性的工具。" class="headerlink" title="自动化渗透测试框架有哪些分类，举例说明各类具有代表性的工具。"></a>自动化渗透测试框架有哪些分类，举例说明各类具有代表性的工具。</h3><blockquote><p>按分类分为综合型和专用型两种。</p><p>自动化渗透测试框架可以分为开源框架和商业框架两种类型。</p><p>开源框架：</p><ol><li>Metasploit Framework：是一款广泛使用的自动化渗透测试框架，支持多种操作系统和漏洞扫描、攻击等功能。</li><li>BeEF：是一个浏览器漏洞框架，用于检测浏览器和Web应用程序的漏洞，并进行攻击。</li><li>OWASP ZAP：是一款用于自动化测试Web应用程序安全性的工具，可以进行漏洞扫描、漏洞攻击等操作。</li><li>Nmap：是一个开源的网络探测和安全审计工具，可以进行端口扫描、服务探测、操作系统识别等操作，也可以用于渗透测试。</li><li>Arachni：是一款用于Web应用程序渗透测试的开源工具，可以检测多种Web应用程序漏洞。</li></ol><p>商业框架：</p><ol><li>Cobalt Strike：是一款商业的渗透测试框架，支持多种攻击向量和功能，包括漏洞扫描、攻击、命令和控制等。</li><li>Immunity Canvas：是一款商业的漏洞扫描和渗透测试框架，支持多种操作系统和漏洞利用技术。</li><li>Core Impact：是一款商业的渗透测试工具，提供了多种攻击向量和漏洞利用技术，包括漏洞扫描、攻击、权限提升、数据窃取等。</li><li>Rapid7 Nexpose：是一款商业的漏洞扫描工具，支持多种操作系统和应用程序，可以自动识别漏洞并提供解决方案。</li><li>SAINT Security Suite：是一款商业的渗透测试和漏洞扫描工具，支持多种漏洞扫描和攻击技术，包括SQL注入、XSS、CSRF等。</li></ol></blockquote><h3 id="MSF有哪些版本"><a href="#MSF有哪些版本" class="headerlink" title="MSF有哪些版本?"></a>MSF有哪些版本?</h3><blockquote><p>Metasploit是一个开源的安全漏洞检测框架，用于开发和执行安全漏洞测试、攻击等任务。Metasploit包含了多个工具和资源，支持渗透测试、漏洞检测和漏洞利用等各个阶段的安全测试任务。以下是Metasploit的主要组成部分：</p><ol><li>Exploit模块：包含多个漏洞利用模块，用于检测和利用各种软件和系统的漏洞，如操作系统漏洞、Web应用程序漏洞等。</li><li>Payload模块：用于生成各种类型的攻击载荷，如反向Shell、Meterpreter等，支持多种操作系统和平台。</li><li>Auxiliary模块：包含各种辅助工具和模块，如扫描器、密码破解器、DOS攻击工具等。</li><li>Post模块：用于在攻击成功后进行后续操作，如数据获取、命令执行等。</li></ol><p>Metasploit还提供了Web界面和命令行界面两种使用方式，支持自定义脚本和模块的开发和使用。Metasploit的特点包括可扩展性、可定制性、易于使用等，被广泛应用于安全测试、漏洞研究、恶意代码分析等领域。</p><p>Metasploit 有以下多种版本？</p><ol><li>Metasploit Framework：这是最常见的版本，是一个开源的渗透测试框架，可用于发现漏洞、开发自定义的漏洞利用和执行渗透测试。</li><li>Metasploit Pro：这是一个商业版本，提供了更多的功能，例如自动化渗透测试、风险评估、漏洞管理等。</li><li>Metasploit Express：这也是一个商业版本，与Metasploit Pro相比，功能较少，但价格也更便宜，适合小型企业使用。</li><li>Metasploit Community Edition：这是一个免费版本，功能相对较少，适合初学者使用。</li></ol></blockquote><h3 id="绘图描述MSF的框架结构。"><a href="#绘图描述MSF的框架结构。" class="headerlink" title="绘图描述MSF的框架结构。"></a>绘图描述MSF的框架结构。</h3><blockquote><img src="https://raw.githubusercontent.com/GiyaYon/mypicGo/master/MSF%E4%BD%93%E7%B3%BB%E6%A1%86%E6%9E%B6.jpg" style="zoom:80%;" /><center>MSF体系结构</center></blockquote><h3 id="MSF有哪些操作模式"><a href="#MSF有哪些操作模式" class="headerlink" title="MSF有哪些操作模式?"></a>MSF有哪些操作模式?</h3><blockquote><p>目前提供了GUI、控制台、命令行、Armitage四种操作模式供用户选择</p></blockquote><h3 id="简述MSF测试的基本流程。"><a href="#简述MSF测试的基本流程。" class="headerlink" title="简述MSF测试的基本流程。"></a>简述MSF测试的基本流程。</h3><blockquote><p>操作流程：</p><p>​根据MSF的操作手册，MSF 具有显著的模式化，主要流程包括创建项目、发现设备获取对主机的访问权限、控制会话、从目标主机收集证据、清除会话、生成报告等。<br>()创建项目:创建渗透测试的项目实例。<br>(2)发现设备:通过扫描发现主机信息。<br>(3)获取对主机的访问权限:利用 EXP 突破主机，获得访问权限。<br>(4) 控制会话:对主机实施控制，建立远程连接的会话。<br>(5)从目标主机收集证据:收集证据，证明安全权限的存在。<br>(6)清除会话:关闭会话连接，并清除会话记录和线索，以防被他人利用造成危害(7)生成报告:形成具有指导性的、规范的技术报告，供被测者参考，以改进系统MSF 操作流程如图 12-6 所示。12.4.3 小节将结合具体实例介绍MSF 的操作方法。</p><img src="https://raw.githubusercontent.com/GiyaYon/mypicGo/master/MSF%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" style="zoom:80%;" /><center>MSF操作流程图</center></blockquote><blockquote><p>基本流程：</p><p>第一步，在侦察的基础上，针对目标的漏洞情况发起漏洞攻击，并根据渗透目标需求选取适当的攻击载荷。</p><p>第二步，受到漏洞的影响，目标系统运行漏洞攻击代码，导致漏洞利用，再运行攻击载荷。</p><p>第三步，攻击载荷回连攻击主机，渗透测试人员提升权限并进行数据的的上传与下载。</p><p>第四步，测试人员还可以进行后渗透攻击手段，在目标系统内扩大渗透成果。</p></blockquote><h1 id="第十三章：渗透测试程序设计"><a href="#第十三章：渗透测试程序设计" class="headerlink" title="第十三章：渗透测试程序设计"></a>第十三章：渗透测试程序设计</h1><h3 id="比较各种主流编程语言，分析其用于渗透测试编程的优缺点"><a href="#比较各种主流编程语言，分析其用于渗透测试编程的优缺点" class="headerlink" title="比较各种主流编程语言，分析其用于渗透测试编程的优缺点"></a>比较各种主流编程语言，分析其用于渗透测试编程的优缺点</h3><blockquote><p>源码- 编译- 目标代码- 执行- 输出</p><p>源程序+输入- 解释器 -输出</p><p>​汇编语言：是一种用于电子计算机、微处理器、微控制器或其他可编程器件的符号语言。汇编语言对应着不同的机器语言指令集，通过编译过程转化成机器指令。相对于机器语言，它更便于记忆和书写，保留了机器语言高速度和高效率的特点，通常用于底层程序优化或硬件操作的场合。</p><ol><li>Python</li></ol><p>Python是渗透测试领域中最常用的编程语言之一，因为它具有简单易学、开源、功能强大、跨平台等优点。Python也有许多第三方库和模块可用于渗透测试，例如Scapy和Nmap等。</p><ol><li>Ruby</li></ol><p>Ruby是一种动态脚本语言，也是渗透测试人员经常使用的一种语言。Ruby具有类似Python的特点，易于学习、跨平台、灵活性高等优点。渗透测试领域中的Metasploit框架就是使用Ruby编写的。</p><ol><li>Java</li></ol><p>Java是一种跨平台的面向对象编程语言，因此具有广泛的应用范围。Java在渗透测试中也有其用途，例如编写Web应用程序、漏洞扫描工具等。Java的缺点是语法相对复杂，学习曲线较陡峭。</p><ol><li>C&#x2F;C++</li></ol><p>C&#x2F;C++是编写操作系统、驱动程序、网络协议栈等方面最常用的编程语言之一，因此在渗透测试中也有其用处。C&#x2F;C++具有运行速度快、效率高等优点，但需要更多的编程经验和技能。</p><p>总的来说，编程语言的选择取决于具体的场景和需求，需要考虑安全性、效率、易用性、可扩展性等多个方面的因素。在渗透测试中，Python和Ruby是最受欢迎的两种语言，但C&#x2F;C++和Java也有其特殊的用途。</p></blockquote><h3 id="简述黑客编程如何入手。"><a href="#简述黑客编程如何入手。" class="headerlink" title="简述黑客编程如何入手。"></a>简述黑客编程如何入手。</h3><blockquote><p>黑客的编程思想是围绕着如何实现非授权访问展开的，其编程思路可以概括为密码破译和漏洞利用两部分。</p><p>密码破译：对于黑客而言，密码分析工具可以分为暴力攻击，基于数学分析的方法和基于物理特性的分析方法三类</p><ol><li>暴力攻击：攻击者对截获到的密文尝试遍历所有可能的密钥，直到获得一种从密文到明文的可理解的转换。</li><li>基于数学分析方法：突破点在于密码算法本身，如果将密码看作从明文空间到密文空间的数学变换，那么可以通过数学分析方法建立铭文密文和密钥的数学方程或统计规律，从而实施攻击。</li><li>基于物理特性分析方法：当攻击者能够接触到密码设备时，便可以基于密码设备的物理特征，如不同的密码运算所消耗的时间和功耗不同来对密码进行攻击，这种方法称为边信道攻击或旁路攻击</li></ol><p>漏洞利用：EXP和Shellcode编程</p><ol><li>EXP可以以一段植入代码的形式出现，用于生成攻击性的网络数据包或者是其他形式的攻击性输入。往往针对漏洞而言。</li><li>Shellcode就是一种payload。在论文那种，作者演示了如何向进程中植入一段用于获得Shell代码，并将这段代码称为Shellcode。</li></ol></blockquote><h3 id="什么是进程劫持-什么是进程注入-比较两者的异同点。"><a href="#什么是进程劫持-什么是进程注入-比较两者的异同点。" class="headerlink" title="什么是进程劫持?什么是进程注入?比较两者的异同点。"></a>什么是进程劫持?什么是进程注入?比较两者的异同点。</h3><blockquote><p>​进程劫持和进程注入是渗透测试中常用的技术手段，它们的基本原理是利用系统进程间通信机制实现对目标进程的控制，但具体实现方式有所不同。</p><p>​进程劫持是指利用已有的进程，将恶意代码注入到进程的地址空间中，从而获得该进程的执行权限和操作权限，达到控制该进程的目的。进程劫持通常分为静态劫持和动态劫持两种方式。</p><p>​进程注入是指创建一个新的进程，并将恶意代码注入到新进程的地址空间中，使其执行恶意操作。进程注入通常分为远程注入和本地注入两种方式。</p><p>​两者的区别在于，进程劫持利用已有的进程执行恶意代码，而进程注入则是创建新的进程执行恶意代码。进程劫持的优势在于不需要创建新的进程，不会被杀毒软件拦截，但需要找到可以被劫持的进程，进程注入的优势在于可以在受害者不知情的情况下执行恶意代码，并且可以通过更改进程的执行路径绕过杀毒软件的检测。</p></blockquote><h3 id="结合函数调用过程，解释-EIP、ESP寄存器在进程注入过程中的作用"><a href="#结合函数调用过程，解释-EIP、ESP寄存器在进程注入过程中的作用" class="headerlink" title="结合函数调用过程，解释 EIP、ESP寄存器在进程注入过程中的作用"></a>结合函数调用过程，解释 EIP、ESP寄存器在进程注入过程中的作用</h3><blockquote><p>​在程序运行时，函数调用过程会将函数的返回地址存储在栈中。当函数执行完成后，程序会从栈中弹出返回地址，将程序流程返回到调用函数的位置。<strong>EIP寄存器</strong>则是记录当前代码执行的地址，它指向下一条将要执行的指令。</p><p>​在进程注入攻击中，攻击者通过向缓冲区中注入恶意代码，使得在程序执行到缓冲区的代码时，覆盖了栈中的返回地址，将其修改为攻击者构造的地址。当程序执行完缓冲区中的代码后，会弹出被篡改过的返回地址，将程序流程跳转到攻击者构造的地址处执行。此时，攻击者就可以控制程序的执行流程，执行任意的恶意代码。</p><p>​<strong>ESP寄存器</strong>则是记录当前栈顶的地址。在进程注入攻击中，攻击者通过向栈中注入恶意代码，需要考虑栈顶的位置。攻击者需要将恶意代码写入缓冲区，并将栈顶指针指向缓冲区中恶意代码的起始位置。这样，当程序从缓冲区中执行代码时，可以顺利地执行攻击者的恶意代码。</p></blockquote><h3 id="简述渗透测试程序在内存对抗方面采取的主要方法有哪些"><a href="#简述渗透测试程序在内存对抗方面采取的主要方法有哪些" class="headerlink" title="简述渗透测试程序在内存对抗方面采取的主要方法有哪些?"></a>简述渗透测试程序在内存对抗方面采取的主要方法有哪些?</h3><blockquote><p>缓冲区溢出保护策略</p><p>内存保护技术</p><p>内存攻击与防护博弈</p></blockquote><h3 id="什么是Shellcode-叙述-Shellcode-简单功能实现的过程"><a href="#什么是Shellcode-叙述-Shellcode-简单功能实现的过程" class="headerlink" title="什么是Shellcode? 叙述 Shellcode 简单功能实现的过程"></a>什么是Shellcode? 叙述 Shellcode 简单功能实现的过程</h3><blockquote><p>Shellcode是一段代码或填充数据（用来发送到服务器，并利用特定的漏洞诱发执行攻击代码），一般可以获取管理权限。</p></blockquote><blockquote><p>简单实现：</p><ul><li>直接编写十六进制操作码</li><li>采用C或者是Delphi这种高级语言编写程序，编译后，对其反汇编进而获得十六进制操作码</li><li>编写汇编程序，然后从二进制中提取十六进制操作码</li></ul><p>Shellcode 是高级程序设计语言的机器码形式，可以利用IDE 工具和调试功能将编译后的这段代码定位并抠出，这就是 Shellcode 的简单实现过程。下面在 Windows XP 平台上，以VC++6.0为编译工具,实现一段弹出窗口的 Shellcode 程序(由于 Win7 系统引入了 ASLR机制，因此本例不能在 Shellcode 中使用固定的内存地址，但是可以采用13.2.2小节介绍的方法进行对抗)。</p></blockquote><p>1.首先使用高级语言将 Shellcode 想要实现的功能进行设计，编写程序如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv l)</span></span><br><span class="line">&#123;</span><br><span class="line">    MessageBoxA(<span class="literal">NULL</span>，<span class="literal">NULL</span>，<span class="literal">NULL</span>，<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上述程序实现了弹出一个对话框的功能(这里仅作为演示，实际可以编写程序实现更复杂的功能，如关闭进程、打开网络端口、外连远程服务器等)。</span></span><br></pre></td></tr></table></figure><p>2.函数寻址</p><p>3.内联汇编改写</p><p>4.抠取Shellcode代码</p><p>5.Shellcode调用</p><h3 id="实现-Shellcode的通用化有哪些方法"><a href="#实现-Shellcode的通用化有哪些方法" class="headerlink" title="实现 Shellcode的通用化有哪些方法?"></a>实现 Shellcode的通用化有哪些方法?</h3><blockquote><p>通用化，就是通过代码的修改使Shellcode具有通用的特性，从而能够在大多数目标系统中运行。</p><p>1.自动定位Shellcode 起点</p><p>2.自动定位API</p><p>3.Shellcode精简</p></blockquote><h3 id="什么是免杀-简述常用免杀方法的原理与过程"><a href="#什么是免杀-简述常用免杀方法的原理与过程" class="headerlink" title="什么是免杀?简述常用免杀方法的原理与过程"></a>什么是免杀?简述常用免杀方法的原理与过程</h3><blockquote><p>​免杀（Evasion）指的是针对安全产品和安全技术的检测机制，通过修改、隐藏或混淆攻击载荷（payload）的方式来规避检测，从而使攻击载荷成功绕过安全防御机制，达到攻击目标的目的。大多数杀毒软件会对恶意软件进行识别，例如，使用特征码来识别恶意代码。这些特征码装载在杀毒引擎中，用来对磁盘和进程进行扫描，并寻找匹配对象。</p><p>​为了避开杀毒软件，攻击者可以针对受到杀毒软件保护的目标创建一个独一无二的攻击载荷，它不会与杀毒软件的任何特征码匹配。此外，当进行渗透攻击时，攻击载荷可以仅仅在内存中运行，不将任何数据写入到硬盘上，这样发起攻击并上传攻击载荷后大多数杀毒软件都无法检测出它已在目标系统上运行。所以，Shellcode 的编写需要采用免杀的方法进行预先处理。</p><p>​手动免杀:手动免杀是由程序员手工修改 Shellcode 代码来完成的，可以采用的方法包括特征码免杀、花指令免杀、加壳免杀等。</p><p>1.特征码免杀<br>Shellcode 被查杀，很有可能是存在杀毒软件所备注的恶意软件特征码。杀毒软件在对文件进行查杀的时候，会挑选文件内部的一句或者几句代码来作为识别病毒的方式，这种代码被称为病毒的特征码。如果将这个代码变更或者修改，就会使得杀毒软件无法对其查杀，这就是特征码免杀的原理。</p><p>2.花指令免杀</p><p>​花指令是源于汇编语言的一种技术，使用汇编语言的程序员为了避免他人窃取自己的思想或者保护软件中的小秘密，于是采用了一些干扰指令来对自己的程序进行类似加密的操作，后来被广泛采用。命名为“花指令”的意思就是如同花朵一样的指令，用它来吸引别人的注意力，而将真正的“果实”隐藏在后面。简而言之，花指令就是一段本身可以不存在的指令，对于程序的执行没有实质的影响，它存在的唯一目的就是掩盖程序中的细节。</p><p>3.加壳免杀</p><p>​加壳与特征码和花指令不同，它是通过编码的方式对 Shellcode 进行整体变形，也称为编码技术。Shellcode 的加壳技术源自病毒的加壳。病毒加壳躲避杀毒软件的查杀过程是首先对自身编码，若直接查看病毒文件的代码段会发现只有几条用于解码的指令，其余都是无效指令:当装入 PE 开始运行时，解码器将真正的代码指令还原出来并运行，实施破坏活动:杀毒软件将一种特征记录之后，病毒开发者只需要使用新的编码算法(密钥)重新对PE文件编码，即可躲过查杀。</p></blockquote><h3 id="解释什么是单一特征码和复合特征码。"><a href="#解释什么是单一特征码和复合特征码。" class="headerlink" title="解释什么是单一特征码和复合特征码。"></a>解释什么是单一特征码和复合特征码。</h3><blockquote><p>特征码按照识别的目标可以分为文件特征码和内存特征码;按照分布的数量可以分为单一文件特征码和复合文件特征码。</p><p>​文件特征码就是静态存储在程序代码中、被杀毒软件作为识别依据的代码。内存特征码是程序运行以后，以系统内存中的运行程序代码存在的、被杀毒软件作为识别依据的代码。</p><p>​单一特征码是一个程序中独立的一段代码，被杀毒软件作为识别标志(修改以后就可实现免杀)。复合特征码是一个程序中的多句代码，被杀毒软件作为识别标志(有一处不修改都不能免杀)。</p></blockquote><h3 id="简述特征码定位的原理"><a href="#简述特征码定位的原理" class="headerlink" title="简述特征码定位的原理"></a>简述特征码定位的原理</h3><blockquote><p>特征码定位。文件特征码定位的原理是先对免杀处理的文件进行分割，自动生成若干个文件(可以采用依次二分)，然后把这些文件中的部分代码过滤掉(用全 0 或全 1)，用杀毒软件查杀后观察查杀结果。</p><p>显然，存在两种情况，即被杀和不被杀。如果文件没有被杀掉，说明该生成文件中的特征代码已经被过滤掉了。也就是说，特征码就在过滤的部分导致现在的文件没有被杀。如果文件被杀掉，说明文件里面的特征码没有被破坏，因此被过滤部分没有完整的特征码。通过不断重复这种方法，即分块过滤、生成文件、杀毒、挑选免杀的文件特征码，逐步进行精确定位。</p></blockquote><h3 id="特征码有哪些修改方法"><a href="#特征码有哪些修改方法" class="headerlink" title="特征码有哪些修改方法?"></a>特征码有哪些修改方法?</h3><blockquote><p>​方法一:修改特征码的十六进制。<br>​修改方法:把特征码对应的十六进制改成数字加1或者减1。适用范围:一定要精确定位特征码对应的十六进制，修改后一定要测试文件能否正常使用。</p><p>​方法二，大小写替换。</p><p>​修改方法：转每码对应的内容是字符串的，大小写互换。适用范围，特征码对应的内容必须是字符中，否则不能成功。</p><p>​方法三，替换法。</p><p>​将特证码对应的汇编指令替换成相同或相似的其他指令。适用范圈，转证码中必须有可以替换的汇编指令(可以从 8080 汇编手册查询替换指令）</p><p>​方法四:顺序调换法。</p><p>​穆改方法:将特征码对应的指令顺序互换一下。适用范围:具有一定的局限性，代码互换后一定不能影响程序的正常执行。</p><p>​方法五:JMP法。<br>​修改方法:把特征码移到零区域，然后用一个JMP 又跳回来执行。适用范围:这是一种通用方法。</p><p>​方法六:移位法。</p><p>​修改方法:把定位到函数的特征码复制到NOP的0区域，然后JMP 回到原来 NOP的下一个地址。适用范围:这是一种通用方法。</p><p>内存查杀与文件查杀一样，因为杀毒软件的内存扫描原理与硬盘上的文件扫描原理是一样的，都是通过特征码比对的，只不过大多数反病毒公司的内存扫描与文件扫描采用的不是同一套特征码，这就导致一个病毒木马同时拥有两套特征码，必须要将它们全部破坏掉才能躲过反病毒软件的查杀。内存特征码的免杀与上述文件特征码的免杀类似。</p></blockquote><h3 id="简述-Shellcode-加壳的编码与解码过程"><a href="#简述-Shellcode-加壳的编码与解码过程" class="headerlink" title="简述 Shellcode 加壳的编码与解码过程"></a>简述 Shellcode 加壳的编码与解码过程</h3><blockquote><p>Shellcode加壳是指将Shellcode放入到一个小型的程序中，来欺骗杀毒软件和防火墙，使其不被检测和拦截。加壳的过程通常分为编码和解码两个阶段。</p><ol><li>编码过程：在编码过程中，需要先将原始的Shellcode进行加密和压缩，以提高安全性和运行效率。加密算法可以使用XOR、AES等对称加密算法，压缩算法可以使用LZ77、LZ78、Huffman编码等压缩算法。加密和压缩后的Shellcode被嵌入到一个小型的程序中，通常是一个精简的PE文件。这个程序会负责解密和解压Shellcode，并将其注入到进程中执行。</li><li>解码过程：在解码过程中，首先需要将加密和压缩后的Shellcode解密和解压缩回原始的Shellcode。解密和解压缩的过程是编码过程的逆过程，需要使用相同的算法和密钥。解密和解压缩后的Shellcode可以直接注入到进程中执行，也可以通过一定的技巧来绕过杀毒软件和防火墙的检测。</li></ol></blockquote><h3 id="简述基于MSF的渗透程序的二次开发过程"><a href="#简述基于MSF的渗透程序的二次开发过程" class="headerlink" title="简述基于MSF的渗透程序的二次开发过程"></a>简述基于MSF的渗透程序的二次开发过程</h3><blockquote><p>MSF的开发不是对其所有文件内容进行修改、替换，而主要是对MSF的模块、插件部分进行开发。</p><p><strong>创建新模块</strong></p><p>​在Metasploit中增加新创建的模块时，最快捷的方法是仿照现有的模块方式、使用MSF中提供的协议(例如，MSF中提供的socket 方法要比ruby中的socket 方法使用起来更加方便，meterpreter 不但实现了对 socket 进行的封装和扩展功能，而且增加了代理、SSH等特征，对于渗透应用的实现具有更好的支持)。模块写好后放在相应的目录，重新启动 consolc即可看到自己增加的模块部分。</p><p><strong>修改现有模块</strong></p><p>​MSF 开发时，还可以直接对现有模块进行修改、增删。依据文件名和相关描述，对于开放源码的exploit、payload 等模块，直接找到相应的文件进行编辑修改并保存，重新启动console 即可看到自己修改后的模块的效果。</p><p><strong>移植</strong></p><p>​MSF还支持用多种语言编写的模块移植入MSF，移植方法在13.4.3小节介绍。<br>​Windows或Linux 均提供上述类似方法，可以进行二次开发。<br>​MSF 二次开发环境为渗透测试个性化、漏洞研究和 Shellcode 编写提供了一个可靠的平台，将其作为开发基础配合已有工具进行渗透测试，就好比让普通测试者“站在巨人的肩膀上”，大大降低了 EXP 的开发周期和对开发者背景知识的要求，成为新的、广受欢迎的测试工作模式。</p></blockquote><h3 id="分析MSF模板框架结构"><a href="#分析MSF模板框架结构" class="headerlink" title="分析MSF模板框架结构"></a>分析MSF模板框架结构</h3><blockquote><p>Metasploit框架是一个用于渗透测试的开源工具集，它提供了一系列的漏洞利用、扫描和负载等模块，可用于攻击测试中对目标系统进行漏洞利用测试。MSF框架由一系列的组件和模块组成，下面对其主要组件进行分析。</p><ol><li>模块：Metasploit框架中的基本单元是模块。模块提供了执行特定任务的功能，比如利用漏洞、扫描网络、执行命令等。每个模块都是独立的，它们可以组合在一起以实现复杂的任务。</li><li>负载：负载是由攻击者控制的恶意代码，可以用于在目标系统上执行操作。Metasploit框架提供了多种负载类型，包括反向Shell、Meterpreter、VNC和Windows管理工具等。</li><li>执行器：执行器是负责执行模块和负载的组件。它们负责加载模块、执行代码并返回结果。</li><li>收集器：收集器用于收集目标系统上的信息。收集器通常是模块的一部分，用于在目标系统上执行命令并返回结果。</li><li>反射器：反射器是Metasploit框架中的核心组件之一，它用于维护与目标系统之间的通信。反射器负责处理网络数据包和负载，并将它们发送到正确的模块和执行器。</li><li>数据库：Metasploit框架可以将扫描和渗透测试结果保存到数据库中。这些数据可以用于生成报告和跟踪进度。</li><li>插件：Metasploit框架还支持插件，这些插件可以扩展框架的功能，添加新的模块和执行器。</li></ol><p>总之，Metasploit框架的模块化设计使其非常灵活和可扩展，可以根据需要进行定制和配置。同时，它也为渗透测试提供了一个统一的平台，使测试人员能够方便地执行各种任务并收集结果。</p></blockquote><h1 id="第十四章：渗透测试质量控制"><a href="#第十四章：渗透测试质量控制" class="headerlink" title="第十四章：渗透测试质量控制"></a>第十四章：渗透测试质量控制</h1><h3 id="简述渗透测试的常用标准"><a href="#简述渗透测试的常用标准" class="headerlink" title="简述渗透测试的常用标准"></a>简述渗透测试的常用标准</h3><blockquote><ol><li>PTES（Penetration Testing Execution Standard）：PTES是一份综合性的渗透测试标准，它包括7个主要阶段，分别是前期准备、情报收集、漏洞扫描、漏洞利用、提权、持久性和清理，以及渗透测试报告。</li><li>OSSTMM（Open Source Security Testing Methodology Manual）：OSSTMM是一个开放的安全测试方法，它着重于应用层面的安全测试，包括网络渗透测试、Web应用程序安全测试等。</li><li>ISSAF（Information Systems Security Assessment Framework）：ISSAF是一个详细的渗透测试框架，包括情报收集、漏洞扫描、漏洞利用和后渗透测试等阶段，还提供了工具和技术的参考。</li><li>NIST SP 800-115：NIST SP 800-115是由美国国家标准与技术研究院发布的一个渗透测试指南，包括前期准备、情报收集、漏洞扫描、漏洞利用和报告等阶段。</li><li>SANS Penetration Testing：SANS Penetration Testing是SANS安全机构提供的一份渗透测试指南，它包括前期准备、情报收集、漏洞扫描、漏洞利用和报告等阶段。</li></ol></blockquote><h3 id="简述渗透测试的风险控制"><a href="#简述渗透测试的风险控制" class="headerlink" title="简述渗透测试的风险控制"></a>简述渗透测试的风险控制</h3><blockquote><p>1.合法性授权：在进行渗透测试前，一定要经过合法性授权，以避免因未经授权的渗透测试引发法律纠纷。</p><p>2.明确测试范围：在进行渗透测试前，要明确测试的范围和目标，避免误操作导致的不必要损失。</p><p>3.备份数据：在进行渗透测试前，要备份目标系统中的数据，以避免测试过程中误操作导致的数据丢失。</p><p>4.定期报告：在进行渗透测试过程中，要及时汇报测试进展情况，定期向上级领导和客户提交测试报告。</p><p>5.保密性：在进行渗透测试时，要注意保密测试过程中涉及到的信息，避免信息泄露引发安全问题。</p><p>6.测试结束后，要对测试过程中发现的漏洞和安全隐患及时告知客户，并提供解决方案和建议，帮助客户改进安全防护措施。</p></blockquote><h3 id="如何评价渗透测试工具"><a href="#如何评价渗透测试工具" class="headerlink" title="如何评价渗透测试工具?"></a>如何评价渗透测试工具?</h3><blockquote><p>1.功能完备性</p><p>2.自动化程度</p><p>3.测试噪声</p></blockquote><h3 id="如何评价渗透测试方案"><a href="#如何评价渗透测试方案" class="headerlink" title="如何评价渗透测试方案?"></a>如何评价渗透测试方案?</h3><blockquote><p>1.沟通的充分性</p><p>2.测试方案的有效性</p><p>3.测试方案的复杂度</p><p>4.测试代价分析</p></blockquote><h3 id="如何实施测试监控确保测试安全"><a href="#如何实施测试监控确保测试安全" class="headerlink" title="如何实施测试监控确保测试安全?"></a>如何实施测试监控确保测试安全?</h3><blockquote><p>在工程实施过程中，确定不同阶段的测试人员以及客户方的配合人员，建立直接沟通的渠道，并在工程出现难题的过程中保持合理沟通。</p><p>​I)系统监测</p><p>​在评估过程中，由于渗透测试的特殊性，用户可以要求对整体测试流匿进行警控(这可能提高渗透测试的成本)。测试方法可以是测试方自控、用户监测两种方法，或兼而有之</p><p>​2)测试方自控</p><p>​由测试者对本次渗透测试过程中以下三方面数据进行完整记录，最终形成完整有序的渔透测试检测报告提交给用户。<br>​(1)操作:包括测试方实施的主要操作行为、时间、对象、范围等;<br>​(2)响应:包括测试方发起操作后，收集到被测方的响应现象、状态、现场参数等:<br>​(3)分析:对操作与响应进行因果、相关性分析，给出推论。</p><p>​3)用户监控</p><p>​用户监控可以有以下三种形式。<br>​(1) 全程监控:采用类似 Ethereal或 Sniffer Pro 的探软件进行全程抓包嗅探。其优点是全过程都能完整记录;其缺点是数据量太大，不易分析，需要大容量存储设备。</p><p>​(2)择要监控:不对扫描过程进行录制，仅仅在安全工程师分析数据后、准备发起潘透前，才开启类似 Ethereal或 Sniffer Pro 的软件进行嗅探。</p><p>​3)主机监控，仅监控受测主机的存活状态，避免意外情况发生。目前国内应用比较多的就是这种监控形式。</p><p>在测试过程中，一旦发现违规、越权行为，应立即终止测试，确保系统安全。</p></blockquote><h3 id="测试方法有哪些-如何实施交叉渗透测试"><a href="#测试方法有哪些-如何实施交叉渗透测试" class="headerlink" title="测试方法有哪些?如何实施交叉渗透测试?"></a>测试方法有哪些?如何实施交叉渗透测试?</h3><blockquote><p>1.盲测</p><p>​在盲测过程中，测试人员不需要知道任何关于目标系统的前置知识，但是在开始执行一个审计范围(adit scope)之前，必须先通知被测试目标的(管理员或所有者)。如伦理黑客行为(ethical hacking)入侵游戏(war game)都可以归为盲测类型。这种测试类型被广泛接受因为它会在道德前提下，将所发生的一切告知被测试目标。</p><p>2.双盲测试</p><p>​在双盲测试中，审计人员不需要知道任何关于目标系统的前置知识，同时被测试目标(管理员或所有者)也不会在测试开始前得到通知。黑盒测试和渗透测试都可以归为这一类当前绝大多数的安全审计采用双盲测试方法，对审计人员来说，每一个审计任务都是一巧实实在在的挑战，为了达到目标，必须选用最好的工具和最佳的技术。</p><p>3.灰盒测试</p><p>​在灰盒测试中，审计人员需要对被测试系统具有一定的了解，而测试开始前也会通知被测试目标。漏洞评估是灰盒测试的一个例子。</p><p>4.双灰盒测试</p><p>​双灰盒测试的过程和灰盒测试类似，只不过在双灰盒测试中，会给审计人员定义一个时限，并且不会测试任何通道和向量。白盒测试是双灰盒测试的一个例子。</p><p>5.串联测试</p><p>​在串联测试中，审计人员对目标系统只有最低限度的了解，且在测试开始前会详细通知被测试系统的管理员或者所有者。需要注意的是，串联测试会做得非常彻底。水晶盒(crystal box)测试和内部审计(in-house audit)都属于串联测试。</p><p>6.反向测试</p><p>​在反向测试中，审计人员拥有关于目标系统的所有知识，且在测试开始前被测试目标(管理员或所有者)不会得到任何通知。红队测试red-teaming)就是反向测试的一个例子。在实践中使用 OSSTMM 方法论，可以大幅降低漏报和误报，并提供更为精确的安全度量;OSSTMM 框架可以被许多不同类型的安全测试所使用，例如渗透测试、白盒审计漏洞评估等。它确保了每一次安全评估都具有彻底性，并且最终结果可以以一种一致的、可以量化的、稳定的方式进行聚合。</p><p>​基于上述方法，在渗透测试的实施过程中，渗透测试还可以采用交叉测试的方法。所谓交叉测试，是指在测试的某一阶段，测试人员相互交换测试的模块，这样不但可以使不同的测试人员保持测试的新鲜感，还可以进一步发掘测试的未知领域，发现交叉测试的模块和之前测试的模块间的联系，甚至可以构建更多的测试场景，帮助提高渗透测试质量。</p></blockquote><h3 id="简述测试报告的典型结构。"><a href="#简述测试报告的典型结构。" class="headerlink" title="简述测试报告的典型结构。"></a>简述测试报告的典型结构。</h3><blockquote><img src="https://raw.githubusercontent.com/GiyaYon/mypicGo/master/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%E6%A1%86%E6%9E%B6%E7%BB%93%E6%9E%84.jpg" style="zoom:50%;" /><center>渗透测试报告的框架结构</center><ol><li>概述：对测试执行情况进行简要概述，包括测试的范围、目的、方法和执行时间等基本信息。</li><li>测试计划：描述测试执行的详细计划，包括测试用例、测试数据、测试环境、测试人员等信息。</li><li>测试执行：详细记录测试执行的过程和结果，包括测试步骤、测试数据、测试结果、缺陷信息等内容。</li><li>缺陷汇总：列出所有发现的缺陷信息，包括缺陷的类型、严重程度、发现时间、状态、责任人等信息。</li><li>测试总结：对整个测试过程进行总结，包括测试执行情况、发现的问题、测试结果分析、风险评估等内容。</li><li>建议和改进：提出测试过程中发现的问题、改进方案和建议，以帮助提高测试质量和效率。</li><li>附录：包括测试用例、测试数据、测试日志、缺陷报告等补充性信息。</li></ol></blockquote><h1 id="后文"><a href="#后文" class="headerlink" title="后文"></a>后文</h1><h2 id="测试人员能力素养"><a href="#测试人员能力素养" class="headerlink" title="测试人员能力素养"></a>测试人员能力素养</h2><img src="https://raw.githubusercontent.com/GiyaYon/mypicGo/master/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E8%83%BD%E5%8A%9B%E7%AD%89%E7%BA%A7%E8%A1%A81.jpg" style="zoom: 33%;" /><img src="https://raw.githubusercontent.com/GiyaYon/mypicGo/master/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E8%83%BD%E5%8A%9B%E7%AD%89%E7%BA%A7%E8%A1%A82.jpg" style="zoom:40%;" /><img src="https://raw.githubusercontent.com/GiyaYon/mypicGo/master/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E8%80%83%E8%AF%95%E8%AE%A4%E8%AF%81.jpg" style="zoom:33%;" /><h2 id="后文-1"><a href="#后文-1" class="headerlink" title="后文"></a>后文</h2><p>完成时间：2023&#x2F;3&#x2F;18</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本书是《网络安全渗透测试》王晓东 西安电子科技大学出版社.&lt;/p&gt;
&lt;p&gt;在信息安全领域中，渗透测试是公认度非常高的新型安全测试方法。从其机</summary>
      
    
    
    
    <category term="网络工程" scheme="http://giyayonlib.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="网络安全" scheme="http://giyayonlib.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="渗透测试" scheme="http://giyayonlib.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="网络安全" scheme="http://giyayonlib.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="网络" scheme="http://giyayonlib.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://giyayonlib.com/2023/02/22/hello-world/"/>
    <id>http://giyayonlib.com/2023/02/22/hello-world/</id>
    <published>2023-02-22T05:12:47.574Z</published>
    <updated>2023-02-22T05:12:47.574Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
