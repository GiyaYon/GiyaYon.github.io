<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GiyaYon&#39;s Blog</title>
  
  
  <link href="http://giyayonlib.com/atom.xml" rel="self"/>
  
  <link href="http://giyayonlib.com/"/>
  <updated>2023-03-12T00:59:39.639Z</updated>
  <id>http://giyayonlib.com/</id>
  
  <author>
    <name>GiyaYon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络工程师知识梳理</title>
    <link href="http://giyayonlib.com/2023/03/12/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    <id>http://giyayonlib.com/2023/03/12/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/</id>
    <published>2023-03-12T00:43:31.721Z</published>
    <updated>2023-03-12T00:59:39.639Z</updated>
    
    
    
    
    <category term="网络工程" scheme="http://giyayonlib.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="网络基础" scheme="http://giyayonlib.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络工程师" scheme="http://giyayonlib.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    
    
    <category term="网络" scheme="http://giyayonlib.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="考试" scheme="http://giyayonlib.com/tags/%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="http://giyayonlib.com/2023/03/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://giyayonlib.com/2023/03/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2023-03-12T00:43:03.873Z</published>
    <updated>2023-03-12T00:58:28.905Z</updated>
    
    
    
    
    <category term="计算机科学" scheme="http://giyayonlib.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="理论基础" scheme="http://giyayonlib.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机网络" scheme="http://giyayonlib.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机基础" scheme="http://giyayonlib.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络" scheme="http://giyayonlib.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>软件工程</title>
    <link href="http://giyayonlib.com/2023/03/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    <id>http://giyayonlib.com/2023/03/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</id>
    <published>2023-03-11T18:21:32.036Z</published>
    <updated>2023-03-12T00:59:38.549Z</updated>
    
    
    
    
    <category term="软件工程" scheme="http://giyayonlib.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="软件基础" scheme="http://giyayonlib.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80/"/>
    
    <category term="软件工程" scheme="http://giyayonlib.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="软件开发" scheme="http://giyayonlib.com/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="策划" scheme="http://giyayonlib.com/tags/%E7%AD%96%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>软件测试</title>
    <link href="http://giyayonlib.com/2023/03/12/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    <id>http://giyayonlib.com/2023/03/12/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</id>
    <published>2023-03-11T17:16:22.569Z</published>
    <updated>2023-03-12T00:59:37.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本书是《软件测试技术及项目安利实战（微课视频版）》乔冰琴</p><p>软件测试是软件开发过程中一个重要的组成部分，用来确定一个程序的品质或性能是否符合开发之前所提出的要求，是软件质量保证的关键步骤。发现软件中的错误，对软件是否符合设计要求进行有关的验证以及评估软件的质量，最后实现交付给客户。</p><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="第一章：软件测试概述"><a href="#第一章：软件测试概述" class="headerlink" title="第一章：软件测试概述"></a>第一章：软件测试概述</h3><h3 id="第二章：软件测试入门"><a href="#第二章：软件测试入门" class="headerlink" title="第二章：软件测试入门"></a>第二章：软件测试入门</h3><h3 id="第三章：软件测试技术体系"><a href="#第三章：软件测试技术体系" class="headerlink" title="第三章：软件测试技术体系"></a>第三章：软件测试技术体系</h3><h3 id="第四章：软件测试过程管理"><a href="#第四章：软件测试过程管理" class="headerlink" title="第四章：软件测试过程管理"></a>第四章：软件测试过程管理</h3><h3 id="第五章：白盒测试用例设计以及应用"><a href="#第五章：白盒测试用例设计以及应用" class="headerlink" title="第五章：白盒测试用例设计以及应用"></a>第五章：白盒测试用例设计以及应用</h3><h3 id="第六章：黑盒测试用例设计以及应用"><a href="#第六章：黑盒测试用例设计以及应用" class="headerlink" title="第六章：黑盒测试用例设计以及应用"></a>第六章：黑盒测试用例设计以及应用</h3><h3 id="第七章：接口测试基础"><a href="#第七章：接口测试基础" class="headerlink" title="第七章：接口测试基础"></a>第七章：接口测试基础</h3><h3 id="第八章：接口测试"><a href="#第八章：接口测试" class="headerlink" title="第八章：接口测试"></a>第八章：接口测试</h3><h2 id="技术篇"><a href="#技术篇" class="headerlink" title="技术篇"></a>技术篇</h2><h3 id="第九章-Unittest单元测试框架"><a href="#第九章-Unittest单元测试框架" class="headerlink" title="第九章 Unittest单元测试框架"></a>第九章 Unittest单元测试框架</h3><h3 id="第十章-接口自动化测试"><a href="#第十章-接口自动化测试" class="headerlink" title="第十章 接口自动化测试"></a>第十章 接口自动化测试</h3><h3 id="第十一章-WebUI自动化测试"><a href="#第十一章-WebUI自动化测试" class="headerlink" title="第十一章 WebUI自动化测试"></a>第十一章 WebUI自动化测试</h3><h2 id="扩展篇"><a href="#扩展篇" class="headerlink" title="扩展篇"></a>扩展篇</h2><h3 id="第十二章-性能测试"><a href="#第十二章-性能测试" class="headerlink" title="第十二章 性能测试"></a>第十二章 性能测试</h3><h3 id="第十三章-移动APP非功能测试"><a href="#第十三章-移动APP非功能测试" class="headerlink" title="第十三章 移动APP非功能测试"></a>第十三章 移动APP非功能测试</h3><h3 id="第十四章-渗透性测试"><a href="#第十四章-渗透性测试" class="headerlink" title="第十四章 渗透性测试"></a>第十四章 渗透性测试</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本书是《软件测试技术及项目安利实战（微课视频版）》乔冰琴&lt;/p&gt;
&lt;p&gt;软件测试是软件开发过程中一个重要的组成部分，用来确定一个程序的品质或</summary>
      
    
    
    
    <category term="软件工程" scheme="http://giyayonlib.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="软件基础" scheme="http://giyayonlib.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80/"/>
    
    <category term="软件测试" scheme="http://giyayonlib.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试" scheme="http://giyayonlib.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
    <category term="软件开发" scheme="http://giyayonlib.com/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试</title>
    <link href="http://giyayonlib.com/2023/03/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    <id>http://giyayonlib.com/2023/03/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</id>
    <published>2023-03-11T12:25:18.692Z</published>
    <updated>2023-03-12T04:11:20.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本书是《网络安全渗透测试》王晓东 西安电子科技大学出版社.</p><p>在信息安全领域中，渗透测试是公认度非常高的新型安全测试方法。从其机理而言，渗透测试属于破坏性检验的范畴。在前三章讲渗透测试的基础概念；第四章讲到信息收集，五到七章讲到服务器 客户端 网络设备渗透测试，第八章讲到后渗透测试，第九章讲到社会工程学，十到十一讲到工控网络和无线网络的测试，十二到十三章讲到自动化框架，最后一章讲了质量控制介绍</p><h2 id="第一章：概述"><a href="#第一章：概述" class="headerlink" title="第一章：概述"></a>第一章：概述</h2><h3 id="什么是渗透测试？"><a href="#什么是渗透测试？" class="headerlink" title="什么是渗透测试？"></a>什么是渗透测试？</h3><blockquote><p>渗透测试是服务于信息安全的保障技术</p><p>信息安全又可分为狭义上的信息安全和广义上的信息安全，狭义上是以密码学为基础，服役通信网络、计算机编程等方面相关信息保护技术。</p></blockquote><h3 id="渗透测试的分类有哪些？各有什么特点？"><a href="#渗透测试的分类有哪些？各有什么特点？" class="headerlink" title="渗透测试的分类有哪些？各有什么特点？"></a>渗透测试的分类有哪些？各有什么特点？</h3><blockquote><p>1.按照协议分类</p><p>​按照OSI七层模型与用户一层的八层进行针对性试探</p><p>2.按照信息公开与否分类</p><p>​是否通过公开测试来进行测试</p><p>3.按照测试方法分类</p><p>​黑盒测试：对服务器内部情况一无所知，只有DNS、Web、E-mail公开的服务器知道</p><p>​白盒测试：通过正规渠道获取到公司内部的服务器结构框架针对性的模拟内部企业雇员的越权行为</p><p>4.按照测试目标分类</p><p>​专门的操作系统，数据库，网络设备进行测试</p></blockquote><h3 id="渗透测试的主要方法有哪些？"><a href="#渗透测试的主要方法有哪些？" class="headerlink" title="渗透测试的主要方法有哪些？"></a>渗透测试的主要方法有哪些？</h3><blockquote><ol><li>主动侦查：这是收集有关目标系统的信息的过程。渗透测试人员会使用各种技术和工具，如端口扫描、DNS信息收集和Whois查询等，来收集有关目标系统的详细信息。</li><li>社会工程学攻击：这是一种攻击人员通过欺骗、伪装等方式欺骗用户揭露密码、访问权限等敏感信息的技术。渗透测试人员会通过各种方式测试系统用户的社会工程学素养，包括钓鱼、垃圾邮件和网络欺诈等。</li><li>漏洞扫描：这是通过使用自动化工具扫描目标系统中的漏洞，以确定目标系统中存在的安全漏洞。常见的漏洞扫描工具包括OpenVAS、Nessus和Nmap等。</li><li>漏洞利用：这是一种尝试利用发现的安全漏洞来获取系统访问权限的行为。这包括使用各种技术和工具，如暴力破解、字典攻击和缓冲区溢出等。</li><li>密码攻击：这是一种针对系统中存储的密码进行攻击的行为。渗透测试人员会使用各种密码破解工具，如John the Ripper和Hashcat等，以尝试破解系统中存储的密码。</li><li>社会工程学测试：这是一种测试目标系统用户的社会工程学素养的行为。渗透测试人员会模拟各种攻击场景，以测试系统用户对攻击的反应和应对能力。</li></ol></blockquote><h3 id="渗透测试与软件测试的区别是什么？"><a href="#渗透测试与软件测试的区别是什么？" class="headerlink" title="渗透测试与软件测试的区别是什么？"></a>渗透测试与软件测试的区别是什么？</h3><blockquote><p>渗透测试（Penetration Testing）也被称为漏洞评估，它是指一种通过模拟黑客攻击的方式，来评估计算机系统、网络或应用程序的安全性的方法。渗透测试通常涉及以下步骤：信息收集、漏洞扫描、漏洞利用、权限提升、数据获取、漏洞利用后清理等。渗透测试需要深入了解系统架构和网络安全知识，通常由专业的安全测试工程师完成。</p><p>软件测试（Software Testing）是指在开发软件的过程中，对软件的各项功能、性能、安全性等进行全面的测试和验证。软件测试通常涉及以下步骤：测试计划、测试用例设计、测试执行、缺陷管理和测试报告。软件测试需要深入了解软件开发和测试方法，通常由专业的测试工程师完成。</p><p>渗透测试侧重于系统安全性的评估和漏洞发现，需要深入了解系统安全领域的知识，而软件测试侧重于软件质量的验证和提高，需要深入了解软件开发和测试方法。</p></blockquote><h3 id="论述渗透测试与黑客攻击的区别？"><a href="#论述渗透测试与黑客攻击的区别？" class="headerlink" title="论述渗透测试与黑客攻击的区别？"></a>论述渗透测试与黑客攻击的区别？</h3><blockquote><p>区别是前者受到严格的约束</p></blockquote><h3 id="简述渗透测试的发展过程？"><a href="#简述渗透测试的发展过程？" class="headerlink" title="简述渗透测试的发展过程？"></a>简述渗透测试的发展过程？</h3><blockquote><p>历史课不喜欢，密码学的发展过程与现代计算机结合新出现的技术</p></blockquote><h3 id="渗透测试的步骤是什么？"><a href="#渗透测试的步骤是什么？" class="headerlink" title="渗透测试的步骤是什么？"></a>渗透测试的步骤是什么？</h3><blockquote><p>渗透测试通常涉及以下步骤：信息收集、漏洞扫描、漏洞利用、权限提升、数据获取、漏洞利用后清理等。</p></blockquote><h3 id="渗透测试的工具有哪些？"><a href="#渗透测试的工具有哪些？" class="headerlink" title="渗透测试的工具有哪些？"></a>渗透测试的工具有哪些？</h3><blockquote><p>1.Metasploit</p><p>2.Nessus</p><p>3.Nmap</p><p>4.Burp Suite</p><p>5.OWASP ZAP</p><p>6.SQLmap</p><p>7.Kali Linux</p></blockquote><h3 id="渗透测试的原则有哪些？"><a href="#渗透测试的原则有哪些？" class="headerlink" title="渗透测试的原则有哪些？"></a>渗透测试的原则有哪些？</h3><blockquote><p>1.标准性原则：需要遵守相关规定</p><p>2.规范性原则：有良好的写作格式，清楚地记录所用工具以及策略</p><p>3.可控性原则：对工作的可控，在双方认可的范围内进行</p><p>4.影响性原则：测试过程不可让系统崩溃或网络造成破坏，在业务时间允许的情况进行，做到影响小</p><p>5.整体性和不可缺原则：测试对象不可在规定的范围外进行</p><p>6.保密性原则：过程与结果都要保密，不可泄漏</p></blockquote><h3 id="渗透测试的道德约束和法律约束是什么？"><a href="#渗透测试的道德约束和法律约束是什么？" class="headerlink" title="渗透测试的道德约束和法律约束是什么？"></a>渗透测试的道德约束和法律约束是什么？</h3><blockquote><p>看法律文件</p></blockquote><hr><h2 id="第二章：渗透测试原理与模型"><a href="#第二章：渗透测试原理与模型" class="headerlink" title="第二章：渗透测试原理与模型"></a>第二章：渗透测试原理与模型</h2><h3 id="什么是网络攻击？网络攻击的手段有哪些？"><a href="#什么是网络攻击？网络攻击的手段有哪些？" class="headerlink" title="什么是网络攻击？网络攻击的手段有哪些？"></a>什么是网络攻击？网络攻击的手段有哪些？</h3><blockquote><p>网络攻击是针对计算机信息系统、基础设施、计算机网络或个人计算机设备的任何类型的进攻动作。</p><ol><li>拒绝服务攻击（Denial of Service, DoS）：通过发送大量无效请求或攻击数据包，使服务器负载过大，最终导致服务不可用。</li><li>木马病毒攻击：将木马病毒程序传入目标主机，并通过该程序获取或窃取计算机中的敏感信息。</li><li>黑客攻击：利用漏洞攻击操作系统或应用程序，获取管理员权限，并在系统中实施各种破坏性行为。</li><li>社会工程学攻击：通过伪装成信任的个人或组织，诱骗用户提供敏感信息，如密码、账号等。</li><li>网络钓鱼攻击：利用电子邮件、短信等方式诱导用户点击链接或下载附件，以获取用户的账号和密码等敏感信息。</li><li>网络间谍攻击：通过入侵目标网络或计算机，获取目标组织或个人的敏感信息，如商业机密、个人隐私等。</li><li>网络入侵检测攻击：利用漏洞攻击网络入侵检测系统，从而获得管理员权限，控制系统并绕过安全检测。</li></ol></blockquote><h3 id="密码分析如何按照攻击的方式和条件进行分类？"><a href="#密码分析如何按照攻击的方式和条件进行分类？" class="headerlink" title="密码分析如何按照攻击的方式和条件进行分类？"></a>密码分析如何按照攻击的方式和条件进行分类？</h3><blockquote><p>密码分析是指通过各种手段分析加密或编码后的数据，以便揭示加密算法、密码、密钥等信息。根据攻击的方式和条件，密码分析可以分为以下几类：</p><p>1.1 字典攻击：利用事先准备好的字典文件，尝试对目标加密数据进行猜解，以获得密码信息。</p><p>1.2 暴力破解：穷举所有可能的密码组合，直到找到正确的密码为止。</p><p>1.3 差分攻击：针对加密算法中的差分运算进行攻击，通过观察输入和输出之间的关系来破解密钥。</p><p>1.4 工具攻击：使用各种密码破解工具，如John the Ripper、Hashcat等。</p><p>1.5 侧信道攻击：通过观察目标设备的电磁辐射、功耗、时间等信息，来推测目标设备的加密算法、密钥等信息。</p><p>1.6 社会工程学攻击：通过与目标用户的交互来获取密码等敏感信息，如钓鱼邮件、假冒网站等。</p><p>这些攻击方式可能会结合使用，以提高攻击的成功率。密码分析的目的是为了揭示加密算法的漏洞，从而加强密码的安全性。</p></blockquote><h3 id="什么是漏洞？漏洞的分类有哪些？画图说明安全漏洞的生命周期。"><a href="#什么是漏洞？漏洞的分类有哪些？画图说明安全漏洞的生命周期。" class="headerlink" title="什么是漏洞？漏洞的分类有哪些？画图说明安全漏洞的生命周期。"></a>什么是漏洞？漏洞的分类有哪些？画图说明安全漏洞的生命周期。</h3><blockquote><p>漏洞是系统中存在的一些功能性或安全性的逻辑缺陷，包括可能导致威胁、损坏计算机系统安全性的因素，也可以认为是计算机系统在硬件、软件、协议的具体实现或系统安全策略上存在的所有缺陷和不足。</p><p>1.身份验证与授权漏洞：指攻击者可以通过各种方式绕过身份验证或者授权机制，获得未授权的访问权限。</p><p>2.输入验证漏洞：指攻击者可以利用输入验证不充分的漏洞来执行恶意代码或者通过SQL注入等方式访问和修改数据。</p><p>3.加密和安全协议漏洞：指攻击者可以利用加密算法或安全协议中的漏洞，获取数据或者执行恶意代码。</p><p>4.网络服务漏洞：指网络服务应用程序存在漏洞，导致攻击者可以通过攻击服务来获取系统权限或者执行恶意操作。</p><p>5.操作系统漏洞：指操作系统本身存在的漏洞，攻击者可以利用漏洞获取系统权限或执行恶意操作。</p><p>安全漏洞的生命周期包括以下几个阶段：</p><p>1.发现漏洞：安全漏洞的第一步是发现它们，可以是由安全专业人员、黑客或其他人员发现。</p><p>2.分析漏洞：在这个阶段，安全专业人员需要分析漏洞，确定漏洞的性质和影响范围。</p><p>3.利用漏洞：攻击者利用漏洞来获取系统访问权限、执行恶意代码或窃取敏感信息。</p><p>4.公开漏洞：漏洞可能会被安全专家或黑客公开披露，从而暴露给广大用户。</p><p>5.修复漏洞：漏洞修复是防止攻击的最佳方法，需要厂商或管理员及时修补漏洞，以防止攻击者利用漏洞攻击系统。</p></blockquote><h3 id="区分Shellcode、EXP、Payload"><a href="#区分Shellcode、EXP、Payload" class="headerlink" title="区分Shellcode、EXP、Payload."></a>区分Shellcode、EXP、Payload.</h3><blockquote><p>EXP： 对漏洞如何利用的纤细说明或者是一段演示漏洞攻击的代码，EXP 可以帮助使用者了解漏洞的机理以及利用的方法。</p><p>Payload：攻破目标系统后所进行的操作，目的是提升权限、加强控制等操作。</p><p>Shellcode：指一小段用来执行特定任务的机器码，通常是用于利用软件漏洞的过程中，用于获得对受攻击计算机的控制权限。Shellcode通常被注入到受攻击计算机的内存中，并被执行。Shellcode可以执行各种各样的任务，如创建一个远程访问后门、下载并执行恶意软件、以及执行其他指定的操作。</p></blockquote><h3 id="简述攻击树、攻击图、特权图、Petri、状态转移攻击模型"><a href="#简述攻击树、攻击图、特权图、Petri、状态转移攻击模型" class="headerlink" title="简述攻击树、攻击图、特权图、Petri、状态转移攻击模型"></a>简述攻击树、攻击图、特权图、Petri、状态转移攻击模型</h3><blockquote><p>攻击树（Attack Tree）是一种用于表达攻击路径的方法，它通过树状结构展示攻击者达到某个目标的所有可能路径和方法，每个节点代表一种攻击手段或条件，从根节点开始，通过不断地分解和细化攻击目标，最终到达攻击成功的叶子节点。</p><p>攻击图（Attack Graph）是一种用于分析网络攻击路径的方法，它通过展示攻击者攻击网络时可能的路径、攻击点和攻击方式来分析网络攻击的可能性和危害程度。</p><p>特权图（Privilege Graph）是一种用于描述系统权限控制的方法，它通过展示系统中各个主体（如用户、程序、服务等）的权限关系来分析系统的安全性。</p><p>Petri网（Petri Net）是一种用于描述并发系统的方法，它通过表示系统中的各个状态和状态之间的变迁关系来分析系统的行为和安全性。</p><p>状态转移攻击模型（STAM）是一种基于状态机模型的攻击模型，它通过描述系统中各个状态以及状态之间的转移关系来分析攻击者在系统中的行为和攻击路径。STAM通常用于分析网络协议和安全协议的安全性。</p></blockquote><h3 id="简述攻击方案的生成过程"><a href="#简述攻击方案的生成过程" class="headerlink" title="简述攻击方案的生成过程"></a>简述攻击方案的生成过程</h3><blockquote><ol><li>收集信息：攻击者通过各种手段获取目标系统的信息，包括系统架构、操作系统版本、应用程序版本、网络拓扑结构等。</li><li>制定攻击目标：根据收集到的信息，攻击者制定攻击目标，选择合适的攻击手段和工具，以及攻击的时间和地点。</li><li>分析攻击面：攻击者分析目标系统的攻击面，即可能被攻击的漏洞或弱点，确定攻击方案的方向和重点。</li><li>选择攻击技术：攻击者根据攻击面和攻击目标，选择适合的攻击技术，例如漏洞利用、社会工程学攻击、拒绝服务攻击等。</li><li>编写攻击代码：攻击者根据选择的攻击技术，编写攻击代码或利用已有的攻击代码。</li><li>测试攻击代码：攻击者测试攻击代码的有效性和可靠性，确保攻击能够成功。</li><li>部署攻击代码：攻击者将攻击代码部署到目标系统中，执行攻击。</li><li>操作维护：攻击者在攻击过程中不断进行操作和维护，以保证攻击的成功和持续性。</li></ol></blockquote><hr><h2 id="第三章：渗透测试环境工程"><a href="#第三章：渗透测试环境工程" class="headerlink" title="第三章：渗透测试环境工程"></a>第三章：渗透测试环境工程</h2><h3 id="渗透测试的要素有哪些？"><a href="#渗透测试的要素有哪些？" class="headerlink" title="渗透测试的要素有哪些？"></a>渗透测试的要素有哪些？</h3><blockquote><p>包括测试质量、人员、技术、标准、资源</p><p>质量是测试目标的核心</p><p>人员起决定因素</p><p>技术是工具</p><p>标准是规范要求</p><p>资源是所需基础</p></blockquote><h3 id="简述测试覆盖率与测试效率的关系"><a href="#简述测试覆盖率与测试效率的关系" class="headerlink" title="简述测试覆盖率与测试效率的关系"></a>简述测试覆盖率与测试效率的关系</h3><blockquote><p>测试覆盖率是用来度量测试完整性的一种手段，是测试技术有效性的一个指标。</p><p>测试效率是指测试过程中执行测试人物的时间有效性。</p><p>提升测试效率有利于进一步增加测试覆盖率</p></blockquote><h3 id="对渗透测试人员的要求有哪些？如何进行训练？"><a href="#对渗透测试人员的要求有哪些？如何进行训练？" class="headerlink" title="对渗透测试人员的要求有哪些？如何进行训练？"></a>对渗透测试人员的要求有哪些？如何进行训练？</h3><blockquote><p>1.专业的理论素质</p><p>2.分析解决问题能力</p><p>3.创新思维</p><p>4.团队沟通能力</p><p>5.法律意识与知识</p><p>公认度较高的渗透测试能力训练的手段包括参加CTF和网络对抗训练</p></blockquote><h3 id="简述Docker与虚拟机的区别"><a href="#简述Docker与虚拟机的区别" class="headerlink" title="简述Docker与虚拟机的区别"></a>简述Docker与虚拟机的区别</h3><blockquote><p>虚拟机是通过软件模拟的具有完整硬件系统功能的运行在一个完全隔离环境中的完整计算机系统</p><p>Docker是一个开源的应用容器引擎。让开发者打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的Linux或Windows机器上，也可以实现虚拟化。</p><p>区别：</p><p>1.Docker守护进程可以直接与主操作系统进行通信，为各个Docker容器分配资源；它还可以将容器与主操作系统隔离，并将各个容器相互隔离。</p><p>2.虚拟机的启动需要几分钟，而Docker容器可以在几毫秒内启动。</p><p>3.Docker没有从操作系统，节省了大量的磁盘空间。</p><p>4.虚拟机更擅长于彻底隔离整个运行环境。例如，云服务提供商通常采用虚拟机技术隔离不同的用户，而Docker通常于隔离不同的应用，例如前端、后端、以及数据库</p></blockquote><h3 id="介绍攻击机平台搭建方法。"><a href="#介绍攻击机平台搭建方法。" class="headerlink" title="介绍攻击机平台搭建方法。"></a>介绍攻击机平台搭建方法。</h3><blockquote><p>攻击机平台是指用于进行渗透测试和安全评估的计算机系统，它可以模拟真实攻击场景并进行安全测试。以下是攻击机平台搭建的一般步骤：</p><ol><li>确定操作系统：选择一个适合渗透测试的操作系统，如Kali Linux、Parrot OS、BlackArch等。</li><li>安装必要的软件：根据具体的渗透测试需求，安装必要的软件，如Nmap、Metasploit、Burp Suite、Hydra、John the Ripper等。</li><li>配置网络：在攻击机平台上设置IP地址、网关、DNS服务器等，确保能够访问被测系统。</li><li>安装虚拟机：如果需要模拟多种攻击场景，可以在攻击机平台上安装虚拟机软件，如VirtualBox、VMware等，并安装适合的操作系统和软件。</li><li>模拟攻击场景：根据渗透测试的目标和要求，模拟真实攻击场景，如Web应用程序渗透测试、无线网络攻击、社会工程学攻击等。</li><li>记录测试结果：在攻击机平台上记录测试过程中的操作和结果，以便进行分析和总结。</li></ol><p>在搭建攻击机平台时，需要注意以下几点：</p><ol><li>安全防护：攻击机平台可能会存在安全风险，需要加强系统安全防护措施，如加密磁盘、安装防病毒软件、关闭不必要的服务等。</li><li>合法性问题：在进行渗透测试时，需要遵守法律法规，确保测试行为的合法性，避免对他人造成损失和影响。</li><li>维护成本：攻击机平台需要进行定期维护和更新，以确保系统稳定性和安全性，需要有专业的人员进行管理和维护。</li></ol></blockquote><h3 id="简述靶场技术。"><a href="#简述靶场技术。" class="headerlink" title="简述靶场技术。"></a>简述靶场技术。</h3><blockquote><p>靶场技术是一种安全测试方法，旨在模拟真实世界中的攻击场景，以评估系统的安全性和弱点。靶场通常是虚拟或真实的系统或网络环境，其中安装了各种漏洞和弱点，以模拟真实世界中的攻击情况。靶场可以用于测试安全人员的技能和知识，以及测试安全工具和技术的有效性。</p><p>靶场技术的基本过程如下：</p><ol><li>确定测试目标：确定要测试的系统或网络，以及测试的目的和范围。</li><li>收集信息：收集与测试目标有关的信息，包括IP地址、端口、操作系统版本、应用程序等。</li><li>定义攻击场景：根据测试目标和信息，定义攻击场景，包括攻击类型、攻击方法、攻击者角色等。</li><li>准备靶场：设置靶场环境，包括安装漏洞和弱点，设置攻击场景和网络拓扑等。</li><li>进行测试：进行测试，模拟攻击场景，测试系统的安全性和弱点。</li><li>分析结果：分析测试结果，确定系统的安全性和弱点，制定改进计划。</li></ol><p>靶场技术可以帮助安全人员了解攻击者的思维方式和攻击方式，帮助他们更好地了解系统和网络的安全性，以便更好地保护其机密性、完整性和可用性。</p></blockquote><h3 id="简述PETS渗透测试标准。"><a href="#简述PETS渗透测试标准。" class="headerlink" title="简述PETS渗透测试标准。"></a>简述PETS渗透测试标准。</h3><blockquote><p>PETS (Penetration Testing Execution Standard) 是一种渗透测试标准，其目的是帮助渗透测试人员开展有效的测试，并为客户提供全面的渗透测试报告。PETS 标准包括以下阶段：</p><ol><li>确定范围：定义测试的目标、边界和规则。</li><li>收集信息：通过各种手段搜集测试目标的信息，包括网络拓扑、操作系统、应用程序等等。</li><li>识别漏洞：通过各种手段识别目标系统的漏洞，包括端口扫描、漏洞扫描、手工测试等等。</li><li>利用漏洞：利用已知或发现的漏洞，获取目标系统的敏感信息或控制权。</li><li>维持访问：保持攻击者对目标系统的持久访问权限。</li><li>分析漏洞：对已发现的漏洞进行分析，包括漏洞利用效果、影响范围、风险等等。</li><li>编写报告：撰写详细的渗透测试报告，包括测试目的、测试方法、测试结果、建议改进等等。</li><li>清除痕迹：在测试结束后，清除所有与测试相关的痕迹，以确保不留下任何安全漏洞。</li></ol><p>PETS 标准的主要特点是：明确的测试流程、可重复性和标准化、详细的测试报告。</p></blockquote><h3 id="简述渗透测试资源的定义。"><a href="#简述渗透测试资源的定义。" class="headerlink" title="简述渗透测试资源的定义。"></a>简述渗透测试资源的定义。</h3><blockquote><p>泛指一切实施渗透测试系统所依赖的软硬件、知识与信息</p><p>分为有形、无形</p><p>无形是指知识与信息，包括漏洞库、字典、社会工程库、系统源代码、指纹特征。</p><p>有形是指设备、软件、人力资源为主</p></blockquote><h3 id="简述渗透测试的漏洞资源。"><a href="#简述渗透测试的漏洞资源。" class="headerlink" title="简述渗透测试的漏洞资源。"></a>简述渗透测试的漏洞资源。</h3><blockquote><p>漏洞库是记录漏洞信息的数据库。有助于为安全厂商基于漏洞发现和攻击防护类的产品提供数据和数据支持，政府机构指导制定未来的安全策略。</p></blockquote><h3 id="简述渗透测试的计算资源。"><a href="#简述渗透测试的计算资源。" class="headerlink" title="简述渗透测试的计算资源。"></a>简述渗透测试的计算资源。</h3><blockquote><p>渗透测试往往需要用密码分析对系统认证进行突破，而密码分析通常需要密集、高质量的计算资源</p></blockquote><hr><h2 id="第四章：渗透测试信息收集与分析"><a href="#第四章：渗透测试信息收集与分析" class="headerlink" title="第四章：渗透测试信息收集与分析"></a>第四章：渗透测试信息收集与分析</h2><h3 id="渗透测试的信息有哪些？"><a href="#渗透测试的信息有哪些？" class="headerlink" title="渗透测试的信息有哪些？"></a>渗透测试的信息有哪些？</h3><blockquote><p>信息源一般分为实物型信息源、文献型信息源、电子型信息源和网络信息源</p><p>1.实物型信息源：具体的观察对象在运动过程中直接产生的有关信息，例如事物运动现场、学术研讨会、展览会等</p><p>2.文献型信息源：承载者系统的知识信息的各种载体信息源，包括图书、报纸、期刊、专利文献、学位论文、公文等。</p><p>3.电子型信息源：电子技术实现信息传播的信息源、广播、电视、电子刊物等。</p><p>网络型信息源：蕴藏在计算机网络、特别是因特网中的有关信息而形成的信息源。</p><p>在渗透测试中，根据信息的性质可以对信息进行不同的划分，不同的信息在时效性、处理方法、存储方法和利用方式上差异很大，要区别对待。</p><p>1.根据信息的可用性，分为直接信息、间接信息、隐藏信息。</p><p>2.根据信息内容，分为技术信息、管理信息、物理细节</p><p>3.根据信息的保密等级，分为公开信息、保密信息、机密信息</p><p>4.根据信息的格式，分为文本信息、参数信息、规律信息</p><p>5.根据信息的位置，分为线上信息和线下信息</p></blockquote><h3 id="渗透测试信息的收集方法有哪些？"><a href="#渗透测试信息的收集方法有哪些？" class="headerlink" title="渗透测试信息的收集方法有哪些？"></a>渗透测试信息的收集方法有哪些？</h3><blockquote><p>按收集的手段分类，信息收集可以分为主动信息收集和被动信息收集。主动信息收集是与目标主机进行直接交互；从而获取目标信息；而被动信息收集恰恰相反，不与目标主机进行直接交互，而是通过第三方获取目标信息。</p><p>1.主动信息收集通过直接访问、扫描、尝试连接等方法收集信息，这种方法将产生流量，可能被监测和记录。</p><p>2.被动信息收集利用第三方的服务对目标进行访问了解，例如搜索引擎、公开媒体等，不产生流量具有比较好的隐蔽性。</p></blockquote><h3 id="公开信息有哪些？如何进行收集？"><a href="#公开信息有哪些？如何进行收集？" class="headerlink" title="公开信息有哪些？如何进行收集？"></a>公开信息有哪些？如何进行收集？</h3><blockquote><p>公开信息资源的表现有报刊、图书、地图、声像、照片、微缩、因特网、其他等。</p><p>信息获取方法</p><p>1.直接获取</p><p>用户可以根据自己对信息的需求，针对明确的信息目标，通过搜索引擎或者网址来精确地定位到信息资源所在的位置。</p><p>2.间接获取</p><p>通过网址链接或者是网络导航来获取网络信息资源。很多时候用户不一定很明确自己所需要的信息资源，一般通过一层一层链接找到对自己有用的信息，这种获取网络信息资源的方式并非目标所指，是网络行为导致的一种必然趋势，但这种方式并不比直接获取简单快捷，一般会花费一些时间，而且有时候最终也不一定能够得到对自己游泳的信息资源。</p><p>3.其他</p><p>除了社交网络外，与社交网络捆绑的金融、服务、旅游、导航也是公开信息收集可利用的渠道</p></blockquote><h3 id="解释什么是Google-Hacking"><a href="#解释什么是Google-Hacking" class="headerlink" title="解释什么是Google Hacking"></a>解释什么是Google Hacking</h3><blockquote><p>设备信息：信息系统是由通信网络链接起来的信息设备构成的，进行渗透测试首先需要了解系统的设备信息。</p><p>​Shodan是用来搜索网络空间中在线主机设备的</p><p>​ZoomEye侧重于Web层面的资产发现。</p><p>网站信息</p><p>​1.网站信息跟踪：网站是企业、单位发布信息的窗口，可以利用网站渗透测试目标的大量公开信息</p><p>​1# 跟踪新闻网站</p><p>​2# 分析相关的专业机构网站</p><p>​3# 关注新型的传播平台</p><p>​4# 利用因特网数字图书馆资源</p><p>​2.搜索引擎：通过搜索引擎可以检索到非常多的信息。</p><p>​谷歌黑客（GoogleHacking）就是专门利用搜索引擎实施黑客活动的方法。</p><p>​渗透测试一般基于软件漏洞给和错误配置，虽然一些有经验的入侵者的目标瞄准了一些特殊的系统，尝试发现可能进入的漏洞，但大部分的入侵者是从具体的软件漏洞或者普通用户错误配置开始查找漏洞，在这些配置中，找到怎样侵入并且尝试发现或者扫描有该中漏洞的系统。谷歌黑客对于第一种攻击者来说用处很少，但是对于第二种攻击者则发挥了重要作用</p><p>社交网络</p><p>​社交网络通过网络聊天、博客、播客和社区共享等途径，实现个体社交圈的逐步扩大，最终形成一个链接”熟人的熟人“的大型网络社交圈，充分反映出人类社会的六度分隔理论特征。蕴含大量可以利用的公开信息，日趋发展成网民获取信息、表达观点和信息交流不可缺少的网络传播媒介。</p><p>​1.信息价值分析</p><p>​从信息获取成本来说，社会上刚发生过的新闻，社交网络上可以第一时间获取，好友发布的日志以及状态也能第一时间获得，单从成本来看，成本很低获取到社交网络的信息普遍具有一定价值</p><p>​从信息获取收益来说，社交网络本身是一个大型的网络圈，信息可以一传十，十传百地传播，信息获取速度块，用户根据自己需求筛选，可以短时间内获得大量对自己有用的信息。</p><p>​从信息本身的有效性和可信度来说，获得同一信息的途径可能不同，那么造成的信息可信度也就不一样，因此根据信息可信度来判断信息的价值也是不确定的，视情况来定</p></blockquote><h3 id="什么是主机指纹信息？"><a href="#什么是主机指纹信息？" class="headerlink" title="什么是主机指纹信息？"></a>什么是主机指纹信息？</h3><blockquote><p>​网络信息系统最基本的单元是主机，因此进行渗透测试时，应当首先获得目标主机的信息。主机信息包括信息内容，指纹信息，安防设备。操作系统指纹是指识别某台网络设备上运行的操作系统类型的特征。网络操作系统的指纹实际上来源于TCP&#x2F;IP的协议栈。TCP&#x2F;IP协议栈技术只在RFC文档中描述，并没有一个统一的行业标准，各个公司在编写应用于自己的操作系统的TCP&#x2F;IP协议栈时，对RFC文档做出了不同的诠释，造成了各个操作系统在TCP&#x2F;IP协议的实现上有所不同。例如人的指纹，通过比较不同操作系统的TCP&#x2F;IP协议栈的细微差异，就可以判定操作系统类型以及版本。这种方式称为”指纹方法学“</p></blockquote><h3 id="如何探测目标系统的安防设备信息？"><a href="#如何探测目标系统的安防设备信息？" class="headerlink" title="如何探测目标系统的安防设备信息？"></a>如何探测目标系统的安防设备信息？</h3><blockquote><p>1.防火墙，扫描出防火墙上开放的端口，通过检查响应包可以识别端口是否被防火墙过滤</p><p>2.负载均衡，负载均衡从其应用的地理结构上分为本地负载均衡和全局负载均衡。本地负载均衡是指对本地的服务器群做负载均衡；全局负载均衡是指分别放置在不同地理位置、有不同网络结构的服务器群间作负载均衡。</p><p>3.WAF识别，Web Application Firewall 应用层，通过执行一些列针对Http&#x2F;Https的安全策略专门来保护Web应用的产品。检测通过WAF检测通过发送一个正常的 Http 请求，然后观察其返回有没有一些特征字符，若没有，再发送一个恶意的请求触发 WAF 拦截，用获取其返回的特征来判断 WAP 的存在。可以借助一些工具，如wafwoof、sqlmap等，也可以使用手动方法(在网站 URL 地址后面输入诸如““and”“1&#x3D;1等SQL 语句)触发 WAF并回显网站的 WAF 信息。对于一些旁路或工作在透明模式的安防设备，如IDS、IPS、行为管控系统、病毒墙等,不能通过主动方式探测，只能通过数据分析和推理的方法了解其存在以及相关参数。</p></blockquote><h3 id="端口扫描有哪些方法？"><a href="#端口扫描有哪些方法？" class="headerlink" title="端口扫描有哪些方法？"></a>端口扫描有哪些方法？</h3><blockquote><p>​端口扫描时，扫描者假意与目标进行TCP连接，发起请求，通过观察端口反应来判断端口信息,端口扫描可以采用的方法包括 TCP connect ()、TCP SYN、TCP FINQNULLACK、UDP 扫描等。</p><p>1.TCP connect() </p><p>​扫描TCP connect()是最基本的TCP扫描，或称为全开扫描。操作系统提供的connect0系统调用，用来与每一个感兴趣的目标计算机的端口进行连接。如果端口处于侦听状态，那么connectO就能成功;否则，这个端口是不能用的，即没有提供服务。这个技术最大的优点是不需要任何权限，系统中的任何用户都有权利使用这个调用。另一个优点就是速度。如果对每个目标端口以线性的方式使用单独的connect0调用，那么将会花费相当长的时间,但可以通过同时打开多个套接字加速扫描，如使用非阻塞 I&#x2F;O 允许设置一个低的时间用尽周期，同时观察多个套接字。这种方法的缺点是很容易被发觉，并且被过滤掉。目标计算机的 logs 文件会显示一连串的连接和连接出错的服务消息，并且能很快地关闭它。</p><p>2.TCP SYN 扫描</p><p>​TCPSYN扫描技术通常被认为是“半开放”扫描，因为这种扫描程序不必打开一个完全的 TCP 连接。扫描程序发送的是一个 SYN 数据包，和试图打开一个实际的连接并等待反应一样(参考 TCP 的三次握手建立一个 TCP 连接的过程)。一个 SYNIACK 的返回信息表示端口处于侦听状态。一个RST返回表示端口没有处于侦听状态。如果收到一个SYNIACK则扫描程序必须再发送一个 RST 信号来关闭这个连接过程。这种扫描技术的优点是一般不会在目标计算机上留下记录;缺点是必须要有 root 权限才能建立SYN 数据包。</p><p>3.TCP FIN 扫描</p><p>​有的时候，SYN扫描有可能不够秘密，一些防火墙和包过滤器会对一些指定的端口进行监视，有的程序能检测到这些扫描，而 FIN 数据包可能会没有任何麻烦地通过。一方面这种扫描方法的思想是关闭的端口会用适当的 RST 来回复 FIN 数据包，另一方面，打开的端口会忽略对 FIN 数据包的回复，这种方法和系统的实现有一定的关系。有的系统不管端口是否打开都回复 RST，这时，TCP FIN 扫描方法就不适用了，但这种方法在区分 UnixNT 时十分有用。</p><p>4.NULL扫描</p><p>​RFC793 中规定，当一个端口关闭时，如果它收到一个标志位为空的信息，系统应当反馈一条 RST;当端口开放时，如果收到这种标志位为空的信息，系统不予响应。这种标志位为空的信息，称其为NULL，故这种扫描称为 NULL 扫描。NULL 扫描的优点就是行踪隐蔽，但相对于半连接扫描(完成一半的 TCP 连接)，毕竟还是执行了大部分握手过程，如果目标网络的安防措施部署得较为深入，难免会有被发现的风险。而 NULL扫描隐蔽性更强，不必过分担心被防火墙和包过滤器等防护设备的端口监视功能发现。</p><p>5，ACK扫描<br>ACK 扫描是利用标志位 ACK 实施扫描探测，而ACK 标志在 TCP 协议中表示确认序号有效，它表示确认一个正常的TCP 连接，但是在 TCP ACK 扫描中没有进行正常的TCP连接过程，实际上是没有真正的TCP连接。使用 TCP ACK 扫不能够确定端口的关闭或者开放，因为当发送给对方一个含有 ACK 表示的TCP 报文时，都返回含有 RST标志的报文，无论端口是开放或者关闭的。</p><p>6、UDP扫描</p><p>​当一个UDP端口接收到一个UDP数据报时，如果它是关闭的，就会给源端发回一个ICMP端口不可达数据报，如果它是开放的，那么就会忽略这个数据报，也就是将它丢而不返回任何信息。UDP扫播的优点是可以完成对 UDP 端口的探测:缺点是需要系统管理员的权限，扫描结果的可靠性不高(因为当发出一个UDP数据报而没有收到任何应答时有可能是因为这个UDP端口是开放的，也有可能是因为这个数据报在传输过程中丢失了)另外，扫描的速度很慢(原因是RFC1812中对ICMP错误报文的生成速度进行了限制)。</p></blockquote><h3 id="简述漏洞扫描的过程。"><a href="#简述漏洞扫描的过程。" class="headerlink" title="简述漏洞扫描的过程。"></a>简述漏洞扫描的过程。</h3><blockquote><p>通过PoC代码或漏洞机理对目标系统进行分析，就可以发现是否存在漏洞。</p><p>漏洞扫描可以分为主机漏洞扫描和网络漏洞扫描，其扫描过程稍有不同。</p><p>1.主机漏洞扫描</p><p>​主机漏洞扫描通常在目标系统上安装一个代理(Agent)或者是服务(Services)以便能够访问所有的文件与进程，以此来扫描计算机中的漏洞。</p><p>2.网络漏洞扫描<br>网络漏洞扫描通过网络来扫描远程计算机中的漏洞，可以看作一种漏洞信息收集。根据不同漏洞的特性构造网络数据包，发给网络中的一个或多个目标服务器，以判断某特定的漏洞是否存在。</p><p>​(1)网络漏洞扫描进行工作时，首先探测目标系统的存活主机(例如 SYN 扫描)，对存活主机进行端口扫描，确定系统开放的端口，同时根据协议指纹技术识别出主机的操作系统类型(初始化旗标):然后根据目标操作系统和提供的网络服务，调用漏洞资料库中已知的各种漏洞进行逐一检测，通过对目标系统探测响应数据包的分析判断是否存在漏洞。</p><p>​(2)当前的漏洞扫描技术主要是基于特征匹配原理的，一些漏洞扫描器通过检测目标主机不同端口开放的服务并记录其应答，然后与漏洞库进行比较，如果满足匹配条件，则认为存在安全漏洞。<br>在漏洞扫描中，漏洞库 PoC 定义的精确与否直接影响最后的扫描结果。费</p></blockquote><h3 id="简述漏洞扫描器的结构。"><a href="#简述漏洞扫描器的结构。" class="headerlink" title="简述漏洞扫描器的结构。"></a>简述漏洞扫描器的结构。</h3><blockquote><p>​在漏洞扫描的过程中，可以借助于漏洞扫描器。</p><p>​传统的漏洞扫描器可以分为两种类型:主机漏洞扫描器(Host Sanner)和网络漏洞扫描器(Network Scanner)。</p><p>​主机漏洞扫描器是用于系统本地运行检测系统漏洞程序的硬设备:</p><p>​网络漏洞扫描器是对企业网络架构系统或者网站进行扫描的硬件设备。</p><p>​漏洞扫描也是一种主动探测的方式，在有些渗透测试条件下不被允许，并且扫描过程也受到扫描器、扫描软件的限制，精准性、指向性比较差。渗透测试者还可以根据应用指纹信息、版本号，通过漏洞发布平台进行直接查询。</p></blockquote><h3 id="如何进行目标系统网络拓扑探测？"><a href="#如何进行目标系统网络拓扑探测？" class="headerlink" title="如何进行目标系统网络拓扑探测？"></a>如何进行目标系统网络拓扑探测？</h3><blockquote><p>​对于目标系统，网络的安全信息最终可以投射到态势图上，形成整体和动态的认识。一般以网络拓扑或地理地图为背景。</p><p>​网络的拓扑结构是研究如何在一个网络中互连节点之间链接的安排，可以分为物理网拓扑和逻辑网络拓扑结构两类。网络拓扑发现技术的原理是通过网络扫播、主机探测数据噢探等技术手段。发现网络拓扑中各网络节点、主机和网络连接等拓扑信息，以及名个设备、主机之间的互连关系。</p><p>​实现网络拓扑探测发现必须要解决的问题主要包括:发现不同类型的设备，发现有关设备类型的详细信息，需要一个更好的算法来识别的设备类以及网络拓扑可视化。</p><p>1.基于ARP协议的网络拓扑发现</p><p>​每个路由设备的以太网接口在本地缓存中维护着张 ARP表，表中记录了接口连接网络中IP地址和MAC的转化关系。因此，根据路由器的 ARP 表项，可以发现接口同一侧局城网中所有的网络设备和主机，然后继续利用 ARP 关系进行发现，以此类推，就可得到整个网络的拓扑结构。这种方法适合于局域网发现，发现效率很高，但不适合于过大的网络,不能发现那些不支持ARP 协议的网络连接和设备。</p><p>2、基于OSPF路由协议的网络拓扑发现</p><p>​开放最短路径优先(OSPF)是一种自适应的路由协议，内部网关协议用于互联网协议(IP)网络。在一个自治系统(AS)内使用链接状态路由算法，用于单一自治系统内决策跨由。<br>​基于 OSPF 路由协议的网络拓扑发现就是根据 OSPF 协议的实现原理，使其能够与路由设备相互通信，访问区域内所有边界路由设备的拓扑数据库。</p><p>3.基于SNMP协议的网络拓扑发现</p><p>​基于 SNMP 协议的网络拓扑发现主要是利用 MIB 中定义的路由信息表(ipRoutetable)来判断网络层的拓扑结构。基于 SNMP 的网络拓扑发现基本上分为网络设备存活性、判别设备类型区分和节点连接发现三个步骤进行。</p></blockquote><h3 id="什么是网络态势图？"><a href="#什么是网络态势图？" class="headerlink" title="什么是网络态势图？"></a>什么是网络态势图？</h3><blockquote><p>​态势感知是一种基于环境和动态整体地洞悉安全风险的能力，是以安全数据为基础,从全局视角提供网络识别、理解分析的一种方式，最终为决策与行动提供支持。</p><p>​态势感知的概念最早在军事领域被提出，分为态势要素获取、理解和预测三个层次(如图412)。并随着网络的兴起而升级为网络态势感知(CyberspaceSituationAwareness，CSA)旨在大规模网络环境中对能够引起网络态势发生变化的安全要素进行获取、理解、显示,以及最近发展趋势的顺延性预测，进而进行决策与行动。</p><p>​态势图基于态势感知技术。在渗透测试过程中建立态势图，能够从全局的角度了解测试目标的安全状态。所谓网络态势图，是指由各种网络设备运行状况、网络行为以及用户行为等因素构成的整个网络当前的安全状态和变化趋势，并采用地图背景展示。</p><p>​态势图一般以地图或拓扑图为背景，上面有服务器、主机、网络节点的各类信息(如IP端口、操作系统、漏洞等)标定，可以通过一些图形操作进行交互访问。</p><p>​这里所说的态势是一种状态、趋势，是整体和全局的概念，任何单一的情况或状态都不能称之为态势，因此对态势的理解特别强调环境性、动态性和整体性。环境性是指态势感知的应用环境，是在一个较大的范围内具有一定规模的网络;动态性是指态势随时间不断变化，态势信息不仅包括过去和当前的状态，还要对未来的趋势做出预测;整体性是态势各实体间相互关系的体现，某些网络实体状态发生变化，会影响到其他网络实体的状态进而影响整个网络的态势。<br>为了实时、准确地绘制整个网络安全态势图，网络安全态势感知要在对网络资源进行要素采集的基础上，通过数据预处理、网络安全态势特征提取、态势评估、态势预测和势展示等过程来完成，这其中涉及许多相关的技术问题，主要包括数据融合技术、数据挖掘技术、特征提取技术、态势预测技术和可视化技术等。</p></blockquote><h3 id="解释网络嗅探的原理。"><a href="#解释网络嗅探的原理。" class="headerlink" title="解释网络嗅探的原理。"></a>解释网络嗅探的原理。</h3><blockquote><p>​嗅探一般指嗅探器捕获网络数据包。</p><p>​噢探器可以窃听网络上传输的数据包。用集线器 hub 组建的网络是基于共享原理的局域网内所有的计算机都接收相同的数据包，而网卡构造了硬件的“过滤器”，通过识别MAC地址过滤掉和自己无关的信息，嗅探程序只需关闭这个过滤器，将网卡设置为“混杂模式”就可以进行嗅探。</p><p>​网络嗅探利用的是共享式的网络传输介质。共享即意味着网络中的一台机器可以嗅探到传递给本网段(冲突域)中所有机器的报文。最常见的以太网就是一种共享式的网络技术。</p><p>​以太网卡收到报文后，通过对目的地址进行检查来判断是否是传递给自己的，如果是，则把报文传递给操作系统;否则，将报文丢弃，不进行处理。</p><p>​网卡存在一种特殊的工作模式，在这种工作模式下，网卡不对目的地址进行判断，而直接将收到的所有报文都传递给操作系统进行处理，这种特殊的工作模式称为混杂模式。网络嗅探器通过将网卡设置为混杂模式来实现对网络的嗅探。</p><p>（网卡：一个主机系统实体中，数据的收发是由网卡来完成的，当网卡接收到传输来的数据时，网卡内的单片程序首先解析数据包的目的网卡物理地址，然后根据网卡驱动程序设置的接收模式判断该不该接收，认为该接收就产生中断信号通知CPU，认为不该接收就丢数据包，所以不该接收的数据包就被网卡截断了，上层应用根本就不知道这个过程。CPU如果得到网卡的中断信号，则根据网卡的驱动程序设置的网卡中断程序地址调用驱动程序接收数据，并将接收的数据交给上层协议软件处理。）</p></blockquote><h3 id="如何进行流量分析？流量分析可以提供哪些信息？"><a href="#如何进行流量分析？流量分析可以提供哪些信息？" class="headerlink" title="如何进行流量分析？流量分析可以提供哪些信息？"></a>如何进行流量分析？流量分析可以提供哪些信息？</h3><blockquote><p>​除了数据包本身，数据包流量统计特征也可能蕴含重要信息。</p><p>​针对数据包流量统计特征蕴含的大量信息进行分析的技术就是网络流量分析。网络流量分析是计算机信息安全领域的一个分支，它将一组设备产生的网络流量作为输入，将与这些设备、用户、应用程序或流量本身有关的信息作为输出。</p><p>​网络流量分析通常包括4 个阶段，流量收集、预处理、数据分析和结果评估。</p><p>流量收集是构建数据集的过程;<br>预处理则通过去除数据集中无效的数据或提取流量的关键特征等将收集到的数据转换为可理解的格式以便后续分析;<br>数据分析是网络流量分析流程中最重要的环节;<br>结果评估输出分析结果。</p><p>​通过网络流量分析可以获取设备、用户行为、用户标识等信息。</p></blockquote><h3 id="什么是正向工程、逆向工程、再工程？关系如何？"><a href="#什么是正向工程、逆向工程、再工程？关系如何？" class="headerlink" title="什么是正向工程、逆向工程、再工程？关系如何？"></a>什么是正向工程、逆向工程、再工程？关系如何？</h3><blockquote><p>​软件逆向分析涵盖在软件逆向工程范畴内。软件逆向工程是软件科学和计算机科学的一个分支，它综合了加密和解密、编译和反编译、系统分析、程序理解等多种计算机技术，从可运行的程序系统出发，生成对应的源程序、系统结构以及相关设计原理和算法思想的文档等。</p><p>​可见软件逆向是对已构建程序的解构还原，从二进制代码出发，逆向猜测、推理、分析出程序原本的功能、逻辑甚至源代码。</p><p>​这个过程与逆向思维过程十分吻合。所谓逆向思维是指从反面提出问题、分析问题、解决问题的一种思维方式，它是与正向思维相对应的一种思维，因此软件逆向分析的逆向思维是对软件创作的正向思维的目标逆向、方向逆向和方式逆向。软件逆向分析过程可视为与软件作者的博弈对抗过程。</p><p>​正向工程是指根据需求和设计，通过编码、编译等步骤，将软件开发为可执行的程序的过程。它是从需求和设计到实现的过程，是软件系统开发的正常流程。</p><p>​逆向工程是从任何人造产品中提取知识或者设计规划的过程。</p><p>​再工程（Reengineering）：再工程是指对已有软件系统的源代码、文档等进行分析和修改，以提高其质量、可维护性和可扩展性的过程。再工程是一个包括逆向工程在内的过程，旨在通过对现有系统进行分析和修改，使其满足新的需求或提高其质量。</p><p>​正向工程解决了功能的实现，说明了哪些功能需要增加和删除;逆向工程是从实现到设计或需求的过程，再工程则是对现有系统进行分析和修改以改进其质量和可维护性的过程。</p><img src="https://raw.githubusercontent.com/GiyaYon/mypicGo/master/%E5%B7%A5%E7%A8%8B%E4%B8%89%E8%80%85%E5%85%B3%E7%B3%BB.png" style="zoom:50%;" /><center>正向逆向再工程三者关系</center><p>逆向分析的一般流程包括解码&#x2F;反汇编(目标二进制代码)、中间语言翻译(汇编&#x2F;类汇编代码)、数据流分析、控制流分析(各级中间语言)其他分析(高级抽象代码)和优化几个步骤</p><p>​1.静态反汇编是对反汇编出来的程序清单的分析，从提示信息入手进行分析。<br>​目前,多数软件在设计时都采用了人机对话方式。所谓人机对话，即在软件运行过程中，需要有用户选择的地方，软件应显示相应的提示信息，并等待用户按键选择。如在执行某段程序之后显示一串提示信息，以反映该段程序运行后的状态，是正常运行，还是出现错误，或者提示用户进行下一步工作的帮助信息。<br>​如果我们对静态反汇编出来的程序清单进行阅读，就可了解软件的编程思路，顺利破解该软件，这也就是我们常说的破解版(即盗版)。</p><p>​2.编译和反编译不一定要生成汇编代码，一般生成某种设计好的中间语言。但在反编译的二进制解码过程中，首先会生成一种类汇编或汇编代码，因此二进制解码也可称为反汇编。在反编译的过程中，中间代码也有很多级别，类汇编或汇编代码只是低级中语言。<br>中间语言便于对程序的理解和分析。</p><p>​3.数据流分析是在不执行程序的情况下，收集程序数据运行时的信息，分析程序中数据对象之间的关系。</p><p>​4.控制流分析对执行语句的若干可执行路径进行分析，确定程序的控制结构，建立控制流图。控制流分析有两种形式:过程内(intraprocedural)分析和过程间(interprocedural)分析。</p><p>​5.其他分析和优化是指对分析的结果进行高级推理和优化，使其逼近理想结果<br>逆向分析过程通常可以借助于一些软件工具，如反汇编工具IDA(DA Pro Disassemblerand Debugger)、OllyDbg、D32Aam; 反编译工具dcc&#x2F;UQBT&#x2F;Boomerang、CodeSurfer和CodeSufer&#x2F;x86 等，以提高工作效率。</p></blockquote><hr><h2 id="第五章：服务器端渗透测试"><a href="#第五章：服务器端渗透测试" class="headerlink" title="第五章：服务器端渗透测试"></a>第五章：服务器端渗透测试</h2><h3 id="什么是服务器端渗透"><a href="#什么是服务器端渗透" class="headerlink" title="什么是服务器端渗透?"></a>什么是服务器端渗透?</h3><blockquote></blockquote><h3 id="什么是DMZ区"><a href="#什么是DMZ区" class="headerlink" title="什么是DMZ区?"></a>什么是DMZ区?</h3><blockquote></blockquote><h3 id="为什么Web-应用程序成为攻击者重点攻击的对象"><a href="#为什么Web-应用程序成为攻击者重点攻击的对象" class="headerlink" title="为什么Web 应用程序成为攻击者重点攻击的对象?"></a>为什么Web 应用程序成为攻击者重点攻击的对象?</h3><blockquote></blockquote><h3 id="FTP渗透的方法是什么"><a href="#FTP渗透的方法是什么" class="headerlink" title="FTP渗透的方法是什么?"></a>FTP渗透的方法是什么?</h3><blockquote></blockquote><h3 id="比较FIP主、被动模式的不同，并回答为什么被动模式适合公网服务"><a href="#比较FIP主、被动模式的不同，并回答为什么被动模式适合公网服务" class="headerlink" title="比较FIP主、被动模式的不同，并回答为什么被动模式适合公网服务"></a>比较FIP主、被动模式的不同，并回答为什么被动模式适合公网服务</h3><blockquote></blockquote><h3 id="如何对SMTP服务器进行渗透"><a href="#如何对SMTP服务器进行渗透" class="headerlink" title="如何对SMTP服务器进行渗透?"></a>如何对SMTP服务器进行渗透?</h3><blockquote></blockquote><h3 id="如何对POP3-服务器进行渗透"><a href="#如何对POP3-服务器进行渗透" class="headerlink" title="如何对POP3 服务器进行渗透?"></a>如何对POP3 服务器进行渗透?</h3><blockquote></blockquote><h3 id="DNS渗透的方法如何"><a href="#DNS渗透的方法如何" class="headerlink" title="DNS渗透的方法如何?"></a>DNS渗透的方法如何?</h3><blockquote></blockquote><h3 id="简述数据库服务器端的渗透方法"><a href="#简述数据库服务器端的渗透方法" class="headerlink" title="简述数据库服务器端的渗透方法"></a>简述数据库服务器端的渗透方法</h3><blockquote></blockquote><h3 id="为什么要对安全机制进行反制"><a href="#为什么要对安全机制进行反制" class="headerlink" title="为什么要对安全机制进行反制?"></a>为什么要对安全机制进行反制?</h3><blockquote></blockquote><hr><h2 id="第六章：客户端渗透测试"><a href="#第六章：客户端渗透测试" class="headerlink" title="第六章：客户端渗透测试"></a>第六章：客户端渗透测试</h2><h2 id="第七章：网络设备渗透测试"><a href="#第七章：网络设备渗透测试" class="headerlink" title="第七章：网络设备渗透测试"></a>第七章：网络设备渗透测试</h2><h2 id="第八章：后渗透测试"><a href="#第八章：后渗透测试" class="headerlink" title="第八章：后渗透测试"></a>第八章：后渗透测试</h2><h2 id="第九章：社会工程学渗透测试"><a href="#第九章：社会工程学渗透测试" class="headerlink" title="第九章：社会工程学渗透测试"></a>第九章：社会工程学渗透测试</h2><h2 id="第十章：工控网络渗透测试"><a href="#第十章：工控网络渗透测试" class="headerlink" title="第十章：工控网络渗透测试"></a>第十章：工控网络渗透测试</h2><h2 id="第十一章：无线网络渗透测试"><a href="#第十一章：无线网络渗透测试" class="headerlink" title="第十一章：无线网络渗透测试"></a>第十一章：无线网络渗透测试</h2><h2 id="第十二章：渗透测试自动化框架"><a href="#第十二章：渗透测试自动化框架" class="headerlink" title="第十二章：渗透测试自动化框架"></a>第十二章：渗透测试自动化框架</h2><h2 id="第十三章：渗透测试程序设计"><a href="#第十三章：渗透测试程序设计" class="headerlink" title="第十三章：渗透测试程序设计"></a>第十三章：渗透测试程序设计</h2><h2 id="第十四章：渗透测试质量控制"><a href="#第十四章：渗透测试质量控制" class="headerlink" title="第十四章：渗透测试质量控制"></a>第十四章：渗透测试质量控制</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本书是《网络安全渗透测试》王晓东 西安电子科技大学出版社.&lt;/p&gt;
&lt;p&gt;在信息安全领域中，渗透测试是公认度非常高的新型安全测试方法。从其机</summary>
      
    
    
    
    <category term="网络工程" scheme="http://giyayonlib.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="网络安全" scheme="http://giyayonlib.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="渗透测试" scheme="http://giyayonlib.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="网络" scheme="http://giyayonlib.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="测试" scheme="http://giyayonlib.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
    <category term="安全" scheme="http://giyayonlib.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://giyayonlib.com/2023/02/22/hello-world/"/>
    <id>http://giyayonlib.com/2023/02/22/hello-world/</id>
    <published>2023-02-22T05:12:47.574Z</published>
    <updated>2023-02-22T05:12:47.574Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
